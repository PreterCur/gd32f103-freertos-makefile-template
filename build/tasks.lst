ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./freertos/src/tasks.c"
  18              		.global	pxCurrentTCB
  19              		.section	.bss.pxCurrentTCB,"aw",%nobits
  20              		.align	2
  23              	pxCurrentTCB:
  24 0000 00000000 		.space	4
  25              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  26              		.align	2
  29              	pxReadyTasksLists:
  30 0000 00000000 		.space	100
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  32              		.align	2
  35              	xDelayedTaskList1:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  38              		.align	2
  41              	xDelayedTaskList2:
  42 0000 00000000 		.space	20
  42      00000000 
  42      00000000 
  42      00000000 
  42      00000000 
  43              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  44              		.align	2
  47              	pxDelayedTaskList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  50              		.align	2
  53              	pxOverflowDelayedTaskList:
  54 0000 00000000 		.space	4
  55              		.section	.bss.xPendingReadyList,"aw",%nobits
  56              		.align	2
  59              	xPendingReadyList:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 2


  60 0000 00000000 		.space	20
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  62              		.align	2
  65              	xTasksWaitingTermination:
  66 0000 00000000 		.space	20
  66      00000000 
  66      00000000 
  66      00000000 
  66      00000000 
  67              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  68              		.align	2
  71              	uxDeletedTasksWaitingCleanUp:
  72 0000 00000000 		.space	4
  73              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  74              		.align	2
  77              	xSuspendedTaskList:
  78 0000 00000000 		.space	20
  78      00000000 
  78      00000000 
  78      00000000 
  78      00000000 
  79              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  80              		.align	2
  83              	uxCurrentNumberOfTasks:
  84 0000 00000000 		.space	4
  85              		.section	.bss.xTickCount,"aw",%nobits
  86              		.align	2
  89              	xTickCount:
  90 0000 00000000 		.space	4
  91              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  92              		.align	2
  95              	uxTopReadyPriority:
  96 0000 00000000 		.space	4
  97              		.section	.bss.xSchedulerRunning,"aw",%nobits
  98              		.align	2
 101              	xSchedulerRunning:
 102 0000 00000000 		.space	4
 103              		.section	.bss.xPendedTicks,"aw",%nobits
 104              		.align	2
 107              	xPendedTicks:
 108 0000 00000000 		.space	4
 109              		.section	.bss.xYieldPending,"aw",%nobits
 110              		.align	2
 113              	xYieldPending:
 114 0000 00000000 		.space	4
 115              		.section	.bss.xNumOfOverflows,"aw",%nobits
 116              		.align	2
 119              	xNumOfOverflows:
 120 0000 00000000 		.space	4
 121              		.section	.bss.uxTaskNumber,"aw",%nobits
 122              		.align	2
 125              	uxTaskNumber:
 126 0000 00000000 		.space	4
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 3


 127              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 128              		.align	2
 131              	xNextTaskUnblockTime:
 132 0000 00000000 		.space	4
 133              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 134              		.align	2
 137              	xIdleTaskHandle:
 138 0000 00000000 		.space	4
 139              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 140              		.align	2
 143              	uxSchedulerSuspended:
 144 0000 00000000 		.space	4
 145              		.section	.text.xTaskCreate,"ax",%progbits
 146              		.align	1
 147              		.global	xTaskCreate
 148              		.syntax unified
 149              		.thumb
 150              		.thumb_func
 152              	xTaskCreate:
 153              	.LFB61:
   1:./freertos/src/tasks.c **** /*
   2:./freertos/src/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:./freertos/src/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./freertos/src/tasks.c ****  *
   5:./freertos/src/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./freertos/src/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./freertos/src/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:./freertos/src/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./freertos/src/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./freertos/src/tasks.c ****  * subject to the following conditions:
  11:./freertos/src/tasks.c ****  *
  12:./freertos/src/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./freertos/src/tasks.c ****  * copies or substantial portions of the Software.
  14:./freertos/src/tasks.c ****  *
  15:./freertos/src/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./freertos/src/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./freertos/src/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./freertos/src/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./freertos/src/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./freertos/src/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./freertos/src/tasks.c ****  *
  22:./freertos/src/tasks.c ****  * http://www.FreeRTOS.org
  23:./freertos/src/tasks.c ****  * http://aws.amazon.com/freertos
  24:./freertos/src/tasks.c ****  *
  25:./freertos/src/tasks.c ****  * 1 tab == 4 spaces!
  26:./freertos/src/tasks.c ****  */
  27:./freertos/src/tasks.c **** 
  28:./freertos/src/tasks.c **** /* Standard includes. */
  29:./freertos/src/tasks.c **** #include <stdlib.h>
  30:./freertos/src/tasks.c **** #include <string.h>
  31:./freertos/src/tasks.c **** 
  32:./freertos/src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:./freertos/src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:./freertos/src/tasks.c **** task.h is included from an application file. */
  35:./freertos/src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:./freertos/src/tasks.c **** 
  37:./freertos/src/tasks.c **** /* FreeRTOS includes. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 4


  38:./freertos/src/tasks.c **** #include "FreeRTOS.h"
  39:./freertos/src/tasks.c **** #include "task.h"
  40:./freertos/src/tasks.c **** #include "timers.h"
  41:./freertos/src/tasks.c **** #include "stack_macros.h"
  42:./freertos/src/tasks.c **** 
  43:./freertos/src/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:./freertos/src/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:./freertos/src/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:./freertos/src/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:./freertos/src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:./freertos/src/tasks.c **** 
  49:./freertos/src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:./freertos/src/tasks.c **** functions but without including stdio.h here. */
  51:./freertos/src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:./freertos/src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:./freertos/src/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:./freertos/src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:./freertos/src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:./freertos/src/tasks.c **** 	#include <stdio.h>
  57:./freertos/src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:./freertos/src/tasks.c **** 
  59:./freertos/src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:./freertos/src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:./freertos/src/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:./freertos/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:./freertos/src/tasks.c **** #else
  64:./freertos/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:./freertos/src/tasks.c **** #endif
  66:./freertos/src/tasks.c **** 
  67:./freertos/src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:./freertos/src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:./freertos/src/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:./freertos/src/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:./freertos/src/tasks.c **** 
  72:./freertos/src/tasks.c **** /*
  73:./freertos/src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:./freertos/src/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:./freertos/src/tasks.c ****  */
  76:./freertos/src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:./freertos/src/tasks.c **** 
  78:./freertos/src/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:./freertos/src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:./freertos/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:./freertos/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:./freertos/src/tasks.c **** 
  83:./freertos/src/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:./freertos/src/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:./freertos/src/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:./freertos/src/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:./freertos/src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:./freertos/src/tasks.c **** #else
  89:./freertos/src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:./freertos/src/tasks.c **** #endif
  91:./freertos/src/tasks.c **** 
  92:./freertos/src/tasks.c **** /*
  93:./freertos/src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:./freertos/src/tasks.c ****  */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 5


  95:./freertos/src/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:./freertos/src/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:./freertos/src/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:./freertos/src/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:./freertos/src/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:./freertos/src/tasks.c **** 
 101:./freertos/src/tasks.c **** /*
 102:./freertos/src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:./freertos/src/tasks.c ****  * global, rather than file scope.
 104:./freertos/src/tasks.c ****  */
 105:./freertos/src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:./freertos/src/tasks.c **** 	#define static
 107:./freertos/src/tasks.c **** #endif
 108:./freertos/src/tasks.c **** 
 109:./freertos/src/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:./freertos/src/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:./freertos/src/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:./freertos/src/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:./freertos/src/tasks.c **** #endif
 114:./freertos/src/tasks.c **** 
 115:./freertos/src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:./freertos/src/tasks.c **** 
 117:./freertos/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:./freertos/src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:./freertos/src/tasks.c **** 	microcontroller architecture. */
 120:./freertos/src/tasks.c **** 
 121:./freertos/src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:./freertos/src/tasks.c **** 	state task. */
 123:./freertos/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:./freertos/src/tasks.c **** 	{																									\
 125:./freertos/src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:./freertos/src/tasks.c **** 		{																								\
 127:./freertos/src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:./freertos/src/tasks.c **** 		}																								\
 129:./freertos/src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:./freertos/src/tasks.c **** 
 131:./freertos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 132:./freertos/src/tasks.c **** 
 133:./freertos/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:./freertos/src/tasks.c **** 	{																									\
 135:./freertos/src/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:./freertos/src/tasks.c **** 																										\
 137:./freertos/src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:./freertos/src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:./freertos/src/tasks.c **** 		{																								\
 140:./freertos/src/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:./freertos/src/tasks.c **** 			--uxTopPriority;																			\
 142:./freertos/src/tasks.c **** 		}																								\
 143:./freertos/src/tasks.c **** 																										\
 144:./freertos/src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:./freertos/src/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:./freertos/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:./freertos/src/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:./freertos/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:./freertos/src/tasks.c **** 
 150:./freertos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 151:./freertos/src/tasks.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 6


 152:./freertos/src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:./freertos/src/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:./freertos/src/tasks.c **** 	being used. */
 155:./freertos/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:./freertos/src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:./freertos/src/tasks.c **** 
 158:./freertos/src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:./freertos/src/tasks.c **** 
 160:./freertos/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:./freertos/src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:./freertos/src/tasks.c **** 	architecture being used. */
 163:./freertos/src/tasks.c **** 
 164:./freertos/src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:./freertos/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:./freertos/src/tasks.c **** 
 167:./freertos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 168:./freertos/src/tasks.c **** 
 169:./freertos/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:./freertos/src/tasks.c **** 	{																								\
 171:./freertos/src/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:./freertos/src/tasks.c **** 																									\
 173:./freertos/src/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:./freertos/src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:./freertos/src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:./freertos/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:./freertos/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:./freertos/src/tasks.c **** 
 179:./freertos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 180:./freertos/src/tasks.c **** 
 181:./freertos/src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:./freertos/src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:./freertos/src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:./freertos/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:./freertos/src/tasks.c **** 	{																									\
 186:./freertos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:./freertos/src/tasks.c **** 		{																								\
 188:./freertos/src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:./freertos/src/tasks.c **** 		}																								\
 190:./freertos/src/tasks.c **** 	}
 191:./freertos/src/tasks.c **** 
 192:./freertos/src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:./freertos/src/tasks.c **** 
 194:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 195:./freertos/src/tasks.c **** 
 196:./freertos/src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:./freertos/src/tasks.c **** count overflows. */
 198:./freertos/src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:./freertos/src/tasks.c **** {																									\
 200:./freertos/src/tasks.c **** 	List_t *pxTemp;																					\
 201:./freertos/src/tasks.c **** 																									\
 202:./freertos/src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:./freertos/src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:./freertos/src/tasks.c **** 																									\
 205:./freertos/src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:./freertos/src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:./freertos/src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:./freertos/src/tasks.c **** 	xNumOfOverflows++;																				\
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 7


 209:./freertos/src/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:./freertos/src/tasks.c **** }
 211:./freertos/src/tasks.c **** 
 212:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 213:./freertos/src/tasks.c **** 
 214:./freertos/src/tasks.c **** /*
 215:./freertos/src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:./freertos/src/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:./freertos/src/tasks.c ****  */
 218:./freertos/src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:./freertos/src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:./freertos/src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:./freertos/src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:./freertos/src/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 224:./freertos/src/tasks.c **** 
 225:./freertos/src/tasks.c **** /*
 226:./freertos/src/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:./freertos/src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:./freertos/src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:./freertos/src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:./freertos/src/tasks.c ****  */
 231:./freertos/src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:./freertos/src/tasks.c **** 
 233:./freertos/src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:./freertos/src/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:./freertos/src/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:./freertos/src/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:./freertos/src/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:./freertos/src/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:./freertos/src/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:./freertos/src/tasks.c **** to its original value when it is released. */
 241:./freertos/src/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:./freertos/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:./freertos/src/tasks.c **** #else
 244:./freertos/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:./freertos/src/tasks.c **** #endif
 246:./freertos/src/tasks.c **** 
 247:./freertos/src/tasks.c **** /*
 248:./freertos/src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:./freertos/src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:./freertos/src/tasks.c ****  * (the task's run time environment, including register values)
 251:./freertos/src/tasks.c ****  */
 252:./freertos/src/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:./freertos/src/tasks.c **** {
 254:./freertos/src/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:./freertos/src/tasks.c **** 
 256:./freertos/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:./freertos/src/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:./freertos/src/tasks.c **** 	#endif
 259:./freertos/src/tasks.c **** 
 260:./freertos/src/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:./freertos/src/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:./freertos/src/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:./freertos/src/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:./freertos/src/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:./freertos/src/tasks.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 8


 266:./freertos/src/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:./freertos/src/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:./freertos/src/tasks.c **** 	#endif
 269:./freertos/src/tasks.c **** 
 270:./freertos/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:./freertos/src/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:./freertos/src/tasks.c **** 	#endif
 273:./freertos/src/tasks.c **** 
 274:./freertos/src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:./freertos/src/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:./freertos/src/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:./freertos/src/tasks.c **** 	#endif
 278:./freertos/src/tasks.c **** 
 279:./freertos/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:./freertos/src/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:./freertos/src/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:./freertos/src/tasks.c **** 	#endif
 283:./freertos/src/tasks.c **** 
 284:./freertos/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:./freertos/src/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:./freertos/src/tasks.c **** 	#endif
 287:./freertos/src/tasks.c **** 
 288:./freertos/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:./freertos/src/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:./freertos/src/tasks.c **** 	#endif
 291:./freertos/src/tasks.c **** 
 292:./freertos/src/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:./freertos/src/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:./freertos/src/tasks.c **** 	#endif
 295:./freertos/src/tasks.c **** 
 296:./freertos/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:./freertos/src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:./freertos/src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:./freertos/src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:./freertos/src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:./freertos/src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:./freertos/src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:./freertos/src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:./freertos/src/tasks.c **** 
 305:./freertos/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:./freertos/src/tasks.c **** 		for additional information. */
 307:./freertos/src/tasks.c **** 		struct	_reent xNewLib_reent;
 308:./freertos/src/tasks.c **** 	#endif
 309:./freertos/src/tasks.c **** 
 310:./freertos/src/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:./freertos/src/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:./freertos/src/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:./freertos/src/tasks.c **** 	#endif
 314:./freertos/src/tasks.c **** 
 315:./freertos/src/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:./freertos/src/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:./freertos/src/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:./freertos/src/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:./freertos/src/tasks.c **** 	#endif
 320:./freertos/src/tasks.c **** 
 321:./freertos/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:./freertos/src/tasks.c **** 		uint8_t ucDelayAborted;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 9


 323:./freertos/src/tasks.c **** 	#endif
 324:./freertos/src/tasks.c **** 
 325:./freertos/src/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:./freertos/src/tasks.c **** 		int iTaskErrno;
 327:./freertos/src/tasks.c **** 	#endif
 328:./freertos/src/tasks.c **** 
 329:./freertos/src/tasks.c **** } tskTCB;
 330:./freertos/src/tasks.c **** 
 331:./freertos/src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:./freertos/src/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:./freertos/src/tasks.c **** typedef tskTCB TCB_t;
 334:./freertos/src/tasks.c **** 
 335:./freertos/src/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:./freertos/src/tasks.c **** which static variables must be declared volatile. */
 337:./freertos/src/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:./freertos/src/tasks.c **** 
 339:./freertos/src/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:./freertos/src/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:./freertos/src/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:./freertos/src/tasks.c **** the static qualifier. */
 343:./freertos/src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:./freertos/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:./freertos/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:./freertos/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:./freertos/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:./freertos/src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:./freertos/src/tasks.c **** 
 350:./freertos/src/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:./freertos/src/tasks.c **** 
 352:./freertos/src/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:./freertos/src/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:./freertos/src/tasks.c **** 
 355:./freertos/src/tasks.c **** #endif
 356:./freertos/src/tasks.c **** 
 357:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:./freertos/src/tasks.c **** 
 359:./freertos/src/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:./freertos/src/tasks.c **** 
 361:./freertos/src/tasks.c **** #endif
 362:./freertos/src/tasks.c **** 
 363:./freertos/src/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:./freertos/src/tasks.c **** the errno of the currently running task. */
 365:./freertos/src/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:./freertos/src/tasks.c **** 	int FreeRTOS_errno = 0;
 367:./freertos/src/tasks.c **** #endif
 368:./freertos/src/tasks.c **** 
 369:./freertos/src/tasks.c **** /* Other file private variables. --------------------------------*/
 370:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:./freertos/src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:./freertos/src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 10


 380:./freertos/src/tasks.c **** 
 381:./freertos/src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:./freertos/src/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:./freertos/src/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:./freertos/src/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:./freertos/src/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:./freertos/src/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:./freertos/src/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:./freertos/src/tasks.c **** accessed from a critical section. */
 389:./freertos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:./freertos/src/tasks.c **** 
 391:./freertos/src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:./freertos/src/tasks.c **** 
 393:./freertos/src/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:./freertos/src/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:./freertos/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:./freertos/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:./freertos/src/tasks.c **** 
 398:./freertos/src/tasks.c **** #endif
 399:./freertos/src/tasks.c **** 
 400:./freertos/src/tasks.c **** /*lint -restore */
 401:./freertos/src/tasks.c **** 
 402:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 403:./freertos/src/tasks.c **** 
 404:./freertos/src/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:./freertos/src/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:./freertos/src/tasks.c **** 
 407:./freertos/src/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:./freertos/src/tasks.c **** 
 409:./freertos/src/tasks.c **** #endif
 410:./freertos/src/tasks.c **** 
 411:./freertos/src/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:./freertos/src/tasks.c **** 
 413:./freertos/src/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:./freertos/src/tasks.c **** 
 415:./freertos/src/tasks.c **** #endif
 416:./freertos/src/tasks.c **** 
 417:./freertos/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:./freertos/src/tasks.c **** 
 419:./freertos/src/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:./freertos/src/tasks.c **** 
 421:./freertos/src/tasks.c **** #endif
 422:./freertos/src/tasks.c **** 
 423:./freertos/src/tasks.c **** /* File private functions. --------------------------------*/
 424:./freertos/src/tasks.c **** 
 425:./freertos/src/tasks.c **** /**
 426:./freertos/src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:./freertos/src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:./freertos/src/tasks.c ****  * is in any other state.
 429:./freertos/src/tasks.c ****  */
 430:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:./freertos/src/tasks.c **** 
 432:./freertos/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:./freertos/src/tasks.c **** 
 434:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:./freertos/src/tasks.c **** 
 436:./freertos/src/tasks.c **** /*
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 11


 437:./freertos/src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:./freertos/src/tasks.c ****  * automatically upon the creation of the first task.
 439:./freertos/src/tasks.c ****  */
 440:./freertos/src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:./freertos/src/tasks.c **** 
 442:./freertos/src/tasks.c **** /*
 443:./freertos/src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:./freertos/src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:./freertos/src/tasks.c ****  * creation of the first user task.
 446:./freertos/src/tasks.c ****  *
 447:./freertos/src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:./freertos/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:./freertos/src/tasks.c ****  *
 450:./freertos/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:./freertos/src/tasks.c ****  *
 452:./freertos/src/tasks.c ****  */
 453:./freertos/src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:./freertos/src/tasks.c **** 
 455:./freertos/src/tasks.c **** /*
 456:./freertos/src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:./freertos/src/tasks.c ****  * including the stack pointed to by the TCB.
 458:./freertos/src/tasks.c ****  *
 459:./freertos/src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:./freertos/src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:./freertos/src/tasks.c ****  */
 462:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:./freertos/src/tasks.c **** 
 464:./freertos/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:./freertos/src/tasks.c **** 
 466:./freertos/src/tasks.c **** #endif
 467:./freertos/src/tasks.c **** 
 468:./freertos/src/tasks.c **** /*
 469:./freertos/src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:./freertos/src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:./freertos/src/tasks.c ****  * and its TCB deleted.
 472:./freertos/src/tasks.c ****  */
 473:./freertos/src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:./freertos/src/tasks.c **** 
 475:./freertos/src/tasks.c **** /*
 476:./freertos/src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:./freertos/src/tasks.c ****  * either the current or the overflow delayed task list.
 478:./freertos/src/tasks.c ****  */
 479:./freertos/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:./freertos/src/tasks.c **** 
 481:./freertos/src/tasks.c **** /*
 482:./freertos/src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:./freertos/src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:./freertos/src/tasks.c ****  * a suspended list, etc.).
 485:./freertos/src/tasks.c ****  *
 486:./freertos/src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:./freertos/src/tasks.c ****  * NORMAL APPLICATION CODE.
 488:./freertos/src/tasks.c ****  */
 489:./freertos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:./freertos/src/tasks.c **** 
 491:./freertos/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:./freertos/src/tasks.c **** 
 493:./freertos/src/tasks.c **** #endif
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 12


 494:./freertos/src/tasks.c **** 
 495:./freertos/src/tasks.c **** /*
 496:./freertos/src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:./freertos/src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:./freertos/src/tasks.c ****  */
 499:./freertos/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:./freertos/src/tasks.c **** 
 501:./freertos/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:./freertos/src/tasks.c **** 
 503:./freertos/src/tasks.c **** #endif
 504:./freertos/src/tasks.c **** 
 505:./freertos/src/tasks.c **** /*
 506:./freertos/src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:./freertos/src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:./freertos/src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:./freertos/src/tasks.c ****  */
 510:./freertos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:./freertos/src/tasks.c **** 
 512:./freertos/src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:./freertos/src/tasks.c **** 
 514:./freertos/src/tasks.c **** #endif
 515:./freertos/src/tasks.c **** 
 516:./freertos/src/tasks.c **** /*
 517:./freertos/src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:./freertos/src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:./freertos/src/tasks.c ****  *
 520:./freertos/src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:./freertos/src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:./freertos/src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:./freertos/src/tasks.c ****  * set to a value other than 1.
 524:./freertos/src/tasks.c ****  */
 525:./freertos/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:./freertos/src/tasks.c **** 
 527:./freertos/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:./freertos/src/tasks.c **** 
 529:./freertos/src/tasks.c **** #endif
 530:./freertos/src/tasks.c **** 
 531:./freertos/src/tasks.c **** /*
 532:./freertos/src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:./freertos/src/tasks.c ****  * will exit the Blocked state.
 534:./freertos/src/tasks.c ****  */
 535:./freertos/src/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:./freertos/src/tasks.c **** 
 537:./freertos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:./freertos/src/tasks.c **** 
 539:./freertos/src/tasks.c **** 	/*
 540:./freertos/src/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:./freertos/src/tasks.c **** 	 * human readable tables of task information.
 542:./freertos/src/tasks.c **** 	 */
 543:./freertos/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:./freertos/src/tasks.c **** 
 545:./freertos/src/tasks.c **** #endif
 546:./freertos/src/tasks.c **** 
 547:./freertos/src/tasks.c **** /*
 548:./freertos/src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:./freertos/src/tasks.c ****  * dynamically to fill in the structure's members.
 550:./freertos/src/tasks.c ****  */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 13


 551:./freertos/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:./freertos/src/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:./freertos/src/tasks.c **** 									const uint32_t ulStackDepth,
 554:./freertos/src/tasks.c **** 									void * const pvParameters,
 555:./freertos/src/tasks.c **** 									UBaseType_t uxPriority,
 556:./freertos/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:./freertos/src/tasks.c **** 									TCB_t *pxNewTCB,
 558:./freertos/src/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:./freertos/src/tasks.c **** 
 560:./freertos/src/tasks.c **** /*
 561:./freertos/src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:./freertos/src/tasks.c ****  * under the control of the scheduler.
 563:./freertos/src/tasks.c ****  */
 564:./freertos/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:./freertos/src/tasks.c **** 
 566:./freertos/src/tasks.c **** /*
 567:./freertos/src/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:./freertos/src/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:./freertos/src/tasks.c ****  * called by the function.
 570:./freertos/src/tasks.c ****  */
 571:./freertos/src/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:./freertos/src/tasks.c **** 
 573:./freertos/src/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:./freertos/src/tasks.c **** 
 575:./freertos/src/tasks.c **** #endif
 576:./freertos/src/tasks.c **** 
 577:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 578:./freertos/src/tasks.c **** 
 579:./freertos/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:./freertos/src/tasks.c **** 
 581:./freertos/src/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:./freertos/src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:./freertos/src/tasks.c **** 									const uint32_t ulStackDepth,
 584:./freertos/src/tasks.c **** 									void * const pvParameters,
 585:./freertos/src/tasks.c **** 									UBaseType_t uxPriority,
 586:./freertos/src/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:./freertos/src/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:./freertos/src/tasks.c **** 	{
 589:./freertos/src/tasks.c **** 	TCB_t *pxNewTCB;
 590:./freertos/src/tasks.c **** 	TaskHandle_t xReturn;
 591:./freertos/src/tasks.c **** 
 592:./freertos/src/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:./freertos/src/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:./freertos/src/tasks.c **** 
 595:./freertos/src/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:./freertos/src/tasks.c **** 		{
 597:./freertos/src/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:./freertos/src/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:./freertos/src/tasks.c **** 			structure. */
 600:./freertos/src/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:./freertos/src/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:./freertos/src/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:./freertos/src/tasks.c **** 		}
 604:./freertos/src/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:./freertos/src/tasks.c **** 
 606:./freertos/src/tasks.c **** 
 607:./freertos/src/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 14


 608:./freertos/src/tasks.c **** 		{
 609:./freertos/src/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:./freertos/src/tasks.c **** 			function - use them. */
 611:./freertos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:./freertos/src/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:./freertos/src/tasks.c **** 
 614:./freertos/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:./freertos/src/tasks.c **** 			{
 616:./freertos/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:./freertos/src/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:./freertos/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:./freertos/src/tasks.c **** 			}
 620:./freertos/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:./freertos/src/tasks.c **** 
 622:./freertos/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:./freertos/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:./freertos/src/tasks.c **** 		}
 625:./freertos/src/tasks.c **** 		else
 626:./freertos/src/tasks.c **** 		{
 627:./freertos/src/tasks.c **** 			xReturn = NULL;
 628:./freertos/src/tasks.c **** 		}
 629:./freertos/src/tasks.c **** 
 630:./freertos/src/tasks.c **** 		return xReturn;
 631:./freertos/src/tasks.c **** 	}
 632:./freertos/src/tasks.c **** 
 633:./freertos/src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 635:./freertos/src/tasks.c **** 
 636:./freertos/src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:./freertos/src/tasks.c **** 
 638:./freertos/src/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:./freertos/src/tasks.c **** 	{
 640:./freertos/src/tasks.c **** 	TCB_t *pxNewTCB;
 641:./freertos/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:./freertos/src/tasks.c **** 
 643:./freertos/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:./freertos/src/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:./freertos/src/tasks.c **** 
 646:./freertos/src/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:./freertos/src/tasks.c **** 		{
 648:./freertos/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:./freertos/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:./freertos/src/tasks.c **** 			not static allocation is being used. */
 651:./freertos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:./freertos/src/tasks.c **** 
 653:./freertos/src/tasks.c **** 			/* Store the stack location in the TCB. */
 654:./freertos/src/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:./freertos/src/tasks.c **** 
 656:./freertos/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:./freertos/src/tasks.c **** 			{
 658:./freertos/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:./freertos/src/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:./freertos/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:./freertos/src/tasks.c **** 			}
 662:./freertos/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:./freertos/src/tasks.c **** 
 664:./freertos/src/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 15


 665:./freertos/src/tasks.c **** 									pxTaskDefinition->pcName,
 666:./freertos/src/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:./freertos/src/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:./freertos/src/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:./freertos/src/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:./freertos/src/tasks.c **** 									pxTaskDefinition->xRegions );
 671:./freertos/src/tasks.c **** 
 672:./freertos/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:./freertos/src/tasks.c **** 			xReturn = pdPASS;
 674:./freertos/src/tasks.c **** 		}
 675:./freertos/src/tasks.c **** 
 676:./freertos/src/tasks.c **** 		return xReturn;
 677:./freertos/src/tasks.c **** 	}
 678:./freertos/src/tasks.c **** 
 679:./freertos/src/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 681:./freertos/src/tasks.c **** 
 682:./freertos/src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:./freertos/src/tasks.c **** 
 684:./freertos/src/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:./freertos/src/tasks.c **** 	{
 686:./freertos/src/tasks.c **** 	TCB_t *pxNewTCB;
 687:./freertos/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:./freertos/src/tasks.c **** 
 689:./freertos/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:./freertos/src/tasks.c **** 
 691:./freertos/src/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:./freertos/src/tasks.c **** 		{
 693:./freertos/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:./freertos/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:./freertos/src/tasks.c **** 			not static allocation is being used. */
 696:./freertos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:./freertos/src/tasks.c **** 
 698:./freertos/src/tasks.c **** 			if( pxNewTCB != NULL )
 699:./freertos/src/tasks.c **** 			{
 700:./freertos/src/tasks.c **** 				/* Store the stack location in the TCB. */
 701:./freertos/src/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:./freertos/src/tasks.c **** 
 703:./freertos/src/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:./freertos/src/tasks.c **** 				{
 705:./freertos/src/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:./freertos/src/tasks.c **** 					this task had a statically allocated stack in case it is
 707:./freertos/src/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:./freertos/src/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:./freertos/src/tasks.c **** 				}
 710:./freertos/src/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:./freertos/src/tasks.c **** 
 712:./freertos/src/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:./freertos/src/tasks.c **** 										pxTaskDefinition->pcName,
 714:./freertos/src/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:./freertos/src/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:./freertos/src/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:./freertos/src/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:./freertos/src/tasks.c **** 										pxTaskDefinition->xRegions );
 719:./freertos/src/tasks.c **** 
 720:./freertos/src/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:./freertos/src/tasks.c **** 				xReturn = pdPASS;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 16


 722:./freertos/src/tasks.c **** 			}
 723:./freertos/src/tasks.c **** 		}
 724:./freertos/src/tasks.c **** 
 725:./freertos/src/tasks.c **** 		return xReturn;
 726:./freertos/src/tasks.c **** 	}
 727:./freertos/src/tasks.c **** 
 728:./freertos/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 730:./freertos/src/tasks.c **** 
 731:./freertos/src/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:./freertos/src/tasks.c **** 
 733:./freertos/src/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:./freertos/src/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:./freertos/src/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:./freertos/src/tasks.c **** 							void * const pvParameters,
 737:./freertos/src/tasks.c **** 							UBaseType_t uxPriority,
 738:./freertos/src/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:./freertos/src/tasks.c **** 	{
 154              		.loc 1 739 2
 155              		.cfi_startproc
 156              		@ args = 8, pretend = 0, frame = 32
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158 0000 80B5     		push	{r7, lr}
 159              	.LCFI0:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 0002 8CB0     		sub	sp, sp, #48
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 56
 166 0004 04AF     		add	r7, sp, #16
 167              	.LCFI2:
 168              		.cfi_def_cfa 7, 40
 169 0006 F860     		str	r0, [r7, #12]
 170 0008 B960     		str	r1, [r7, #8]
 171 000a 3B60     		str	r3, [r7]
 172 000c 1346     		mov	r3, r2	@ movhi
 173 000e FB80     		strh	r3, [r7, #6]	@ movhi
 174              	.LBB104:
 740:./freertos/src/tasks.c **** 	TCB_t *pxNewTCB;
 741:./freertos/src/tasks.c **** 	BaseType_t xReturn;
 742:./freertos/src/tasks.c **** 
 743:./freertos/src/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:./freertos/src/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:./freertos/src/tasks.c **** 		the TCB then the stack. */
 746:./freertos/src/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:./freertos/src/tasks.c **** 		{
 748:./freertos/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:./freertos/src/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:./freertos/src/tasks.c **** 			allocation is being used. */
 751:./freertos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:./freertos/src/tasks.c **** 
 753:./freertos/src/tasks.c **** 			if( pxNewTCB != NULL )
 754:./freertos/src/tasks.c **** 			{
 755:./freertos/src/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:./freertos/src/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:./freertos/src/tasks.c **** 				be deleted later if required. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 17


 758:./freertos/src/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:./freertos/src/tasks.c **** 
 760:./freertos/src/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:./freertos/src/tasks.c **** 				{
 762:./freertos/src/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:./freertos/src/tasks.c **** 					vPortFree( pxNewTCB );
 764:./freertos/src/tasks.c **** 					pxNewTCB = NULL;
 765:./freertos/src/tasks.c **** 				}
 766:./freertos/src/tasks.c **** 			}
 767:./freertos/src/tasks.c **** 		}
 768:./freertos/src/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:./freertos/src/tasks.c **** 		{
 770:./freertos/src/tasks.c **** 		StackType_t *pxStack;
 771:./freertos/src/tasks.c **** 
 772:./freertos/src/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:./freertos/src/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 175              		.loc 1 773 32
 176 0010 FB88     		ldrh	r3, [r7, #6]
 177              		.loc 1 773 14
 178 0012 9B00     		lsls	r3, r3, #2
 179 0014 1846     		mov	r0, r3
 180 0016 FFF7FEFF 		bl	pvPortMalloc
 181 001a 7861     		str	r0, [r7, #20]
 774:./freertos/src/tasks.c **** 
 775:./freertos/src/tasks.c **** 			if( pxStack != NULL )
 182              		.loc 1 775 6
 183 001c 7B69     		ldr	r3, [r7, #20]
 184 001e 002B     		cmp	r3, #0
 185 0020 0ED0     		beq	.L2
 776:./freertos/src/tasks.c **** 			{
 777:./freertos/src/tasks.c **** 				/* Allocate space for the TCB. */
 778:./freertos/src/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 186              		.loc 1 778 28
 187 0022 5C20     		movs	r0, #92
 188 0024 FFF7FEFF 		bl	pvPortMalloc
 189 0028 F861     		str	r0, [r7, #28]
 779:./freertos/src/tasks.c **** 
 780:./freertos/src/tasks.c **** 				if( pxNewTCB != NULL )
 190              		.loc 1 780 7
 191 002a FB69     		ldr	r3, [r7, #28]
 192 002c 002B     		cmp	r3, #0
 193 002e 03D0     		beq	.L3
 781:./freertos/src/tasks.c **** 				{
 782:./freertos/src/tasks.c **** 					/* Store the stack location in the TCB. */
 783:./freertos/src/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              		.loc 1 783 24
 195 0030 FB69     		ldr	r3, [r7, #28]
 196 0032 7A69     		ldr	r2, [r7, #20]
 197 0034 1A63     		str	r2, [r3, #48]
 198 0036 05E0     		b	.L4
 199              	.L3:
 784:./freertos/src/tasks.c **** 				}
 785:./freertos/src/tasks.c **** 				else
 786:./freertos/src/tasks.c **** 				{
 787:./freertos/src/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:./freertos/src/tasks.c **** 					it again. */
 789:./freertos/src/tasks.c **** 					vPortFree( pxStack );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 18


 200              		.loc 1 789 6
 201 0038 7869     		ldr	r0, [r7, #20]
 202 003a FFF7FEFF 		bl	vPortFree
 203 003e 01E0     		b	.L4
 204              	.L2:
 790:./freertos/src/tasks.c **** 				}
 791:./freertos/src/tasks.c **** 			}
 792:./freertos/src/tasks.c **** 			else
 793:./freertos/src/tasks.c **** 			{
 794:./freertos/src/tasks.c **** 				pxNewTCB = NULL;
 205              		.loc 1 794 14
 206 0040 0023     		movs	r3, #0
 207 0042 FB61     		str	r3, [r7, #28]
 208              	.L4:
 209              	.LBE104:
 795:./freertos/src/tasks.c **** 			}
 796:./freertos/src/tasks.c **** 		}
 797:./freertos/src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:./freertos/src/tasks.c **** 
 799:./freertos/src/tasks.c **** 		if( pxNewTCB != NULL )
 210              		.loc 1 799 5
 211 0044 FB69     		ldr	r3, [r7, #28]
 212 0046 002B     		cmp	r3, #0
 213 0048 13D0     		beq	.L5
 800:./freertos/src/tasks.c **** 		{
 801:./freertos/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:./freertos/src/tasks.c **** 			{
 803:./freertos/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:./freertos/src/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:./freertos/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:./freertos/src/tasks.c **** 			}
 807:./freertos/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:./freertos/src/tasks.c **** 
 809:./freertos/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              		.loc 1 809 4
 215 004a FA88     		ldrh	r2, [r7, #6]
 216 004c 0023     		movs	r3, #0
 217 004e 0393     		str	r3, [sp, #12]
 218 0050 FB69     		ldr	r3, [r7, #28]
 219 0052 0293     		str	r3, [sp, #8]
 220 0054 FB6A     		ldr	r3, [r7, #44]
 221 0056 0193     		str	r3, [sp, #4]
 222 0058 BB6A     		ldr	r3, [r7, #40]
 223 005a 0093     		str	r3, [sp]
 224 005c 3B68     		ldr	r3, [r7]
 225 005e B968     		ldr	r1, [r7, #8]
 226 0060 F868     		ldr	r0, [r7, #12]
 227 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 810:./freertos/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              		.loc 1 810 4
 229 0066 F869     		ldr	r0, [r7, #28]
 230 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:./freertos/src/tasks.c **** 			xReturn = pdPASS;
 231              		.loc 1 811 12
 232 006c 0123     		movs	r3, #1
 233 006e BB61     		str	r3, [r7, #24]
 234 0070 02E0     		b	.L6
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 19


 235              	.L5:
 812:./freertos/src/tasks.c **** 		}
 813:./freertos/src/tasks.c **** 		else
 814:./freertos/src/tasks.c **** 		{
 815:./freertos/src/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              		.loc 1 815 12
 237 0072 4FF0FF33 		mov	r3, #-1
 238 0076 BB61     		str	r3, [r7, #24]
 239              	.L6:
 816:./freertos/src/tasks.c **** 		}
 817:./freertos/src/tasks.c **** 
 818:./freertos/src/tasks.c **** 		return xReturn;
 240              		.loc 1 818 10
 241 0078 BB69     		ldr	r3, [r7, #24]
 819:./freertos/src/tasks.c **** 	}
 242              		.loc 1 819 2
 243 007a 1846     		mov	r0, r3
 244 007c 2037     		adds	r7, r7, #32
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 8
 247 007e BD46     		mov	sp, r7
 248              	.LCFI4:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0080 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE61:
 255              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 256              		.align	1
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	prvInitialiseNewTask:
 262              	.LFB62:
 820:./freertos/src/tasks.c **** 
 821:./freertos/src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
 823:./freertos/src/tasks.c **** 
 824:./freertos/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:./freertos/src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:./freertos/src/tasks.c **** 									const uint32_t ulStackDepth,
 827:./freertos/src/tasks.c **** 									void * const pvParameters,
 828:./freertos/src/tasks.c **** 									UBaseType_t uxPriority,
 829:./freertos/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:./freertos/src/tasks.c **** 									TCB_t *pxNewTCB,
 831:./freertos/src/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:./freertos/src/tasks.c **** {
 263              		.loc 1 832 1
 264              		.cfi_startproc
 265              		@ args = 16, pretend = 0, frame = 32
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI5:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 20


 273              	.LCFI6:
 274              		.cfi_def_cfa_offset 40
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI7:
 277              		.cfi_def_cfa_register 7
 278 0006 F860     		str	r0, [r7, #12]
 279 0008 B960     		str	r1, [r7, #8]
 280 000a 7A60     		str	r2, [r7, #4]
 281 000c 3B60     		str	r3, [r7]
 833:./freertos/src/tasks.c **** StackType_t *pxTopOfStack;
 834:./freertos/src/tasks.c **** UBaseType_t x;
 835:./freertos/src/tasks.c **** 
 836:./freertos/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:./freertos/src/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:./freertos/src/tasks.c **** 		BaseType_t xRunPrivileged;
 839:./freertos/src/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:./freertos/src/tasks.c **** 		{
 841:./freertos/src/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:./freertos/src/tasks.c **** 		}
 843:./freertos/src/tasks.c **** 		else
 844:./freertos/src/tasks.c **** 		{
 845:./freertos/src/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:./freertos/src/tasks.c **** 		}
 847:./freertos/src/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:./freertos/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:./freertos/src/tasks.c **** 
 850:./freertos/src/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:./freertos/src/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:./freertos/src/tasks.c **** 	{
 853:./freertos/src/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:./freertos/src/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 282              		.loc 1 854 28
 283 000e 3B6B     		ldr	r3, [r7, #48]
 284 0010 186B     		ldr	r0, [r3, #48]
 285              		.loc 1 854 12
 286 0012 7B68     		ldr	r3, [r7, #4]
 287 0014 9B00     		lsls	r3, r3, #2
 288 0016 1A46     		mov	r2, r3
 289 0018 A521     		movs	r1, #165
 290 001a FFF7FEFF 		bl	memset
 855:./freertos/src/tasks.c **** 	}
 856:./freertos/src/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:./freertos/src/tasks.c **** 
 858:./freertos/src/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:./freertos/src/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:./freertos/src/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:./freertos/src/tasks.c **** 	by the port. */
 862:./freertos/src/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:./freertos/src/tasks.c **** 	{
 864:./freertos/src/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 291              		.loc 1 864 29
 292 001e 3B6B     		ldr	r3, [r7, #48]
 293 0020 1A6B     		ldr	r2, [r3, #48]
 294              		.loc 1 864 38
 295 0022 7B68     		ldr	r3, [r7, #4]
 296 0024 03F18043 		add	r3, r3, #1073741824
 297 0028 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 21


 298 002a 9B00     		lsls	r3, r3, #2
 299              		.loc 1 864 16
 300 002c 1344     		add	r3, r3, r2
 301 002e BB61     		str	r3, [r7, #24]
 865:./freertos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 302              		.loc 1 865 40
 303 0030 BB69     		ldr	r3, [r7, #24]
 304              		.loc 1 865 81
 305 0032 23F00703 		bic	r3, r3, #7
 306              		.loc 1 865 16
 307 0036 BB61     		str	r3, [r7, #24]
 866:./freertos/src/tasks.c **** 
 867:./freertos/src/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:./freertos/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 308              		.loc 1 868 3
 309 0038 BB69     		ldr	r3, [r7, #24]
 310 003a 03F00703 		and	r3, r3, #7
 311 003e 002B     		cmp	r3, #0
 312 0040 0BD0     		beq	.L9
 313              	.LBB105:
 314              	.LBB106:
 315              		.file 2 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h"
   1:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  28:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  29:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  32:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 22


  36:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  46:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  55:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  59:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  66:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  72:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  78:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
  89:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  90:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 23


  93:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  96:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 106:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 108:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 115:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 122:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 127:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 129:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 134:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 138:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 143:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 147:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 149:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 24


 150:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 151:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 153:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 155:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 160:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 163:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 165:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 169:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 171:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 173:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 176:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 179:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	{
 181:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
 183:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	else
 184:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	{
 185:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
 187:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 188:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 189:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 190:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 191:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 193:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 195:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 316              		.loc 2 197 2
 317              		.syntax unified
 318              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 319 0042 4FF05003 			mov r3, #80												
 320 0046 83F31188 		msr basepri, r3											
 321 004a BFF36F8F 		isb														
 322 004e BFF34F8F 		dsb														
 323              	
 324              	@ 0 "" 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 25


 325              		.thumb
 326              		.syntax unified
 327 0052 7B61     		str	r3, [r7, #20]
 198:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 199:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	);
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 328              		.loc 2 205 1
 329 0054 00BF     		nop
 330              	.L10:
 331              	.LBE106:
 332              	.LBE105:
 333              		.loc 1 868 3
 334 0056 00BF     		nop
 335 0058 FDE7     		b	.L10
 336              	.L9:
 869:./freertos/src/tasks.c **** 
 870:./freertos/src/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:./freertos/src/tasks.c **** 		{
 872:./freertos/src/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:./freertos/src/tasks.c **** 			debugging. */
 874:./freertos/src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:./freertos/src/tasks.c **** 		}
 876:./freertos/src/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:./freertos/src/tasks.c **** 	}
 878:./freertos/src/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:./freertos/src/tasks.c **** 	{
 880:./freertos/src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:./freertos/src/tasks.c **** 
 882:./freertos/src/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:./freertos/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:./freertos/src/tasks.c **** 
 885:./freertos/src/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:./freertos/src/tasks.c **** 		performed. */
 887:./freertos/src/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:./freertos/src/tasks.c **** 	}
 889:./freertos/src/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:./freertos/src/tasks.c **** 
 891:./freertos/src/tasks.c **** 	/* Store the task name in the TCB. */
 892:./freertos/src/tasks.c **** 	if( pcName != NULL )
 337              		.loc 1 892 4
 338 005a BB68     		ldr	r3, [r7, #8]
 339 005c 002B     		cmp	r3, #0
 340 005e 1FD0     		beq	.L11
 893:./freertos/src/tasks.c **** 	{
 894:./freertos/src/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 341              		.loc 1 894 10
 342 0060 0023     		movs	r3, #0
 343 0062 FB61     		str	r3, [r7, #28]
 344              		.loc 1 894 3
 345 0064 12E0     		b	.L12
 346              	.L15:
 895:./freertos/src/tasks.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 26


 896:./freertos/src/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 347              		.loc 1 896 38
 348 0066 BA68     		ldr	r2, [r7, #8]
 349 0068 FB69     		ldr	r3, [r7, #28]
 350 006a 1344     		add	r3, r3, r2
 351 006c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 352              		.loc 1 896 30
 353 006e 3A6B     		ldr	r2, [r7, #48]
 354 0070 FB69     		ldr	r3, [r7, #28]
 355 0072 1344     		add	r3, r3, r2
 356 0074 3433     		adds	r3, r3, #52
 357 0076 0A46     		mov	r2, r1
 358 0078 1A70     		strb	r2, [r3]
 897:./freertos/src/tasks.c **** 
 898:./freertos/src/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:./freertos/src/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:./freertos/src/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:./freertos/src/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 359              		.loc 1 901 14
 360 007a BA68     		ldr	r2, [r7, #8]
 361 007c FB69     		ldr	r3, [r7, #28]
 362 007e 1344     		add	r3, r3, r2
 363 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364              		.loc 1 901 6
 365 0082 002B     		cmp	r3, #0
 366 0084 06D0     		beq	.L19
 894:./freertos/src/tasks.c **** 		{
 367              		.loc 1 894 77 discriminator 2
 368 0086 FB69     		ldr	r3, [r7, #28]
 369 0088 0133     		adds	r3, r3, #1
 370 008a FB61     		str	r3, [r7, #28]
 371              	.L12:
 894:./freertos/src/tasks.c **** 		{
 372              		.loc 1 894 33 discriminator 1
 373 008c FB69     		ldr	r3, [r7, #28]
 374 008e 0F2B     		cmp	r3, #15
 375 0090 E9D9     		bls	.L15
 376 0092 00E0     		b	.L14
 377              	.L19:
 902:./freertos/src/tasks.c **** 			{
 903:./freertos/src/tasks.c **** 				break;
 378              		.loc 1 903 5
 379 0094 00BF     		nop
 380              	.L14:
 904:./freertos/src/tasks.c **** 			}
 905:./freertos/src/tasks.c **** 			else
 906:./freertos/src/tasks.c **** 			{
 907:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:./freertos/src/tasks.c **** 			}
 909:./freertos/src/tasks.c **** 		}
 910:./freertos/src/tasks.c **** 
 911:./freertos/src/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:./freertos/src/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:./freertos/src/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 381              		.loc 1 913 55
 382 0096 3B6B     		ldr	r3, [r7, #48]
 383 0098 0022     		movs	r2, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 27


 384 009a 83F84320 		strb	r2, [r3, #67]
 385 009e 03E0     		b	.L16
 386              	.L11:
 914:./freertos/src/tasks.c **** 	}
 915:./freertos/src/tasks.c **** 	else
 916:./freertos/src/tasks.c **** 	{
 917:./freertos/src/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:./freertos/src/tasks.c **** 		terminator when it is read out. */
 919:./freertos/src/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 387              		.loc 1 919 29
 388 00a0 3B6B     		ldr	r3, [r7, #48]
 389 00a2 0022     		movs	r2, #0
 390 00a4 83F83420 		strb	r2, [r3, #52]
 391              	.L16:
 920:./freertos/src/tasks.c **** 	}
 921:./freertos/src/tasks.c **** 
 922:./freertos/src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:./freertos/src/tasks.c **** 	remove the privilege bit if one is present. */
 924:./freertos/src/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 392              		.loc 1 924 4
 393 00a8 BB6A     		ldr	r3, [r7, #40]
 394 00aa 042B     		cmp	r3, #4
 395 00ac 01D9     		bls	.L17
 925:./freertos/src/tasks.c **** 	{
 926:./freertos/src/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 396              		.loc 1 926 14
 397 00ae 0423     		movs	r3, #4
 398 00b0 BB62     		str	r3, [r7, #40]
 399              	.L17:
 927:./freertos/src/tasks.c **** 	}
 928:./freertos/src/tasks.c **** 	else
 929:./freertos/src/tasks.c **** 	{
 930:./freertos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:./freertos/src/tasks.c **** 	}
 932:./freertos/src/tasks.c **** 
 933:./freertos/src/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 400              		.loc 1 933 23
 401 00b2 3B6B     		ldr	r3, [r7, #48]
 402 00b4 BA6A     		ldr	r2, [r7, #40]
 403 00b6 DA62     		str	r2, [r3, #44]
 934:./freertos/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:./freertos/src/tasks.c **** 	{
 936:./freertos/src/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 404              		.loc 1 936 28
 405 00b8 3B6B     		ldr	r3, [r7, #48]
 406 00ba BA6A     		ldr	r2, [r7, #40]
 407 00bc DA64     		str	r2, [r3, #76]
 937:./freertos/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 408              		.loc 1 937 27
 409 00be 3B6B     		ldr	r3, [r7, #48]
 410 00c0 0022     		movs	r2, #0
 411 00c2 1A65     		str	r2, [r3, #80]
 938:./freertos/src/tasks.c **** 	}
 939:./freertos/src/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:./freertos/src/tasks.c **** 
 941:./freertos/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 412              		.loc 1 941 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 28


 413 00c4 3B6B     		ldr	r3, [r7, #48]
 414 00c6 0433     		adds	r3, r3, #4
 415 00c8 1846     		mov	r0, r3
 416 00ca FFF7FEFF 		bl	vListInitialiseItem
 942:./freertos/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 417              		.loc 1 942 2
 418 00ce 3B6B     		ldr	r3, [r7, #48]
 419 00d0 1833     		adds	r3, r3, #24
 420 00d2 1846     		mov	r0, r3
 421 00d4 FFF7FEFF 		bl	vListInitialiseItem
 943:./freertos/src/tasks.c **** 
 944:./freertos/src/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:./freertos/src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:./freertos/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 422              		.loc 1 946 2
 423 00d8 3B6B     		ldr	r3, [r7, #48]
 424 00da 3A6B     		ldr	r2, [r7, #48]
 425 00dc 1A61     		str	r2, [r3, #16]
 947:./freertos/src/tasks.c **** 
 948:./freertos/src/tasks.c **** 	/* Event lists are always in priority order. */
 949:./freertos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 426              		.loc 1 949 2
 427 00de BB6A     		ldr	r3, [r7, #40]
 428 00e0 C3F10502 		rsb	r2, r3, #5
 429 00e4 3B6B     		ldr	r3, [r7, #48]
 430 00e6 9A61     		str	r2, [r3, #24]
 950:./freertos/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 431              		.loc 1 950 2
 432 00e8 3B6B     		ldr	r3, [r7, #48]
 433 00ea 3A6B     		ldr	r2, [r7, #48]
 434 00ec 5A62     		str	r2, [r3, #36]
 951:./freertos/src/tasks.c **** 
 952:./freertos/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:./freertos/src/tasks.c **** 	{
 954:./freertos/src/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:./freertos/src/tasks.c **** 	}
 956:./freertos/src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:./freertos/src/tasks.c **** 
 958:./freertos/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:./freertos/src/tasks.c **** 	{
 960:./freertos/src/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:./freertos/src/tasks.c **** 	}
 962:./freertos/src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:./freertos/src/tasks.c **** 
 964:./freertos/src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:./freertos/src/tasks.c **** 	{
 966:./freertos/src/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:./freertos/src/tasks.c **** 	}
 968:./freertos/src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:./freertos/src/tasks.c **** 
 970:./freertos/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:./freertos/src/tasks.c **** 	{
 972:./freertos/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:./freertos/src/tasks.c **** 	}
 974:./freertos/src/tasks.c **** 	#else
 975:./freertos/src/tasks.c **** 	{
 976:./freertos/src/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 29


 977:./freertos/src/tasks.c **** 		( void ) xRegions;
 978:./freertos/src/tasks.c **** 	}
 979:./freertos/src/tasks.c **** 	#endif
 980:./freertos/src/tasks.c **** 
 981:./freertos/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:./freertos/src/tasks.c **** 	{
 983:./freertos/src/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:./freertos/src/tasks.c **** 		{
 985:./freertos/src/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:./freertos/src/tasks.c **** 		}
 987:./freertos/src/tasks.c **** 	}
 988:./freertos/src/tasks.c **** 	#endif
 989:./freertos/src/tasks.c **** 
 990:./freertos/src/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:./freertos/src/tasks.c **** 	{
 992:./freertos/src/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 435              		.loc 1 992 29
 436 00ee 3B6B     		ldr	r3, [r7, #48]
 437 00f0 0022     		movs	r2, #0
 438 00f2 5A65     		str	r2, [r3, #84]
 993:./freertos/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 439              		.loc 1 993 27
 440 00f4 3B6B     		ldr	r3, [r7, #48]
 441 00f6 0022     		movs	r2, #0
 442 00f8 83F85820 		strb	r2, [r3, #88]
 994:./freertos/src/tasks.c **** 	}
 995:./freertos/src/tasks.c **** 	#endif
 996:./freertos/src/tasks.c **** 
 997:./freertos/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:./freertos/src/tasks.c **** 	{
 999:./freertos/src/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:./freertos/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:./freertos/src/tasks.c **** 		for additional information. */
1002:./freertos/src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:./freertos/src/tasks.c **** 	}
1004:./freertos/src/tasks.c **** 	#endif
1005:./freertos/src/tasks.c **** 
1006:./freertos/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:./freertos/src/tasks.c **** 	{
1008:./freertos/src/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:./freertos/src/tasks.c **** 	}
1010:./freertos/src/tasks.c **** 	#endif
1011:./freertos/src/tasks.c **** 
1012:./freertos/src/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:./freertos/src/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:./freertos/src/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:./freertos/src/tasks.c **** 	the top of stack variable is updated. */
1016:./freertos/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:./freertos/src/tasks.c **** 	{
1018:./freertos/src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:./freertos/src/tasks.c **** 		pass the stack end address to the stack initialization
1020:./freertos/src/tasks.c **** 		function as well. */
1021:./freertos/src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:./freertos/src/tasks.c **** 		{
1023:./freertos/src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:./freertos/src/tasks.c **** 			{
1025:./freertos/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 30


1026:./freertos/src/tasks.c **** 			}
1027:./freertos/src/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:./freertos/src/tasks.c **** 			{
1029:./freertos/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:./freertos/src/tasks.c **** 			}
1031:./freertos/src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:./freertos/src/tasks.c **** 		}
1033:./freertos/src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:./freertos/src/tasks.c **** 		{
1035:./freertos/src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:./freertos/src/tasks.c **** 		}
1037:./freertos/src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:./freertos/src/tasks.c **** 	}
1039:./freertos/src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:./freertos/src/tasks.c **** 	{
1041:./freertos/src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:./freertos/src/tasks.c **** 		pass the stack end address to the stack initialization
1043:./freertos/src/tasks.c **** 		function as well. */
1044:./freertos/src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:./freertos/src/tasks.c **** 		{
1046:./freertos/src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:./freertos/src/tasks.c **** 			{
1048:./freertos/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:./freertos/src/tasks.c **** 			}
1050:./freertos/src/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:./freertos/src/tasks.c **** 			{
1052:./freertos/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:./freertos/src/tasks.c **** 			}
1054:./freertos/src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:./freertos/src/tasks.c **** 		}
1056:./freertos/src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:./freertos/src/tasks.c **** 		{
1058:./freertos/src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 443              		.loc 1 1058 29
 444 00fc 3A68     		ldr	r2, [r7]
 445 00fe F968     		ldr	r1, [r7, #12]
 446 0100 B869     		ldr	r0, [r7, #24]
 447 0102 FFF7FEFF 		bl	pxPortInitialiseStack
 448 0106 0246     		mov	r2, r0
 449              		.loc 1 1058 27 discriminator 1
 450 0108 3B6B     		ldr	r3, [r7, #48]
 451 010a 1A60     		str	r2, [r3]
1059:./freertos/src/tasks.c **** 		}
1060:./freertos/src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:./freertos/src/tasks.c **** 	}
1062:./freertos/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:./freertos/src/tasks.c **** 
1064:./freertos/src/tasks.c **** 	if( pxCreatedTask != NULL )
 452              		.loc 1 1064 4
 453 010c FB6A     		ldr	r3, [r7, #44]
 454 010e 002B     		cmp	r3, #0
 455 0110 02D0     		beq	.L20
1065:./freertos/src/tasks.c **** 	{
1066:./freertos/src/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:./freertos/src/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:./freertos/src/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 456              		.loc 1 1068 18
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 31


 457 0112 FB6A     		ldr	r3, [r7, #44]
 458 0114 3A6B     		ldr	r2, [r7, #48]
 459 0116 1A60     		str	r2, [r3]
 460              	.L20:
1069:./freertos/src/tasks.c **** 	}
1070:./freertos/src/tasks.c **** 	else
1071:./freertos/src/tasks.c **** 	{
1072:./freertos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:./freertos/src/tasks.c **** 	}
1074:./freertos/src/tasks.c **** }
 461              		.loc 1 1074 1
 462 0118 00BF     		nop
 463 011a 2037     		adds	r7, r7, #32
 464              	.LCFI8:
 465              		.cfi_def_cfa_offset 8
 466 011c BD46     		mov	sp, r7
 467              	.LCFI9:
 468              		.cfi_def_cfa_register 13
 469              		@ sp needed
 470 011e 80BD     		pop	{r7, pc}
 471              		.cfi_endproc
 472              	.LFE62:
 474              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 475              		.align	1
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 480              	prvAddNewTaskToReadyList:
 481              	.LFB63:
1075:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1076:./freertos/src/tasks.c **** 
1077:./freertos/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:./freertos/src/tasks.c **** {
 482              		.loc 1 1078 1
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 8
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486 0000 80B5     		push	{r7, lr}
 487              	.LCFI10:
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 82B0     		sub	sp, sp, #8
 492              	.LCFI11:
 493              		.cfi_def_cfa_offset 16
 494 0004 00AF     		add	r7, sp, #0
 495              	.LCFI12:
 496              		.cfi_def_cfa_register 7
 497 0006 7860     		str	r0, [r7, #4]
1079:./freertos/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:./freertos/src/tasks.c **** 	updated. */
1081:./freertos/src/tasks.c **** 	taskENTER_CRITICAL();
 498              		.loc 1 1081 2
 499 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:./freertos/src/tasks.c **** 	{
1083:./freertos/src/tasks.c **** 		uxCurrentNumberOfTasks++;
 500              		.loc 1 1083 25
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 32


 501 000c 2C4B     		ldr	r3, .L26
 502 000e 1B68     		ldr	r3, [r3]
 503 0010 0133     		adds	r3, r3, #1
 504 0012 2B4A     		ldr	r2, .L26
 505 0014 1360     		str	r3, [r2]
1084:./freertos/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 506              		.loc 1 1084 20
 507 0016 2B4B     		ldr	r3, .L26+4
 508 0018 1B68     		ldr	r3, [r3]
 509              		.loc 1 1084 5
 510 001a 002B     		cmp	r3, #0
 511 001c 09D1     		bne	.L22
1085:./freertos/src/tasks.c **** 		{
1086:./freertos/src/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:./freertos/src/tasks.c **** 			the suspended state - make this the current task. */
1088:./freertos/src/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 512              		.loc 1 1088 17
 513 001e 294A     		ldr	r2, .L26+4
 514 0020 7B68     		ldr	r3, [r7, #4]
 515 0022 1360     		str	r3, [r2]
1089:./freertos/src/tasks.c **** 
1090:./freertos/src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 516              		.loc 1 1090 31
 517 0024 264B     		ldr	r3, .L26
 518 0026 1B68     		ldr	r3, [r3]
 519              		.loc 1 1090 6
 520 0028 012B     		cmp	r3, #1
 521 002a 10D1     		bne	.L23
1091:./freertos/src/tasks.c **** 			{
1092:./freertos/src/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:./freertos/src/tasks.c **** 				initialisation required.  We will not recover if this call
1094:./freertos/src/tasks.c **** 				fails, but we will report the failure. */
1095:./freertos/src/tasks.c **** 				prvInitialiseTaskLists();
 522              		.loc 1 1095 5
 523 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 524 0030 0DE0     		b	.L23
 525              	.L22:
1096:./freertos/src/tasks.c **** 			}
1097:./freertos/src/tasks.c **** 			else
1098:./freertos/src/tasks.c **** 			{
1099:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:./freertos/src/tasks.c **** 			}
1101:./freertos/src/tasks.c **** 		}
1102:./freertos/src/tasks.c **** 		else
1103:./freertos/src/tasks.c **** 		{
1104:./freertos/src/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:./freertos/src/tasks.c **** 			current task if it is the highest priority task to be created
1106:./freertos/src/tasks.c **** 			so far. */
1107:./freertos/src/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 526              		.loc 1 1107 26
 527 0032 254B     		ldr	r3, .L26+8
 528 0034 1B68     		ldr	r3, [r3]
 529              		.loc 1 1107 6
 530 0036 002B     		cmp	r3, #0
 531 0038 09D1     		bne	.L23
1108:./freertos/src/tasks.c **** 			{
1109:./freertos/src/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 33


 532              		.loc 1 1109 21
 533 003a 224B     		ldr	r3, .L26+4
 534 003c 1B68     		ldr	r3, [r3]
 535 003e DA6A     		ldr	r2, [r3, #44]
 536              		.loc 1 1109 45
 537 0040 7B68     		ldr	r3, [r7, #4]
 538 0042 DB6A     		ldr	r3, [r3, #44]
 539              		.loc 1 1109 7
 540 0044 9A42     		cmp	r2, r3
 541 0046 02D8     		bhi	.L23
1110:./freertos/src/tasks.c **** 				{
1111:./freertos/src/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 542              		.loc 1 1111 19
 543 0048 1E4A     		ldr	r2, .L26+4
 544 004a 7B68     		ldr	r3, [r7, #4]
 545 004c 1360     		str	r3, [r2]
 546              	.L23:
1112:./freertos/src/tasks.c **** 				}
1113:./freertos/src/tasks.c **** 				else
1114:./freertos/src/tasks.c **** 				{
1115:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:./freertos/src/tasks.c **** 				}
1117:./freertos/src/tasks.c **** 			}
1118:./freertos/src/tasks.c **** 			else
1119:./freertos/src/tasks.c **** 			{
1120:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:./freertos/src/tasks.c **** 			}
1122:./freertos/src/tasks.c **** 		}
1123:./freertos/src/tasks.c **** 
1124:./freertos/src/tasks.c **** 		uxTaskNumber++;
 547              		.loc 1 1124 15
 548 004e 1F4B     		ldr	r3, .L26+12
 549 0050 1B68     		ldr	r3, [r3]
 550 0052 0133     		adds	r3, r3, #1
 551 0054 1D4A     		ldr	r2, .L26+12
 552 0056 1360     		str	r3, [r2]
1125:./freertos/src/tasks.c **** 
1126:./freertos/src/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:./freertos/src/tasks.c **** 		{
1128:./freertos/src/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:./freertos/src/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 553              		.loc 1 1129 26
 554 0058 1C4B     		ldr	r3, .L26+12
 555 005a 1A68     		ldr	r2, [r3]
 556 005c 7B68     		ldr	r3, [r7, #4]
 557 005e 5A64     		str	r2, [r3, #68]
1130:./freertos/src/tasks.c **** 		}
1131:./freertos/src/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:./freertos/src/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:./freertos/src/tasks.c **** 
1134:./freertos/src/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 558              		.loc 1 1134 3
 559 0060 7B68     		ldr	r3, [r7, #4]
 560 0062 DB6A     		ldr	r3, [r3, #44]
 561 0064 0122     		movs	r2, #1
 562 0066 9A40     		lsls	r2, r2, r3
 563 0068 194B     		ldr	r3, .L26+16
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 34


 564 006a 1B68     		ldr	r3, [r3]
 565 006c 1343     		orrs	r3, r3, r2
 566 006e 184A     		ldr	r2, .L26+16
 567 0070 1360     		str	r3, [r2]
 568 0072 7B68     		ldr	r3, [r7, #4]
 569 0074 DA6A     		ldr	r2, [r3, #44]
 570 0076 1346     		mov	r3, r2
 571 0078 9B00     		lsls	r3, r3, #2
 572 007a 1344     		add	r3, r3, r2
 573 007c 9B00     		lsls	r3, r3, #2
 574 007e 154A     		ldr	r2, .L26+20
 575 0080 1A44     		add	r2, r2, r3
 576 0082 7B68     		ldr	r3, [r7, #4]
 577 0084 0433     		adds	r3, r3, #4
 578 0086 1946     		mov	r1, r3
 579 0088 1046     		mov	r0, r2
 580 008a FFF7FEFF 		bl	vListInsertEnd
1135:./freertos/src/tasks.c **** 
1136:./freertos/src/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:./freertos/src/tasks.c **** 	}
1138:./freertos/src/tasks.c **** 	taskEXIT_CRITICAL();
 581              		.loc 1 1138 2
 582 008e FFF7FEFF 		bl	vPortExitCritical
1139:./freertos/src/tasks.c **** 
1140:./freertos/src/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 583              		.loc 1 1140 24
 584 0092 0D4B     		ldr	r3, .L26+8
 585 0094 1B68     		ldr	r3, [r3]
 586              		.loc 1 1140 4
 587 0096 002B     		cmp	r3, #0
 588 0098 0ED0     		beq	.L25
1141:./freertos/src/tasks.c **** 	{
1142:./freertos/src/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:./freertos/src/tasks.c **** 		then it should run now. */
1144:./freertos/src/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 589              		.loc 1 1144 19
 590 009a 0A4B     		ldr	r3, .L26+4
 591 009c 1B68     		ldr	r3, [r3]
 592 009e DA6A     		ldr	r2, [r3, #44]
 593              		.loc 1 1144 42
 594 00a0 7B68     		ldr	r3, [r7, #4]
 595 00a2 DB6A     		ldr	r3, [r3, #44]
 596              		.loc 1 1144 5
 597 00a4 9A42     		cmp	r2, r3
 598 00a6 07D2     		bcs	.L25
1145:./freertos/src/tasks.c **** 		{
1146:./freertos/src/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 599              		.loc 1 1146 4
 600 00a8 0B4B     		ldr	r3, .L26+24
 601 00aa 4FF08052 		mov	r2, #268435456
 602 00ae 1A60     		str	r2, [r3]
 603              		.syntax unified
 604              	@ 1146 "./freertos/src/tasks.c" 1
 605 00b0 BFF34F8F 		dsb
 606              	@ 0 "" 2
 607              	@ 1146 "./freertos/src/tasks.c" 1
 608 00b4 BFF36F8F 		isb
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 35


 609              	@ 0 "" 2
 610              		.thumb
 611              		.syntax unified
 612              	.L25:
1147:./freertos/src/tasks.c **** 		}
1148:./freertos/src/tasks.c **** 		else
1149:./freertos/src/tasks.c **** 		{
1150:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:./freertos/src/tasks.c **** 		}
1152:./freertos/src/tasks.c **** 	}
1153:./freertos/src/tasks.c **** 	else
1154:./freertos/src/tasks.c **** 	{
1155:./freertos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:./freertos/src/tasks.c **** 	}
1157:./freertos/src/tasks.c **** }
 613              		.loc 1 1157 1
 614 00b8 00BF     		nop
 615 00ba 0837     		adds	r7, r7, #8
 616              	.LCFI13:
 617              		.cfi_def_cfa_offset 8
 618 00bc BD46     		mov	sp, r7
 619              	.LCFI14:
 620              		.cfi_def_cfa_register 13
 621              		@ sp needed
 622 00be 80BD     		pop	{r7, pc}
 623              	.L27:
 624              		.align	2
 625              	.L26:
 626 00c0 00000000 		.word	uxCurrentNumberOfTasks
 627 00c4 00000000 		.word	pxCurrentTCB
 628 00c8 00000000 		.word	xSchedulerRunning
 629 00cc 00000000 		.word	uxTaskNumber
 630 00d0 00000000 		.word	uxTopReadyPriority
 631 00d4 00000000 		.word	pxReadyTasksLists
 632 00d8 04ED00E0 		.word	-536810236
 633              		.cfi_endproc
 634              	.LFE63:
 636              		.section	.text.vTaskDelete,"ax",%progbits
 637              		.align	1
 638              		.global	vTaskDelete
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 643              	vTaskDelete:
 644              	.LFB64:
1158:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1159:./freertos/src/tasks.c **** 
1160:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:./freertos/src/tasks.c **** 
1162:./freertos/src/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:./freertos/src/tasks.c **** 	{
 645              		.loc 1 1163 2
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 16
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649 0000 80B5     		push	{r7, lr}
 650              	.LCFI15:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 36


 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 7, -8
 653              		.cfi_offset 14, -4
 654 0002 84B0     		sub	sp, sp, #16
 655              	.LCFI16:
 656              		.cfi_def_cfa_offset 24
 657 0004 00AF     		add	r7, sp, #0
 658              	.LCFI17:
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
1164:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
1165:./freertos/src/tasks.c **** 
1166:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 661              		.loc 1 1166 3
 662 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:./freertos/src/tasks.c **** 		{
1168:./freertos/src/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:./freertos/src/tasks.c **** 			being deleted. */
1170:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 663              		.loc 1 1170 12
 664 000c 7B68     		ldr	r3, [r7, #4]
 665 000e 002B     		cmp	r3, #0
 666 0010 02D1     		bne	.L29
 667              		.loc 1 1170 12 is_stmt 0 discriminator 1
 668 0012 394B     		ldr	r3, .L39
 669 0014 1B68     		ldr	r3, [r3]
 670 0016 00E0     		b	.L30
 671              	.L29:
 672              		.loc 1 1170 12 discriminator 2
 673 0018 7B68     		ldr	r3, [r7, #4]
 674              	.L30:
 675              		.loc 1 1170 10 is_stmt 1 discriminator 4
 676 001a FB60     		str	r3, [r7, #12]
1171:./freertos/src/tasks.c **** 
1172:./freertos/src/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:./freertos/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 677              		.loc 1 1173 8
 678 001c FB68     		ldr	r3, [r7, #12]
 679 001e 0433     		adds	r3, r3, #4
 680 0020 1846     		mov	r0, r3
 681 0022 FFF7FEFF 		bl	uxListRemove
 682 0026 0346     		mov	r3, r0
 683              		.loc 1 1173 6 discriminator 1
 684 0028 002B     		cmp	r3, #0
 685 002a 15D1     		bne	.L31
1174:./freertos/src/tasks.c **** 			{
1175:./freertos/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 686              		.loc 1 1175 5
 687 002c FB68     		ldr	r3, [r7, #12]
 688 002e DA6A     		ldr	r2, [r3, #44]
 689 0030 3249     		ldr	r1, .L39+4
 690 0032 1346     		mov	r3, r2
 691 0034 9B00     		lsls	r3, r3, #2
 692 0036 1344     		add	r3, r3, r2
 693 0038 9B00     		lsls	r3, r3, #2
 694 003a 0B44     		add	r3, r3, r1
 695 003c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 37


 696 003e 002B     		cmp	r3, #0
 697 0040 0AD1     		bne	.L31
 698              		.loc 1 1175 5 is_stmt 0 discriminator 1
 699 0042 FB68     		ldr	r3, [r7, #12]
 700 0044 DB6A     		ldr	r3, [r3, #44]
 701 0046 0122     		movs	r2, #1
 702 0048 02FA03F3 		lsl	r3, r2, r3
 703 004c DA43     		mvns	r2, r3
 704 004e 2C4B     		ldr	r3, .L39+8
 705 0050 1B68     		ldr	r3, [r3]
 706 0052 1340     		ands	r3, r3, r2
 707 0054 2A4A     		ldr	r2, .L39+8
 708 0056 1360     		str	r3, [r2]
 709              	.L31:
1176:./freertos/src/tasks.c **** 			}
1177:./freertos/src/tasks.c **** 			else
1178:./freertos/src/tasks.c **** 			{
1179:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:./freertos/src/tasks.c **** 			}
1181:./freertos/src/tasks.c **** 
1182:./freertos/src/tasks.c **** 			/* Is the task waiting on an event also? */
1183:./freertos/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 710              		.loc 1 1183 8 is_stmt 1
 711 0058 FB68     		ldr	r3, [r7, #12]
 712 005a 9B6A     		ldr	r3, [r3, #40]
 713              		.loc 1 1183 6
 714 005c 002B     		cmp	r3, #0
 715 005e 04D0     		beq	.L32
1184:./freertos/src/tasks.c **** 			{
1185:./freertos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 716              		.loc 1 1185 14
 717 0060 FB68     		ldr	r3, [r7, #12]
 718 0062 1833     		adds	r3, r3, #24
 719 0064 1846     		mov	r0, r3
 720 0066 FFF7FEFF 		bl	uxListRemove
 721              	.L32:
1186:./freertos/src/tasks.c **** 			}
1187:./freertos/src/tasks.c **** 			else
1188:./freertos/src/tasks.c **** 			{
1189:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:./freertos/src/tasks.c **** 			}
1191:./freertos/src/tasks.c **** 
1192:./freertos/src/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:./freertos/src/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:./freertos/src/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:./freertos/src/tasks.c **** 			not return. */
1196:./freertos/src/tasks.c **** 			uxTaskNumber++;
 722              		.loc 1 1196 16
 723 006a 264B     		ldr	r3, .L39+12
 724 006c 1B68     		ldr	r3, [r3]
 725 006e 0133     		adds	r3, r3, #1
 726 0070 244A     		ldr	r2, .L39+12
 727 0072 1360     		str	r3, [r2]
1197:./freertos/src/tasks.c **** 
1198:./freertos/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 728              		.loc 1 1198 14
 729 0074 204B     		ldr	r3, .L39
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 38


 730 0076 1B68     		ldr	r3, [r3]
 731              		.loc 1 1198 6
 732 0078 FA68     		ldr	r2, [r7, #12]
 733 007a 9A42     		cmp	r2, r3
 734 007c 0BD1     		bne	.L33
1199:./freertos/src/tasks.c **** 			{
1200:./freertos/src/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:./freertos/src/tasks.c **** 				task itself, as a context switch to another task is required.
1202:./freertos/src/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:./freertos/src/tasks.c **** 				check the termination list and free up any memory allocated by
1204:./freertos/src/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:./freertos/src/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 735              		.loc 1 1205 5
 736 007e FB68     		ldr	r3, [r7, #12]
 737 0080 0433     		adds	r3, r3, #4
 738 0082 1946     		mov	r1, r3
 739 0084 2048     		ldr	r0, .L39+16
 740 0086 FFF7FEFF 		bl	vListInsertEnd
1206:./freertos/src/tasks.c **** 
1207:./freertos/src/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:./freertos/src/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:./freertos/src/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:./freertos/src/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 741              		.loc 1 1210 5
 742 008a 204B     		ldr	r3, .L39+20
 743 008c 1B68     		ldr	r3, [r3]
 744 008e 0133     		adds	r3, r3, #1
 745 0090 1E4A     		ldr	r2, .L39+20
 746 0092 1360     		str	r3, [r2]
 747 0094 09E0     		b	.L34
 748              	.L33:
1211:./freertos/src/tasks.c **** 
1212:./freertos/src/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:./freertos/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:./freertos/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:./freertos/src/tasks.c **** 
1216:./freertos/src/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:./freertos/src/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:./freertos/src/tasks.c **** 				after which it is not possible to yield away from this task -
1219:./freertos/src/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:./freertos/src/tasks.c **** 				required. */
1221:./freertos/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:./freertos/src/tasks.c **** 			}
1223:./freertos/src/tasks.c **** 			else
1224:./freertos/src/tasks.c **** 			{
1225:./freertos/src/tasks.c **** 				--uxCurrentNumberOfTasks;
 749              		.loc 1 1225 5
 750 0096 1E4B     		ldr	r3, .L39+24
 751 0098 1B68     		ldr	r3, [r3]
 752 009a 013B     		subs	r3, r3, #1
 753 009c 1C4A     		ldr	r2, .L39+24
 754 009e 1360     		str	r3, [r2]
1226:./freertos/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:./freertos/src/tasks.c **** 				prvDeleteTCB( pxTCB );
 755              		.loc 1 1227 5
 756 00a0 F868     		ldr	r0, [r7, #12]
 757 00a2 FFF7FEFF 		bl	prvDeleteTCB
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 39


1228:./freertos/src/tasks.c **** 
1229:./freertos/src/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:./freertos/src/tasks.c **** 				the task that has just been deleted. */
1231:./freertos/src/tasks.c **** 				prvResetNextTaskUnblockTime();
 758              		.loc 1 1231 5
 759 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 760              	.L34:
1232:./freertos/src/tasks.c **** 			}
1233:./freertos/src/tasks.c **** 		}
1234:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 761              		.loc 1 1234 3
 762 00aa FFF7FEFF 		bl	vPortExitCritical
1235:./freertos/src/tasks.c **** 
1236:./freertos/src/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:./freertos/src/tasks.c **** 		been deleted. */
1238:./freertos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 763              		.loc 1 1238 25
 764 00ae 194B     		ldr	r3, .L39+28
 765 00b0 1B68     		ldr	r3, [r3]
 766              		.loc 1 1238 5
 767 00b2 002B     		cmp	r3, #0
 768 00b4 1CD0     		beq	.L38
1239:./freertos/src/tasks.c **** 		{
1240:./freertos/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 769              		.loc 1 1240 14
 770 00b6 104B     		ldr	r3, .L39
 771 00b8 1B68     		ldr	r3, [r3]
 772              		.loc 1 1240 6
 773 00ba FA68     		ldr	r2, [r7, #12]
 774 00bc 9A42     		cmp	r2, r3
 775 00be 17D1     		bne	.L38
1241:./freertos/src/tasks.c **** 			{
1242:./freertos/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 776              		.loc 1 1242 5
 777 00c0 154B     		ldr	r3, .L39+32
 778 00c2 1B68     		ldr	r3, [r3]
 779 00c4 002B     		cmp	r3, #0
 780 00c6 0BD0     		beq	.L36
 781              	.LBB107:
 782              	.LBB108:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 783              		.loc 2 197 2
 784              		.syntax unified
 785              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 786 00c8 4FF05003 			mov r3, #80												
 787 00cc 83F31188 		msr basepri, r3											
 788 00d0 BFF36F8F 		isb														
 789 00d4 BFF34F8F 		dsb														
 790              	
 791              	@ 0 "" 2
 792              		.thumb
 793              		.syntax unified
 794 00d8 BB60     		str	r3, [r7, #8]
 795              		.loc 2 205 1
 796 00da 00BF     		nop
 797              	.L37:
 798              	.LBE108:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 40


 799              	.LBE107:
 800              		.loc 1 1242 5
 801 00dc 00BF     		nop
 802 00de FDE7     		b	.L37
 803              	.L36:
1243:./freertos/src/tasks.c **** 				portYIELD_WITHIN_API();
 804              		.loc 1 1243 5
 805 00e0 0E4B     		ldr	r3, .L39+36
 806 00e2 4FF08052 		mov	r2, #268435456
 807 00e6 1A60     		str	r2, [r3]
 808              		.syntax unified
 809              	@ 1243 "./freertos/src/tasks.c" 1
 810 00e8 BFF34F8F 		dsb
 811              	@ 0 "" 2
 812              	@ 1243 "./freertos/src/tasks.c" 1
 813 00ec BFF36F8F 		isb
 814              	@ 0 "" 2
 815              		.thumb
 816              		.syntax unified
 817              	.L38:
1244:./freertos/src/tasks.c **** 			}
1245:./freertos/src/tasks.c **** 			else
1246:./freertos/src/tasks.c **** 			{
1247:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:./freertos/src/tasks.c **** 			}
1249:./freertos/src/tasks.c **** 		}
1250:./freertos/src/tasks.c **** 	}
 818              		.loc 1 1250 2
 819 00f0 00BF     		nop
 820 00f2 1037     		adds	r7, r7, #16
 821              	.LCFI18:
 822              		.cfi_def_cfa_offset 8
 823 00f4 BD46     		mov	sp, r7
 824              	.LCFI19:
 825              		.cfi_def_cfa_register 13
 826              		@ sp needed
 827 00f6 80BD     		pop	{r7, pc}
 828              	.L40:
 829              		.align	2
 830              	.L39:
 831 00f8 00000000 		.word	pxCurrentTCB
 832 00fc 00000000 		.word	pxReadyTasksLists
 833 0100 00000000 		.word	uxTopReadyPriority
 834 0104 00000000 		.word	uxTaskNumber
 835 0108 00000000 		.word	xTasksWaitingTermination
 836 010c 00000000 		.word	uxDeletedTasksWaitingCleanUp
 837 0110 00000000 		.word	uxCurrentNumberOfTasks
 838 0114 00000000 		.word	xSchedulerRunning
 839 0118 00000000 		.word	uxSchedulerSuspended
 840 011c 04ED00E0 		.word	-536810236
 841              		.cfi_endproc
 842              	.LFE64:
 844              		.section	.text.vTaskDelay,"ax",%progbits
 845              		.align	1
 846              		.global	vTaskDelay
 847              		.syntax unified
 848              		.thumb
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 41


 849              		.thumb_func
 851              	vTaskDelay:
 852              	.LFB65:
1251:./freertos/src/tasks.c **** 
1252:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1254:./freertos/src/tasks.c **** 
1255:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:./freertos/src/tasks.c **** 
1257:./freertos/src/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:./freertos/src/tasks.c **** 	{
1259:./freertos/src/tasks.c **** 	TickType_t xTimeToWake;
1260:./freertos/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:./freertos/src/tasks.c **** 
1262:./freertos/src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:./freertos/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:./freertos/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:./freertos/src/tasks.c **** 
1266:./freertos/src/tasks.c **** 		vTaskSuspendAll();
1267:./freertos/src/tasks.c **** 		{
1268:./freertos/src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:./freertos/src/tasks.c **** 			block. */
1270:./freertos/src/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:./freertos/src/tasks.c **** 
1272:./freertos/src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:./freertos/src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:./freertos/src/tasks.c **** 
1275:./freertos/src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:./freertos/src/tasks.c **** 			{
1277:./freertos/src/tasks.c **** 				/* The tick count has overflowed since this function was
1278:./freertos/src/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:./freertos/src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:./freertos/src/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:./freertos/src/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:./freertos/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:./freertos/src/tasks.c **** 				{
1284:./freertos/src/tasks.c **** 					xShouldDelay = pdTRUE;
1285:./freertos/src/tasks.c **** 				}
1286:./freertos/src/tasks.c **** 				else
1287:./freertos/src/tasks.c **** 				{
1288:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:./freertos/src/tasks.c **** 				}
1290:./freertos/src/tasks.c **** 			}
1291:./freertos/src/tasks.c **** 			else
1292:./freertos/src/tasks.c **** 			{
1293:./freertos/src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:./freertos/src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:./freertos/src/tasks.c **** 				tick time is less than the wake time. */
1296:./freertos/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:./freertos/src/tasks.c **** 				{
1298:./freertos/src/tasks.c **** 					xShouldDelay = pdTRUE;
1299:./freertos/src/tasks.c **** 				}
1300:./freertos/src/tasks.c **** 				else
1301:./freertos/src/tasks.c **** 				{
1302:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:./freertos/src/tasks.c **** 				}
1304:./freertos/src/tasks.c **** 			}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 42


1305:./freertos/src/tasks.c **** 
1306:./freertos/src/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:./freertos/src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:./freertos/src/tasks.c **** 
1309:./freertos/src/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:./freertos/src/tasks.c **** 			{
1311:./freertos/src/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:./freertos/src/tasks.c **** 
1313:./freertos/src/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:./freertos/src/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:./freertos/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:./freertos/src/tasks.c **** 			}
1317:./freertos/src/tasks.c **** 			else
1318:./freertos/src/tasks.c **** 			{
1319:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:./freertos/src/tasks.c **** 			}
1321:./freertos/src/tasks.c **** 		}
1322:./freertos/src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:./freertos/src/tasks.c **** 
1324:./freertos/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:./freertos/src/tasks.c **** 		have put ourselves to sleep. */
1326:./freertos/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:./freertos/src/tasks.c **** 		{
1328:./freertos/src/tasks.c **** 			portYIELD_WITHIN_API();
1329:./freertos/src/tasks.c **** 		}
1330:./freertos/src/tasks.c **** 		else
1331:./freertos/src/tasks.c **** 		{
1332:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:./freertos/src/tasks.c **** 		}
1334:./freertos/src/tasks.c **** 	}
1335:./freertos/src/tasks.c **** 
1336:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1338:./freertos/src/tasks.c **** 
1339:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:./freertos/src/tasks.c **** 
1341:./freertos/src/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:./freertos/src/tasks.c **** 	{
 853              		.loc 1 1342 2
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 16
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857 0000 80B5     		push	{r7, lr}
 858              	.LCFI20:
 859              		.cfi_def_cfa_offset 8
 860              		.cfi_offset 7, -8
 861              		.cfi_offset 14, -4
 862 0002 84B0     		sub	sp, sp, #16
 863              	.LCFI21:
 864              		.cfi_def_cfa_offset 24
 865 0004 00AF     		add	r7, sp, #0
 866              	.LCFI22:
 867              		.cfi_def_cfa_register 7
 868 0006 7860     		str	r0, [r7, #4]
1343:./freertos/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 869              		.loc 1 1343 13
 870 0008 0023     		movs	r3, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 43


 871 000a FB60     		str	r3, [r7, #12]
1344:./freertos/src/tasks.c **** 
1345:./freertos/src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:./freertos/src/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 872              		.loc 1 1346 5
 873 000c 7B68     		ldr	r3, [r7, #4]
 874 000e 002B     		cmp	r3, #0
 875 0010 18D0     		beq	.L42
1347:./freertos/src/tasks.c **** 		{
1348:./freertos/src/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 876              		.loc 1 1348 4
 877 0012 144B     		ldr	r3, .L47
 878 0014 1B68     		ldr	r3, [r3]
 879 0016 002B     		cmp	r3, #0
 880 0018 0BD0     		beq	.L43
 881              	.LBB109:
 882              	.LBB110:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 883              		.loc 2 197 2
 884              		.syntax unified
 885              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 886 001a 4FF05003 			mov r3, #80												
 887 001e 83F31188 		msr basepri, r3											
 888 0022 BFF36F8F 		isb														
 889 0026 BFF34F8F 		dsb														
 890              	
 891              	@ 0 "" 2
 892              		.thumb
 893              		.syntax unified
 894 002a BB60     		str	r3, [r7, #8]
 895              		.loc 2 205 1
 896 002c 00BF     		nop
 897              	.L44:
 898              	.LBE110:
 899              	.LBE109:
 900              		.loc 1 1348 4
 901 002e 00BF     		nop
 902 0030 FDE7     		b	.L44
 903              	.L43:
1349:./freertos/src/tasks.c **** 			vTaskSuspendAll();
 904              		.loc 1 1349 4
 905 0032 FFF7FEFF 		bl	vTaskSuspendAll
1350:./freertos/src/tasks.c **** 			{
1351:./freertos/src/tasks.c **** 				traceTASK_DELAY();
1352:./freertos/src/tasks.c **** 
1353:./freertos/src/tasks.c **** 				/* A task that is removed from the event list while the
1354:./freertos/src/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:./freertos/src/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:./freertos/src/tasks.c **** 				is resumed.
1357:./freertos/src/tasks.c **** 
1358:./freertos/src/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:./freertos/src/tasks.c **** 				executing task. */
1360:./freertos/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 906              		.loc 1 1360 5
 907 0036 0021     		movs	r1, #0
 908 0038 7868     		ldr	r0, [r7, #4]
 909 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 44


1361:./freertos/src/tasks.c **** 			}
1362:./freertos/src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 910              		.loc 1 1362 22
 911 003e FFF7FEFF 		bl	xTaskResumeAll
 912 0042 F860     		str	r0, [r7, #12]
 913              	.L42:
1363:./freertos/src/tasks.c **** 		}
1364:./freertos/src/tasks.c **** 		else
1365:./freertos/src/tasks.c **** 		{
1366:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:./freertos/src/tasks.c **** 		}
1368:./freertos/src/tasks.c **** 
1369:./freertos/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:./freertos/src/tasks.c **** 		have put ourselves to sleep. */
1371:./freertos/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 914              		.loc 1 1371 5
 915 0044 FB68     		ldr	r3, [r7, #12]
 916 0046 002B     		cmp	r3, #0
 917 0048 07D1     		bne	.L46
1372:./freertos/src/tasks.c **** 		{
1373:./freertos/src/tasks.c **** 			portYIELD_WITHIN_API();
 918              		.loc 1 1373 4
 919 004a 074B     		ldr	r3, .L47+4
 920 004c 4FF08052 		mov	r2, #268435456
 921 0050 1A60     		str	r2, [r3]
 922              		.syntax unified
 923              	@ 1373 "./freertos/src/tasks.c" 1
 924 0052 BFF34F8F 		dsb
 925              	@ 0 "" 2
 926              	@ 1373 "./freertos/src/tasks.c" 1
 927 0056 BFF36F8F 		isb
 928              	@ 0 "" 2
 929              		.thumb
 930              		.syntax unified
 931              	.L46:
1374:./freertos/src/tasks.c **** 		}
1375:./freertos/src/tasks.c **** 		else
1376:./freertos/src/tasks.c **** 		{
1377:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:./freertos/src/tasks.c **** 		}
1379:./freertos/src/tasks.c **** 	}
 932              		.loc 1 1379 2
 933 005a 00BF     		nop
 934 005c 1037     		adds	r7, r7, #16
 935              	.LCFI23:
 936              		.cfi_def_cfa_offset 8
 937 005e BD46     		mov	sp, r7
 938              	.LCFI24:
 939              		.cfi_def_cfa_register 13
 940              		@ sp needed
 941 0060 80BD     		pop	{r7, pc}
 942              	.L48:
 943 0062 00BF     		.align	2
 944              	.L47:
 945 0064 00000000 		.word	uxSchedulerSuspended
 946 0068 04ED00E0 		.word	-536810236
 947              		.cfi_endproc
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 45


 948              	.LFE65:
 950              		.section	.text.eTaskGetState,"ax",%progbits
 951              		.align	1
 952              		.global	eTaskGetState
 953              		.syntax unified
 954              		.thumb
 955              		.thumb_func
 957              	eTaskGetState:
 958              	.LFB66:
1380:./freertos/src/tasks.c **** 
1381:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1383:./freertos/src/tasks.c **** 
1384:./freertos/src/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:./freertos/src/tasks.c **** 
1386:./freertos/src/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:./freertos/src/tasks.c **** 	{
 959              		.loc 1 1387 2
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 32
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 80B5     		push	{r7, lr}
 964              	.LCFI25:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 7, -8
 967              		.cfi_offset 14, -4
 968 0002 88B0     		sub	sp, sp, #32
 969              	.LCFI26:
 970              		.cfi_def_cfa_offset 40
 971 0004 00AF     		add	r7, sp, #0
 972              	.LCFI27:
 973              		.cfi_def_cfa_register 7
 974 0006 7860     		str	r0, [r7, #4]
1388:./freertos/src/tasks.c **** 	eTaskState eReturn;
1389:./freertos/src/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:./freertos/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 975              		.loc 1 1390 22
 976 0008 7B68     		ldr	r3, [r7, #4]
 977 000a BB61     		str	r3, [r7, #24]
1391:./freertos/src/tasks.c **** 
1392:./freertos/src/tasks.c **** 		configASSERT( pxTCB );
 978              		.loc 1 1392 3
 979 000c BB69     		ldr	r3, [r7, #24]
 980 000e 002B     		cmp	r3, #0
 981 0010 0BD1     		bne	.L50
 982              	.LBB111:
 983              	.LBB112:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 984              		.loc 2 197 2
 985              		.syntax unified
 986              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 987 0012 4FF05003 			mov r3, #80												
 988 0016 83F31188 		msr basepri, r3											
 989 001a BFF36F8F 		isb														
 990 001e BFF34F8F 		dsb														
 991              	
 992              	@ 0 "" 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 46


 993              		.thumb
 994              		.syntax unified
 995 0022 BB60     		str	r3, [r7, #8]
 996              		.loc 2 205 1
 997 0024 00BF     		nop
 998              	.L51:
 999              	.LBE112:
 1000              	.LBE111:
 1001              		.loc 1 1392 3
 1002 0026 00BF     		nop
 1003 0028 FDE7     		b	.L51
 1004              	.L50:
1393:./freertos/src/tasks.c **** 
1394:./freertos/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1005              		.loc 1 1394 13
 1006 002a 244B     		ldr	r3, .L62
 1007 002c 1B68     		ldr	r3, [r3]
 1008              		.loc 1 1394 5
 1009 002e BA69     		ldr	r2, [r7, #24]
 1010 0030 9A42     		cmp	r2, r3
 1011 0032 02D1     		bne	.L52
1395:./freertos/src/tasks.c **** 		{
1396:./freertos/src/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:./freertos/src/tasks.c **** 			eReturn = eRunning;
 1012              		.loc 1 1397 12
 1013 0034 0023     		movs	r3, #0
 1014 0036 FB77     		strb	r3, [r7, #31]
 1015 0038 3AE0     		b	.L53
 1016              	.L52:
1398:./freertos/src/tasks.c **** 		}
1399:./freertos/src/tasks.c **** 		else
1400:./freertos/src/tasks.c **** 		{
1401:./freertos/src/tasks.c **** 			taskENTER_CRITICAL();
 1017              		.loc 1 1401 4
 1018 003a FFF7FEFF 		bl	vPortEnterCritical
1402:./freertos/src/tasks.c **** 			{
1403:./freertos/src/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1019              		.loc 1 1403 17
 1020 003e BB69     		ldr	r3, [r7, #24]
 1021 0040 5B69     		ldr	r3, [r3, #20]
 1022 0042 7B61     		str	r3, [r7, #20]
1404:./freertos/src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1023              		.loc 1 1404 19
 1024 0044 1E4B     		ldr	r3, .L62+4
 1025 0046 1B68     		ldr	r3, [r3]
 1026 0048 3B61     		str	r3, [r7, #16]
1405:./freertos/src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1027              		.loc 1 1405 29
 1028 004a 1E4B     		ldr	r3, .L62+8
 1029 004c 1B68     		ldr	r3, [r3]
 1030 004e FB60     		str	r3, [r7, #12]
1406:./freertos/src/tasks.c **** 			}
1407:./freertos/src/tasks.c **** 			taskEXIT_CRITICAL();
 1031              		.loc 1 1407 4
 1032 0050 FFF7FEFF 		bl	vPortExitCritical
1408:./freertos/src/tasks.c **** 
1409:./freertos/src/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 47


 1033              		.loc 1 1409 6
 1034 0054 7A69     		ldr	r2, [r7, #20]
 1035 0056 3B69     		ldr	r3, [r7, #16]
 1036 0058 9A42     		cmp	r2, r3
 1037 005a 03D0     		beq	.L54
 1038              		.loc 1 1409 41 discriminator 1
 1039 005c 7A69     		ldr	r2, [r7, #20]
 1040 005e FB68     		ldr	r3, [r7, #12]
 1041 0060 9A42     		cmp	r2, r3
 1042 0062 02D1     		bne	.L55
 1043              	.L54:
1410:./freertos/src/tasks.c **** 			{
1411:./freertos/src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:./freertos/src/tasks.c **** 				lists. */
1413:./freertos/src/tasks.c **** 				eReturn = eBlocked;
 1044              		.loc 1 1413 13
 1045 0064 0223     		movs	r3, #2
 1046 0066 FB77     		strb	r3, [r7, #31]
 1047 0068 22E0     		b	.L53
 1048              	.L55:
1414:./freertos/src/tasks.c **** 			}
1415:./freertos/src/tasks.c **** 
1416:./freertos/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:./freertos/src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1049              		.loc 1 1417 12
 1050 006a 7B69     		ldr	r3, [r7, #20]
 1051 006c 164A     		ldr	r2, .L62+12
 1052 006e 9342     		cmp	r3, r2
 1053 0070 12D1     		bne	.L56
1418:./freertos/src/tasks.c **** 				{
1419:./freertos/src/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:./freertos/src/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:./freertos/src/tasks.c **** 					indefinitely? */
1422:./freertos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1054              		.loc 1 1422 10
 1055 0072 BB69     		ldr	r3, [r7, #24]
 1056 0074 9B6A     		ldr	r3, [r3, #40]
 1057              		.loc 1 1422 8
 1058 0076 002B     		cmp	r3, #0
 1059 0078 0BD1     		bne	.L57
1423:./freertos/src/tasks.c **** 					{
1424:./freertos/src/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:./freertos/src/tasks.c **** 						{
1426:./freertos/src/tasks.c **** 							/* The task does not appear on the event list item of
1427:./freertos/src/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:./freertos/src/tasks.c **** 							blocked state if it is waiting on its notification
1429:./freertos/src/tasks.c **** 							rather than waiting on an object. */
1430:./freertos/src/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1060              		.loc 1 1430 17
 1061 007a BB69     		ldr	r3, [r7, #24]
 1062 007c 93F85830 		ldrb	r3, [r3, #88]
 1063 0080 DBB2     		uxtb	r3, r3
 1064              		.loc 1 1430 10
 1065 0082 012B     		cmp	r3, #1
 1066 0084 02D1     		bne	.L58
1431:./freertos/src/tasks.c **** 							{
1432:./freertos/src/tasks.c **** 								eReturn = eBlocked;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 48


 1067              		.loc 1 1432 17
 1068 0086 0223     		movs	r3, #2
 1069 0088 FB77     		strb	r3, [r7, #31]
 1070 008a 11E0     		b	.L53
 1071              	.L58:
1433:./freertos/src/tasks.c **** 							}
1434:./freertos/src/tasks.c **** 							else
1435:./freertos/src/tasks.c **** 							{
1436:./freertos/src/tasks.c **** 								eReturn = eSuspended;
 1072              		.loc 1 1436 17
 1073 008c 0323     		movs	r3, #3
 1074 008e FB77     		strb	r3, [r7, #31]
 1075 0090 0EE0     		b	.L53
 1076              	.L57:
1437:./freertos/src/tasks.c **** 							}
1438:./freertos/src/tasks.c **** 						}
1439:./freertos/src/tasks.c **** 						#else
1440:./freertos/src/tasks.c **** 						{
1441:./freertos/src/tasks.c **** 							eReturn = eSuspended;
1442:./freertos/src/tasks.c **** 						}
1443:./freertos/src/tasks.c **** 						#endif
1444:./freertos/src/tasks.c **** 					}
1445:./freertos/src/tasks.c **** 					else
1446:./freertos/src/tasks.c **** 					{
1447:./freertos/src/tasks.c **** 						eReturn = eBlocked;
 1077              		.loc 1 1447 15
 1078 0092 0223     		movs	r3, #2
 1079 0094 FB77     		strb	r3, [r7, #31]
 1080 0096 0BE0     		b	.L53
 1081              	.L56:
1448:./freertos/src/tasks.c **** 					}
1449:./freertos/src/tasks.c **** 				}
1450:./freertos/src/tasks.c **** 			#endif
1451:./freertos/src/tasks.c **** 
1452:./freertos/src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:./freertos/src/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1082              		.loc 1 1453 12
 1083 0098 7B69     		ldr	r3, [r7, #20]
 1084 009a 0C4A     		ldr	r2, .L62+16
 1085 009c 9342     		cmp	r3, r2
 1086 009e 02D0     		beq	.L59
 1087              		.loc 1 1453 59 discriminator 1
 1088 00a0 7B69     		ldr	r3, [r7, #20]
 1089 00a2 002B     		cmp	r3, #0
 1090 00a4 02D1     		bne	.L60
 1091              	.L59:
1454:./freertos/src/tasks.c **** 				{
1455:./freertos/src/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:./freertos/src/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:./freertos/src/tasks.c **** 					all. */
1458:./freertos/src/tasks.c **** 					eReturn = eDeleted;
 1092              		.loc 1 1458 14
 1093 00a6 0423     		movs	r3, #4
 1094 00a8 FB77     		strb	r3, [r7, #31]
 1095 00aa 01E0     		b	.L53
 1096              	.L60:
1459:./freertos/src/tasks.c **** 				}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 49


1460:./freertos/src/tasks.c **** 			#endif
1461:./freertos/src/tasks.c **** 
1462:./freertos/src/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:./freertos/src/tasks.c **** 			{
1464:./freertos/src/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:./freertos/src/tasks.c **** 				Ready (including pending ready) state. */
1466:./freertos/src/tasks.c **** 				eReturn = eReady;
 1097              		.loc 1 1466 13
 1098 00ac 0123     		movs	r3, #1
 1099 00ae FB77     		strb	r3, [r7, #31]
 1100              	.L53:
1467:./freertos/src/tasks.c **** 			}
1468:./freertos/src/tasks.c **** 		}
1469:./freertos/src/tasks.c **** 
1470:./freertos/src/tasks.c **** 		return eReturn;
 1101              		.loc 1 1470 10
 1102 00b0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:./freertos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1103              		.loc 1 1471 2
 1104 00b2 1846     		mov	r0, r3
 1105 00b4 2037     		adds	r7, r7, #32
 1106              	.LCFI28:
 1107              		.cfi_def_cfa_offset 8
 1108 00b6 BD46     		mov	sp, r7
 1109              	.LCFI29:
 1110              		.cfi_def_cfa_register 13
 1111              		@ sp needed
 1112 00b8 80BD     		pop	{r7, pc}
 1113              	.L63:
 1114 00ba 00BF     		.align	2
 1115              	.L62:
 1116 00bc 00000000 		.word	pxCurrentTCB
 1117 00c0 00000000 		.word	pxDelayedTaskList
 1118 00c4 00000000 		.word	pxOverflowDelayedTaskList
 1119 00c8 00000000 		.word	xSuspendedTaskList
 1120 00cc 00000000 		.word	xTasksWaitingTermination
 1121              		.cfi_endproc
 1122              	.LFE66:
 1124              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1125              		.align	1
 1126              		.global	uxTaskPriorityGet
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1131              	uxTaskPriorityGet:
 1132              	.LFB67:
1472:./freertos/src/tasks.c **** 
1473:./freertos/src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1475:./freertos/src/tasks.c **** 
1476:./freertos/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:./freertos/src/tasks.c **** 
1478:./freertos/src/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:./freertos/src/tasks.c **** 	{
 1133              		.loc 1 1479 2
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 50


 1136              		@ frame_needed = 1, uses_anonymous_args = 0
 1137 0000 80B5     		push	{r7, lr}
 1138              	.LCFI30:
 1139              		.cfi_def_cfa_offset 8
 1140              		.cfi_offset 7, -8
 1141              		.cfi_offset 14, -4
 1142 0002 84B0     		sub	sp, sp, #16
 1143              	.LCFI31:
 1144              		.cfi_def_cfa_offset 24
 1145 0004 00AF     		add	r7, sp, #0
 1146              	.LCFI32:
 1147              		.cfi_def_cfa_register 7
 1148 0006 7860     		str	r0, [r7, #4]
1480:./freertos/src/tasks.c **** 	TCB_t const *pxTCB;
1481:./freertos/src/tasks.c **** 	UBaseType_t uxReturn;
1482:./freertos/src/tasks.c **** 
1483:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 1149              		.loc 1 1483 3
 1150 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:./freertos/src/tasks.c **** 		{
1485:./freertos/src/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:./freertos/src/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1151              		.loc 1 1487 12
 1152 000c 7B68     		ldr	r3, [r7, #4]
 1153 000e 002B     		cmp	r3, #0
 1154 0010 02D1     		bne	.L65
 1155              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1156 0012 074B     		ldr	r3, .L68
 1157 0014 1B68     		ldr	r3, [r3]
 1158 0016 00E0     		b	.L66
 1159              	.L65:
 1160              		.loc 1 1487 12 discriminator 2
 1161 0018 7B68     		ldr	r3, [r7, #4]
 1162              	.L66:
 1163              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1164 001a FB60     		str	r3, [r7, #12]
1488:./freertos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1165              		.loc 1 1488 13
 1166 001c FB68     		ldr	r3, [r7, #12]
 1167 001e DB6A     		ldr	r3, [r3, #44]
 1168 0020 BB60     		str	r3, [r7, #8]
1489:./freertos/src/tasks.c **** 		}
1490:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 1169              		.loc 1 1490 3
 1170 0022 FFF7FEFF 		bl	vPortExitCritical
1491:./freertos/src/tasks.c **** 
1492:./freertos/src/tasks.c **** 		return uxReturn;
 1171              		.loc 1 1492 10
 1172 0026 BB68     		ldr	r3, [r7, #8]
1493:./freertos/src/tasks.c **** 	}
 1173              		.loc 1 1493 2
 1174 0028 1846     		mov	r0, r3
 1175 002a 1037     		adds	r7, r7, #16
 1176              	.LCFI33:
 1177              		.cfi_def_cfa_offset 8
 1178 002c BD46     		mov	sp, r7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 51


 1179              	.LCFI34:
 1180              		.cfi_def_cfa_register 13
 1181              		@ sp needed
 1182 002e 80BD     		pop	{r7, pc}
 1183              	.L69:
 1184              		.align	2
 1185              	.L68:
 1186 0030 00000000 		.word	pxCurrentTCB
 1187              		.cfi_endproc
 1188              	.LFE67:
 1190              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1191              		.align	1
 1192              		.global	uxTaskPriorityGetFromISR
 1193              		.syntax unified
 1194              		.thumb
 1195              		.thumb_func
 1197              	uxTaskPriorityGetFromISR:
 1198              	.LFB68:
1494:./freertos/src/tasks.c **** 
1495:./freertos/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1497:./freertos/src/tasks.c **** 
1498:./freertos/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:./freertos/src/tasks.c **** 
1500:./freertos/src/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:./freertos/src/tasks.c **** 	{
 1199              		.loc 1 1501 2
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 32
 1202              		@ frame_needed = 1, uses_anonymous_args = 0
 1203 0000 80B5     		push	{r7, lr}
 1204              	.LCFI35:
 1205              		.cfi_def_cfa_offset 8
 1206              		.cfi_offset 7, -8
 1207              		.cfi_offset 14, -4
 1208 0002 88B0     		sub	sp, sp, #32
 1209              	.LCFI36:
 1210              		.cfi_def_cfa_offset 40
 1211 0004 00AF     		add	r7, sp, #0
 1212              	.LCFI37:
 1213              		.cfi_def_cfa_register 7
 1214 0006 7860     		str	r0, [r7, #4]
1502:./freertos/src/tasks.c **** 	TCB_t const *pxTCB;
1503:./freertos/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:./freertos/src/tasks.c **** 
1505:./freertos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:./freertos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:./freertos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:./freertos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:./freertos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:./freertos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:./freertos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:./freertos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:./freertos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:./freertos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:./freertos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 52


1517:./freertos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:./freertos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:./freertos/src/tasks.c **** 		provided on the following link:
1520:./freertos/src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1215              		.loc 1 1521 3
 1216 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1217              	.LBB113:
 1218              	.LBB114:
 206:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 207:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 209:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 211:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1219              		.loc 2 213 2
 1220              		.syntax unified
 1221              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1222 000c EFF31182 			mrs r2, basepri											
 1223 0010 4FF05003 		mov r3, #80												
 1224 0014 83F31188 		msr basepri, r3											
 1225 0018 BFF36F8F 		isb														
 1226 001c BFF34F8F 		dsb														
 1227              	
 1228              	@ 0 "" 2
 1229              		.thumb
 1230              		.syntax unified
 1231 0020 3A61     		str	r2, [r7, #16]
 1232 0022 FB60     		str	r3, [r7, #12]
 214:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 215:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	);
 222:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 223:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1233              		.loc 2 225 9
 1234 0024 3B69     		ldr	r3, [r7, #16]
 1235              	.LBE114:
 1236              	.LBE113:
1522:./freertos/src/tasks.c **** 
1523:./freertos/src/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1237              		.loc 1 1523 27
 1238 0026 FB61     		str	r3, [r7, #28]
1524:./freertos/src/tasks.c **** 		{
1525:./freertos/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:./freertos/src/tasks.c **** 			task that is being queried. */
1527:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1239              		.loc 1 1527 12
 1240 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 53


 1241 002a 002B     		cmp	r3, #0
 1242 002c 02D1     		bne	.L72
 1243              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1244 002e 094B     		ldr	r3, .L75
 1245 0030 1B68     		ldr	r3, [r3]
 1246 0032 00E0     		b	.L73
 1247              	.L72:
 1248              		.loc 1 1527 12 discriminator 2
 1249 0034 7B68     		ldr	r3, [r7, #4]
 1250              	.L73:
 1251              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1252 0036 BB61     		str	r3, [r7, #24]
1528:./freertos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1253              		.loc 1 1528 13
 1254 0038 BB69     		ldr	r3, [r7, #24]
 1255 003a DB6A     		ldr	r3, [r3, #44]
 1256 003c 7B61     		str	r3, [r7, #20]
 1257 003e FB69     		ldr	r3, [r7, #28]
 1258 0040 BB60     		str	r3, [r7, #8]
 1259              	.LBB115:
 1260              	.LBB116:
 226:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 227:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 229:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1261              		.loc 2 231 2
 1262 0042 BB68     		ldr	r3, [r7, #8]
 1263              		.syntax unified
 1264              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1265 0044 83F31188 			msr basepri, r3	
 1266              	@ 0 "" 2
 232:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 233:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 234:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	);
 235:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 1267              		.loc 2 235 1
 1268              		.thumb
 1269              		.syntax unified
 1270 0048 00BF     		nop
 1271              	.LBE116:
 1272              	.LBE115:
1529:./freertos/src/tasks.c **** 		}
1530:./freertos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:./freertos/src/tasks.c **** 
1532:./freertos/src/tasks.c **** 		return uxReturn;
 1273              		.loc 1 1532 10
 1274 004a 7B69     		ldr	r3, [r7, #20]
1533:./freertos/src/tasks.c **** 	}
 1275              		.loc 1 1533 2
 1276 004c 1846     		mov	r0, r3
 1277 004e 2037     		adds	r7, r7, #32
 1278              	.LCFI38:
 1279              		.cfi_def_cfa_offset 8
 1280 0050 BD46     		mov	sp, r7
 1281              	.LCFI39:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 54


 1282              		.cfi_def_cfa_register 13
 1283              		@ sp needed
 1284 0052 80BD     		pop	{r7, pc}
 1285              	.L76:
 1286              		.align	2
 1287              	.L75:
 1288 0054 00000000 		.word	pxCurrentTCB
 1289              		.cfi_endproc
 1290              	.LFE68:
 1292              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1293              		.align	1
 1294              		.global	vTaskPrioritySet
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1299              	vTaskPrioritySet:
 1300              	.LFB69:
1534:./freertos/src/tasks.c **** 
1535:./freertos/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1537:./freertos/src/tasks.c **** 
1538:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:./freertos/src/tasks.c **** 
1540:./freertos/src/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:./freertos/src/tasks.c **** 	{
 1301              		.loc 1 1541 2
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 32
 1304              		@ frame_needed = 1, uses_anonymous_args = 0
 1305 0000 80B5     		push	{r7, lr}
 1306              	.LCFI40:
 1307              		.cfi_def_cfa_offset 8
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
 1310 0002 88B0     		sub	sp, sp, #32
 1311              	.LCFI41:
 1312              		.cfi_def_cfa_offset 40
 1313 0004 00AF     		add	r7, sp, #0
 1314              	.LCFI42:
 1315              		.cfi_def_cfa_register 7
 1316 0006 7860     		str	r0, [r7, #4]
 1317 0008 3960     		str	r1, [r7]
1542:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
1543:./freertos/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:./freertos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1318              		.loc 1 1544 13
 1319 000a 0023     		movs	r3, #0
 1320 000c FB61     		str	r3, [r7, #28]
1545:./freertos/src/tasks.c **** 
1546:./freertos/src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1321              		.loc 1 1546 3
 1322 000e 3B68     		ldr	r3, [r7]
 1323 0010 042B     		cmp	r3, #4
 1324 0012 0BD9     		bls	.L78
 1325              	.LBB117:
 1326              	.LBB118:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 55


 1327              		.loc 2 197 2
 1328              		.syntax unified
 1329              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1330 0014 4FF05003 			mov r3, #80												
 1331 0018 83F31188 		msr basepri, r3											
 1332 001c BFF36F8F 		isb														
 1333 0020 BFF34F8F 		dsb														
 1334              	
 1335              	@ 0 "" 2
 1336              		.thumb
 1337              		.syntax unified
 1338 0024 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1339              		.loc 2 205 1
 1340 0026 00BF     		nop
 1341              	.L79:
 1342              	.LBE118:
 1343              	.LBE117:
 1344              		.loc 1 1546 3
 1345 0028 00BF     		nop
 1346 002a FDE7     		b	.L79
 1347              	.L78:
1547:./freertos/src/tasks.c **** 
1548:./freertos/src/tasks.c **** 		/* Ensure the new priority is valid. */
1549:./freertos/src/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1348              		.loc 1 1549 5
 1349 002c 3B68     		ldr	r3, [r7]
 1350 002e 042B     		cmp	r3, #4
 1351 0030 01D9     		bls	.L80
1550:./freertos/src/tasks.c **** 		{
1551:./freertos/src/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1352              		.loc 1 1551 18
 1353 0032 0423     		movs	r3, #4
 1354 0034 3B60     		str	r3, [r7]
 1355              	.L80:
1552:./freertos/src/tasks.c **** 		}
1553:./freertos/src/tasks.c **** 		else
1554:./freertos/src/tasks.c **** 		{
1555:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:./freertos/src/tasks.c **** 		}
1557:./freertos/src/tasks.c **** 
1558:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 1356              		.loc 1 1558 3
 1357 0036 FFF7FEFF 		bl	vPortEnterCritical
1559:./freertos/src/tasks.c **** 		{
1560:./freertos/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:./freertos/src/tasks.c **** 			task that is being changed. */
1562:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1358              		.loc 1 1562 12
 1359 003a 7B68     		ldr	r3, [r7, #4]
 1360 003c 002B     		cmp	r3, #0
 1361 003e 02D1     		bne	.L81
 1362              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1363 0040 404B     		ldr	r3, .L90
 1364 0042 1B68     		ldr	r3, [r3]
 1365 0044 00E0     		b	.L82
 1366              	.L81:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 56


 1367              		.loc 1 1562 12 discriminator 2
 1368 0046 7B68     		ldr	r3, [r7, #4]
 1369              	.L82:
 1370              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1371 0048 BB61     		str	r3, [r7, #24]
1563:./freertos/src/tasks.c **** 
1564:./freertos/src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:./freertos/src/tasks.c **** 
1566:./freertos/src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:./freertos/src/tasks.c **** 			{
1568:./freertos/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1372              		.loc 1 1568 27
 1373 004a BB69     		ldr	r3, [r7, #24]
 1374 004c DB6C     		ldr	r3, [r3, #76]
 1375 004e 7B61     		str	r3, [r7, #20]
1569:./freertos/src/tasks.c **** 			}
1570:./freertos/src/tasks.c **** 			#else
1571:./freertos/src/tasks.c **** 			{
1572:./freertos/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:./freertos/src/tasks.c **** 			}
1574:./freertos/src/tasks.c **** 			#endif
1575:./freertos/src/tasks.c **** 
1576:./freertos/src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1376              		.loc 1 1576 6
 1377 0050 7A69     		ldr	r2, [r7, #20]
 1378 0052 3B68     		ldr	r3, [r7]
 1379 0054 9A42     		cmp	r2, r3
 1380 0056 6FD0     		beq	.L83
1577:./freertos/src/tasks.c **** 			{
1578:./freertos/src/tasks.c **** 				/* The priority change may have readied a task of higher
1579:./freertos/src/tasks.c **** 				priority than the calling task. */
1580:./freertos/src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1381              		.loc 1 1580 7
 1382 0058 3A68     		ldr	r2, [r7]
 1383 005a 7B69     		ldr	r3, [r7, #20]
 1384 005c 9A42     		cmp	r2, r3
 1385 005e 0DD9     		bls	.L84
1581:./freertos/src/tasks.c **** 				{
1582:./freertos/src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1386              		.loc 1 1582 16
 1387 0060 384B     		ldr	r3, .L90
 1388 0062 1B68     		ldr	r3, [r3]
 1389              		.loc 1 1582 8
 1390 0064 BA69     		ldr	r2, [r7, #24]
 1391 0066 9A42     		cmp	r2, r3
 1392 0068 0FD0     		beq	.L85
1583:./freertos/src/tasks.c **** 					{
1584:./freertos/src/tasks.c **** 						/* The priority of a task other than the currently
1585:./freertos/src/tasks.c **** 						running task is being raised.  Is the priority being
1586:./freertos/src/tasks.c **** 						raised above that of the running task? */
1587:./freertos/src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1393              		.loc 1 1587 40
 1394 006a 364B     		ldr	r3, .L90
 1395 006c 1B68     		ldr	r3, [r3]
 1396 006e DB6A     		ldr	r3, [r3, #44]
 1397              		.loc 1 1587 9
 1398 0070 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 57


 1399 0072 9A42     		cmp	r2, r3
 1400 0074 09D3     		bcc	.L85
1588:./freertos/src/tasks.c **** 						{
1589:./freertos/src/tasks.c **** 							xYieldRequired = pdTRUE;
 1401              		.loc 1 1589 23
 1402 0076 0123     		movs	r3, #1
 1403 0078 FB61     		str	r3, [r7, #28]
 1404 007a 06E0     		b	.L85
 1405              	.L84:
1590:./freertos/src/tasks.c **** 						}
1591:./freertos/src/tasks.c **** 						else
1592:./freertos/src/tasks.c **** 						{
1593:./freertos/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:./freertos/src/tasks.c **** 						}
1595:./freertos/src/tasks.c **** 					}
1596:./freertos/src/tasks.c **** 					else
1597:./freertos/src/tasks.c **** 					{
1598:./freertos/src/tasks.c **** 						/* The priority of the running task is being raised,
1599:./freertos/src/tasks.c **** 						but the running task must already be the highest
1600:./freertos/src/tasks.c **** 						priority task able to run so no yield is required. */
1601:./freertos/src/tasks.c **** 					}
1602:./freertos/src/tasks.c **** 				}
1603:./freertos/src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1406              		.loc 1 1603 20
 1407 007c 314B     		ldr	r3, .L90
 1408 007e 1B68     		ldr	r3, [r3]
 1409              		.loc 1 1603 12
 1410 0080 BA69     		ldr	r2, [r7, #24]
 1411 0082 9A42     		cmp	r2, r3
 1412 0084 01D1     		bne	.L85
1604:./freertos/src/tasks.c **** 				{
1605:./freertos/src/tasks.c **** 					/* Setting the priority of the running task down means
1606:./freertos/src/tasks.c **** 					there may now be another task of higher priority that
1607:./freertos/src/tasks.c **** 					is ready to execute. */
1608:./freertos/src/tasks.c **** 					xYieldRequired = pdTRUE;
 1413              		.loc 1 1608 21
 1414 0086 0123     		movs	r3, #1
 1415 0088 FB61     		str	r3, [r7, #28]
 1416              	.L85:
1609:./freertos/src/tasks.c **** 				}
1610:./freertos/src/tasks.c **** 				else
1611:./freertos/src/tasks.c **** 				{
1612:./freertos/src/tasks.c **** 					/* Setting the priority of any other task down does not
1613:./freertos/src/tasks.c **** 					require a yield as the running task must be above the
1614:./freertos/src/tasks.c **** 					new priority of the task being modified. */
1615:./freertos/src/tasks.c **** 				}
1616:./freertos/src/tasks.c **** 
1617:./freertos/src/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:./freertos/src/tasks.c **** 				before its uxPriority member is changed so the
1619:./freertos/src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:./freertos/src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1417              		.loc 1 1620 27
 1418 008a BB69     		ldr	r3, [r7, #24]
 1419 008c DB6A     		ldr	r3, [r3, #44]
 1420 008e 3B61     		str	r3, [r7, #16]
1621:./freertos/src/tasks.c **** 
1622:./freertos/src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 58


1623:./freertos/src/tasks.c **** 				{
1624:./freertos/src/tasks.c **** 					/* Only change the priority being used if the task is not
1625:./freertos/src/tasks.c **** 					currently using an inherited priority. */
1626:./freertos/src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1421              		.loc 1 1626 15
 1422 0090 BB69     		ldr	r3, [r7, #24]
 1423 0092 DA6C     		ldr	r2, [r3, #76]
 1424              		.loc 1 1626 40
 1425 0094 BB69     		ldr	r3, [r7, #24]
 1426 0096 DB6A     		ldr	r3, [r3, #44]
 1427              		.loc 1 1626 8
 1428 0098 9A42     		cmp	r2, r3
 1429 009a 02D1     		bne	.L86
1627:./freertos/src/tasks.c **** 					{
1628:./freertos/src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1430              		.loc 1 1628 25
 1431 009c BB69     		ldr	r3, [r7, #24]
 1432 009e 3A68     		ldr	r2, [r7]
 1433 00a0 DA62     		str	r2, [r3, #44]
 1434              	.L86:
1629:./freertos/src/tasks.c **** 					}
1630:./freertos/src/tasks.c **** 					else
1631:./freertos/src/tasks.c **** 					{
1632:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:./freertos/src/tasks.c **** 					}
1634:./freertos/src/tasks.c **** 
1635:./freertos/src/tasks.c **** 					/* The base priority gets set whatever. */
1636:./freertos/src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1435              		.loc 1 1636 28
 1436 00a2 BB69     		ldr	r3, [r7, #24]
 1437 00a4 3A68     		ldr	r2, [r7]
 1438 00a6 DA64     		str	r2, [r3, #76]
1637:./freertos/src/tasks.c **** 				}
1638:./freertos/src/tasks.c **** 				#else
1639:./freertos/src/tasks.c **** 				{
1640:./freertos/src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:./freertos/src/tasks.c **** 				}
1642:./freertos/src/tasks.c **** 				#endif
1643:./freertos/src/tasks.c **** 
1644:./freertos/src/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:./freertos/src/tasks.c **** 				being used for anything else. */
1646:./freertos/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1439              		.loc 1 1646 11
 1440 00a8 BB69     		ldr	r3, [r7, #24]
 1441 00aa 9B69     		ldr	r3, [r3, #24]
 1442              		.loc 1 1646 7
 1443 00ac 002B     		cmp	r3, #0
 1444 00ae 04DB     		blt	.L87
1647:./freertos/src/tasks.c **** 				{
1648:./freertos/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1445              		.loc 1 1648 6
 1446 00b0 3B68     		ldr	r3, [r7]
 1447 00b2 C3F10502 		rsb	r2, r3, #5
 1448 00b6 BB69     		ldr	r3, [r7, #24]
 1449 00b8 9A61     		str	r2, [r3, #24]
 1450              	.L87:
1649:./freertos/src/tasks.c **** 				}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 59


1650:./freertos/src/tasks.c **** 				else
1651:./freertos/src/tasks.c **** 				{
1652:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:./freertos/src/tasks.c **** 				}
1654:./freertos/src/tasks.c **** 
1655:./freertos/src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:./freertos/src/tasks.c **** 				nothing more than change its priority variable. However, if
1657:./freertos/src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:./freertos/src/tasks.c **** 				in the list appropriate to its new priority. */
1659:./freertos/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1451              		.loc 1 1659 9
 1452 00ba BB69     		ldr	r3, [r7, #24]
 1453 00bc 5969     		ldr	r1, [r3, #20]
 1454 00be 3A69     		ldr	r2, [r7, #16]
 1455 00c0 1346     		mov	r3, r2
 1456 00c2 9B00     		lsls	r3, r3, #2
 1457 00c4 1344     		add	r3, r3, r2
 1458 00c6 9B00     		lsls	r3, r3, #2
 1459 00c8 1F4A     		ldr	r2, .L90+4
 1460 00ca 1344     		add	r3, r3, r2
 1461              		.loc 1 1659 7
 1462 00cc 9942     		cmp	r1, r3
 1463 00ce 28D1     		bne	.L88
1660:./freertos/src/tasks.c **** 				{
1661:./freertos/src/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:./freertos/src/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:./freertos/src/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:./freertos/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1464              		.loc 1 1664 10
 1465 00d0 BB69     		ldr	r3, [r7, #24]
 1466 00d2 0433     		adds	r3, r3, #4
 1467 00d4 1846     		mov	r0, r3
 1468 00d6 FFF7FEFF 		bl	uxListRemove
 1469 00da 0346     		mov	r3, r0
 1470              		.loc 1 1664 8 discriminator 1
 1471 00dc 002B     		cmp	r3, #0
 1472 00de 09D1     		bne	.L89
1665:./freertos/src/tasks.c **** 					{
1666:./freertos/src/tasks.c **** 						/* It is known that the task is in its ready list so
1667:./freertos/src/tasks.c **** 						there is no need to check again and the port level
1668:./freertos/src/tasks.c **** 						reset macro can be called directly. */
1669:./freertos/src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1473              		.loc 1 1669 7
 1474 00e0 0122     		movs	r2, #1
 1475 00e2 3B69     		ldr	r3, [r7, #16]
 1476 00e4 02FA03F3 		lsl	r3, r2, r3
 1477 00e8 DA43     		mvns	r2, r3
 1478 00ea 184B     		ldr	r3, .L90+8
 1479 00ec 1B68     		ldr	r3, [r3]
 1480 00ee 1340     		ands	r3, r3, r2
 1481 00f0 164A     		ldr	r2, .L90+8
 1482 00f2 1360     		str	r3, [r2]
 1483              	.L89:
1670:./freertos/src/tasks.c **** 					}
1671:./freertos/src/tasks.c **** 					else
1672:./freertos/src/tasks.c **** 					{
1673:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 60


1674:./freertos/src/tasks.c **** 					}
1675:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1484              		.loc 1 1675 6
 1485 00f4 BB69     		ldr	r3, [r7, #24]
 1486 00f6 DB6A     		ldr	r3, [r3, #44]
 1487 00f8 0122     		movs	r2, #1
 1488 00fa 9A40     		lsls	r2, r2, r3
 1489 00fc 134B     		ldr	r3, .L90+8
 1490 00fe 1B68     		ldr	r3, [r3]
 1491 0100 1343     		orrs	r3, r3, r2
 1492 0102 124A     		ldr	r2, .L90+8
 1493 0104 1360     		str	r3, [r2]
 1494 0106 BB69     		ldr	r3, [r7, #24]
 1495 0108 DA6A     		ldr	r2, [r3, #44]
 1496 010a 1346     		mov	r3, r2
 1497 010c 9B00     		lsls	r3, r3, #2
 1498 010e 1344     		add	r3, r3, r2
 1499 0110 9B00     		lsls	r3, r3, #2
 1500 0112 0D4A     		ldr	r2, .L90+4
 1501 0114 1A44     		add	r2, r2, r3
 1502 0116 BB69     		ldr	r3, [r7, #24]
 1503 0118 0433     		adds	r3, r3, #4
 1504 011a 1946     		mov	r1, r3
 1505 011c 1046     		mov	r0, r2
 1506 011e FFF7FEFF 		bl	vListInsertEnd
 1507              	.L88:
1676:./freertos/src/tasks.c **** 				}
1677:./freertos/src/tasks.c **** 				else
1678:./freertos/src/tasks.c **** 				{
1679:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:./freertos/src/tasks.c **** 				}
1681:./freertos/src/tasks.c **** 
1682:./freertos/src/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1508              		.loc 1 1682 7
 1509 0122 FB69     		ldr	r3, [r7, #28]
 1510 0124 002B     		cmp	r3, #0
 1511 0126 07D0     		beq	.L83
1683:./freertos/src/tasks.c **** 				{
1684:./freertos/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1512              		.loc 1 1684 6
 1513 0128 094B     		ldr	r3, .L90+12
 1514 012a 4FF08052 		mov	r2, #268435456
 1515 012e 1A60     		str	r2, [r3]
 1516              		.syntax unified
 1517              	@ 1684 "./freertos/src/tasks.c" 1
 1518 0130 BFF34F8F 		dsb
 1519              	@ 0 "" 2
 1520              	@ 1684 "./freertos/src/tasks.c" 1
 1521 0134 BFF36F8F 		isb
 1522              	@ 0 "" 2
 1523              		.thumb
 1524              		.syntax unified
 1525              	.L83:
1685:./freertos/src/tasks.c **** 				}
1686:./freertos/src/tasks.c **** 				else
1687:./freertos/src/tasks.c **** 				{
1688:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 61


1689:./freertos/src/tasks.c **** 				}
1690:./freertos/src/tasks.c **** 
1691:./freertos/src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:./freertos/src/tasks.c **** 				optimised task selection is not being used. */
1693:./freertos/src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:./freertos/src/tasks.c **** 			}
1695:./freertos/src/tasks.c **** 		}
1696:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 1526              		.loc 1 1696 3
 1527 0138 FFF7FEFF 		bl	vPortExitCritical
1697:./freertos/src/tasks.c **** 	}
 1528              		.loc 1 1697 2
 1529 013c 00BF     		nop
 1530 013e 2037     		adds	r7, r7, #32
 1531              	.LCFI43:
 1532              		.cfi_def_cfa_offset 8
 1533 0140 BD46     		mov	sp, r7
 1534              	.LCFI44:
 1535              		.cfi_def_cfa_register 13
 1536              		@ sp needed
 1537 0142 80BD     		pop	{r7, pc}
 1538              	.L91:
 1539              		.align	2
 1540              	.L90:
 1541 0144 00000000 		.word	pxCurrentTCB
 1542 0148 00000000 		.word	pxReadyTasksLists
 1543 014c 00000000 		.word	uxTopReadyPriority
 1544 0150 04ED00E0 		.word	-536810236
 1545              		.cfi_endproc
 1546              	.LFE69:
 1548              		.section	.text.vTaskSuspend,"ax",%progbits
 1549              		.align	1
 1550              		.global	vTaskSuspend
 1551              		.syntax unified
 1552              		.thumb
 1553              		.thumb_func
 1555              	vTaskSuspend:
 1556              	.LFB70:
1698:./freertos/src/tasks.c **** 
1699:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1701:./freertos/src/tasks.c **** 
1702:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:./freertos/src/tasks.c **** 
1704:./freertos/src/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:./freertos/src/tasks.c **** 	{
 1557              		.loc 1 1705 2
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 16
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 80B5     		push	{r7, lr}
 1562              	.LCFI45:
 1563              		.cfi_def_cfa_offset 8
 1564              		.cfi_offset 7, -8
 1565              		.cfi_offset 14, -4
 1566 0002 84B0     		sub	sp, sp, #16
 1567              	.LCFI46:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 62


 1568              		.cfi_def_cfa_offset 24
 1569 0004 00AF     		add	r7, sp, #0
 1570              	.LCFI47:
 1571              		.cfi_def_cfa_register 7
 1572 0006 7860     		str	r0, [r7, #4]
1706:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
1707:./freertos/src/tasks.c **** 
1708:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 1573              		.loc 1 1708 3
 1574 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:./freertos/src/tasks.c **** 		{
1710:./freertos/src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:./freertos/src/tasks.c **** 			being suspended. */
1712:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1575              		.loc 1 1712 12
 1576 000c 7B68     		ldr	r3, [r7, #4]
 1577 000e 002B     		cmp	r3, #0
 1578 0010 02D1     		bne	.L93
 1579              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1580 0012 3D4B     		ldr	r3, .L105
 1581 0014 1B68     		ldr	r3, [r3]
 1582 0016 00E0     		b	.L94
 1583              	.L93:
 1584              		.loc 1 1712 12 discriminator 2
 1585 0018 7B68     		ldr	r3, [r7, #4]
 1586              	.L94:
 1587              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1588 001a FB60     		str	r3, [r7, #12]
1713:./freertos/src/tasks.c **** 
1714:./freertos/src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:./freertos/src/tasks.c **** 
1716:./freertos/src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:./freertos/src/tasks.c **** 			suspended list. */
1718:./freertos/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1589              		.loc 1 1718 8
 1590 001c FB68     		ldr	r3, [r7, #12]
 1591 001e 0433     		adds	r3, r3, #4
 1592 0020 1846     		mov	r0, r3
 1593 0022 FFF7FEFF 		bl	uxListRemove
 1594 0026 0346     		mov	r3, r0
 1595              		.loc 1 1718 6 discriminator 1
 1596 0028 002B     		cmp	r3, #0
 1597 002a 15D1     		bne	.L95
1719:./freertos/src/tasks.c **** 			{
1720:./freertos/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1598              		.loc 1 1720 5
 1599 002c FB68     		ldr	r3, [r7, #12]
 1600 002e DA6A     		ldr	r2, [r3, #44]
 1601 0030 3649     		ldr	r1, .L105+4
 1602 0032 1346     		mov	r3, r2
 1603 0034 9B00     		lsls	r3, r3, #2
 1604 0036 1344     		add	r3, r3, r2
 1605 0038 9B00     		lsls	r3, r3, #2
 1606 003a 0B44     		add	r3, r3, r1
 1607 003c 1B68     		ldr	r3, [r3]
 1608 003e 002B     		cmp	r3, #0
 1609 0040 0AD1     		bne	.L95
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 63


 1610              		.loc 1 1720 5 is_stmt 0 discriminator 1
 1611 0042 FB68     		ldr	r3, [r7, #12]
 1612 0044 DB6A     		ldr	r3, [r3, #44]
 1613 0046 0122     		movs	r2, #1
 1614 0048 02FA03F3 		lsl	r3, r2, r3
 1615 004c DA43     		mvns	r2, r3
 1616 004e 304B     		ldr	r3, .L105+8
 1617 0050 1B68     		ldr	r3, [r3]
 1618 0052 1340     		ands	r3, r3, r2
 1619 0054 2E4A     		ldr	r2, .L105+8
 1620 0056 1360     		str	r3, [r2]
 1621              	.L95:
1721:./freertos/src/tasks.c **** 			}
1722:./freertos/src/tasks.c **** 			else
1723:./freertos/src/tasks.c **** 			{
1724:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:./freertos/src/tasks.c **** 			}
1726:./freertos/src/tasks.c **** 
1727:./freertos/src/tasks.c **** 			/* Is the task waiting on an event also? */
1728:./freertos/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1622              		.loc 1 1728 8 is_stmt 1
 1623 0058 FB68     		ldr	r3, [r7, #12]
 1624 005a 9B6A     		ldr	r3, [r3, #40]
 1625              		.loc 1 1728 6
 1626 005c 002B     		cmp	r3, #0
 1627 005e 04D0     		beq	.L96
1729:./freertos/src/tasks.c **** 			{
1730:./freertos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1628              		.loc 1 1730 14
 1629 0060 FB68     		ldr	r3, [r7, #12]
 1630 0062 1833     		adds	r3, r3, #24
 1631 0064 1846     		mov	r0, r3
 1632 0066 FFF7FEFF 		bl	uxListRemove
 1633              	.L96:
1731:./freertos/src/tasks.c **** 			}
1732:./freertos/src/tasks.c **** 			else
1733:./freertos/src/tasks.c **** 			{
1734:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:./freertos/src/tasks.c **** 			}
1736:./freertos/src/tasks.c **** 
1737:./freertos/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1634              		.loc 1 1737 4
 1635 006a FB68     		ldr	r3, [r7, #12]
 1636 006c 0433     		adds	r3, r3, #4
 1637 006e 1946     		mov	r1, r3
 1638 0070 2848     		ldr	r0, .L105+12
 1639 0072 FFF7FEFF 		bl	vListInsertEnd
1738:./freertos/src/tasks.c **** 
1739:./freertos/src/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:./freertos/src/tasks.c **** 			{
1741:./freertos/src/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1640              		.loc 1 1741 14
 1641 0076 FB68     		ldr	r3, [r7, #12]
 1642 0078 93F85830 		ldrb	r3, [r3, #88]
 1643 007c DBB2     		uxtb	r3, r3
 1644              		.loc 1 1741 7
 1645 007e 012B     		cmp	r3, #1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 64


 1646 0080 03D1     		bne	.L97
1742:./freertos/src/tasks.c **** 				{
1743:./freertos/src/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:./freertos/src/tasks.c **** 					now suspended, so no notification was received. */
1745:./freertos/src/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1647              		.loc 1 1745 27
 1648 0082 FB68     		ldr	r3, [r7, #12]
 1649 0084 0022     		movs	r2, #0
 1650 0086 83F85820 		strb	r2, [r3, #88]
 1651              	.L97:
1746:./freertos/src/tasks.c **** 				}
1747:./freertos/src/tasks.c **** 			}
1748:./freertos/src/tasks.c **** 			#endif
1749:./freertos/src/tasks.c **** 		}
1750:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 1652              		.loc 1 1750 3
 1653 008a FFF7FEFF 		bl	vPortExitCritical
1751:./freertos/src/tasks.c **** 
1752:./freertos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1654              		.loc 1 1752 25
 1655 008e 224B     		ldr	r3, .L105+16
 1656 0090 1B68     		ldr	r3, [r3]
 1657              		.loc 1 1752 5
 1658 0092 002B     		cmp	r3, #0
 1659 0094 05D0     		beq	.L98
1753:./freertos/src/tasks.c **** 		{
1754:./freertos/src/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:./freertos/src/tasks.c **** 			task that is now in the Suspended state. */
1756:./freertos/src/tasks.c **** 			taskENTER_CRITICAL();
 1660              		.loc 1 1756 4
 1661 0096 FFF7FEFF 		bl	vPortEnterCritical
1757:./freertos/src/tasks.c **** 			{
1758:./freertos/src/tasks.c **** 				prvResetNextTaskUnblockTime();
 1662              		.loc 1 1758 5
 1663 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:./freertos/src/tasks.c **** 			}
1760:./freertos/src/tasks.c **** 			taskEXIT_CRITICAL();
 1664              		.loc 1 1760 4
 1665 009e FFF7FEFF 		bl	vPortExitCritical
 1666              	.L98:
1761:./freertos/src/tasks.c **** 		}
1762:./freertos/src/tasks.c **** 		else
1763:./freertos/src/tasks.c **** 		{
1764:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:./freertos/src/tasks.c **** 		}
1766:./freertos/src/tasks.c **** 
1767:./freertos/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1667              		.loc 1 1767 13
 1668 00a2 194B     		ldr	r3, .L105
 1669 00a4 1B68     		ldr	r3, [r3]
 1670              		.loc 1 1767 5
 1671 00a6 FA68     		ldr	r2, [r7, #12]
 1672 00a8 9A42     		cmp	r2, r3
 1673 00aa 28D1     		bne	.L104
1768:./freertos/src/tasks.c **** 		{
1769:./freertos/src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1674              		.loc 1 1769 26
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 65


 1675 00ac 1A4B     		ldr	r3, .L105+16
 1676 00ae 1B68     		ldr	r3, [r3]
 1677              		.loc 1 1769 6
 1678 00b0 002B     		cmp	r3, #0
 1679 00b2 18D0     		beq	.L100
1770:./freertos/src/tasks.c **** 			{
1771:./freertos/src/tasks.c **** 				/* The current task has just been suspended. */
1772:./freertos/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1680              		.loc 1 1772 5
 1681 00b4 194B     		ldr	r3, .L105+20
 1682 00b6 1B68     		ldr	r3, [r3]
 1683 00b8 002B     		cmp	r3, #0
 1684 00ba 0BD0     		beq	.L101
 1685              	.LBB119:
 1686              	.LBB120:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1687              		.loc 2 197 2
 1688              		.syntax unified
 1689              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1690 00bc 4FF05003 			mov r3, #80												
 1691 00c0 83F31188 		msr basepri, r3											
 1692 00c4 BFF36F8F 		isb														
 1693 00c8 BFF34F8F 		dsb														
 1694              	
 1695              	@ 0 "" 2
 1696              		.thumb
 1697              		.syntax unified
 1698 00cc BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1699              		.loc 2 205 1
 1700 00ce 00BF     		nop
 1701              	.L102:
 1702              	.LBE120:
 1703              	.LBE119:
 1704              		.loc 1 1772 5
 1705 00d0 00BF     		nop
 1706 00d2 FDE7     		b	.L102
 1707              	.L101:
1773:./freertos/src/tasks.c **** 				portYIELD_WITHIN_API();
 1708              		.loc 1 1773 5
 1709 00d4 124B     		ldr	r3, .L105+24
 1710 00d6 4FF08052 		mov	r2, #268435456
 1711 00da 1A60     		str	r2, [r3]
 1712              		.syntax unified
 1713              	@ 1773 "./freertos/src/tasks.c" 1
 1714 00dc BFF34F8F 		dsb
 1715              	@ 0 "" 2
 1716              	@ 1773 "./freertos/src/tasks.c" 1
 1717 00e0 BFF36F8F 		isb
 1718              	@ 0 "" 2
1774:./freertos/src/tasks.c **** 			}
1775:./freertos/src/tasks.c **** 			else
1776:./freertos/src/tasks.c **** 			{
1777:./freertos/src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:./freertos/src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:./freertos/src/tasks.c **** 				must be adjusted to point to a different task. */
1780:./freertos/src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 66


1781:./freertos/src/tasks.c **** 				{
1782:./freertos/src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:./freertos/src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:./freertos/src/tasks.c **** 					be set to point to it no matter what its relative priority
1785:./freertos/src/tasks.c **** 					is. */
1786:./freertos/src/tasks.c **** 					pxCurrentTCB = NULL;
1787:./freertos/src/tasks.c **** 				}
1788:./freertos/src/tasks.c **** 				else
1789:./freertos/src/tasks.c **** 				{
1790:./freertos/src/tasks.c **** 					vTaskSwitchContext();
1791:./freertos/src/tasks.c **** 				}
1792:./freertos/src/tasks.c **** 			}
1793:./freertos/src/tasks.c **** 		}
1794:./freertos/src/tasks.c **** 		else
1795:./freertos/src/tasks.c **** 		{
1796:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:./freertos/src/tasks.c **** 		}
1798:./freertos/src/tasks.c **** 	}
 1719              		.loc 1 1798 2
 1720              		.thumb
 1721              		.syntax unified
 1722 00e4 0BE0     		b	.L104
 1723              	.L100:
1780:./freertos/src/tasks.c **** 				{
 1724              		.loc 1 1780 9
 1725 00e6 0B4B     		ldr	r3, .L105+12
 1726 00e8 1A68     		ldr	r2, [r3]
1780:./freertos/src/tasks.c **** 				{
 1727              		.loc 1 1780 56
 1728 00ea 0E4B     		ldr	r3, .L105+28
 1729 00ec 1B68     		ldr	r3, [r3]
1780:./freertos/src/tasks.c **** 				{
 1730              		.loc 1 1780 7
 1731 00ee 9A42     		cmp	r2, r3
 1732 00f0 03D1     		bne	.L103
1786:./freertos/src/tasks.c **** 				}
 1733              		.loc 1 1786 19
 1734 00f2 054B     		ldr	r3, .L105
 1735 00f4 0022     		movs	r2, #0
 1736 00f6 1A60     		str	r2, [r3]
 1737              		.loc 1 1798 2
 1738 00f8 01E0     		b	.L104
 1739              	.L103:
1790:./freertos/src/tasks.c **** 				}
 1740              		.loc 1 1790 6
 1741 00fa FFF7FEFF 		bl	vTaskSwitchContext
 1742              	.L104:
 1743              		.loc 1 1798 2
 1744 00fe 00BF     		nop
 1745 0100 1037     		adds	r7, r7, #16
 1746              	.LCFI48:
 1747              		.cfi_def_cfa_offset 8
 1748 0102 BD46     		mov	sp, r7
 1749              	.LCFI49:
 1750              		.cfi_def_cfa_register 13
 1751              		@ sp needed
 1752 0104 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 67


 1753              	.L106:
 1754 0106 00BF     		.align	2
 1755              	.L105:
 1756 0108 00000000 		.word	pxCurrentTCB
 1757 010c 00000000 		.word	pxReadyTasksLists
 1758 0110 00000000 		.word	uxTopReadyPriority
 1759 0114 00000000 		.word	xSuspendedTaskList
 1760 0118 00000000 		.word	xSchedulerRunning
 1761 011c 00000000 		.word	uxSchedulerSuspended
 1762 0120 04ED00E0 		.word	-536810236
 1763 0124 00000000 		.word	uxCurrentNumberOfTasks
 1764              		.cfi_endproc
 1765              	.LFE70:
 1767              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1768              		.align	1
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1773              	prvTaskIsTaskSuspended:
 1774              	.LFB71:
1799:./freertos/src/tasks.c **** 
1800:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1802:./freertos/src/tasks.c **** 
1803:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:./freertos/src/tasks.c **** 
1805:./freertos/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:./freertos/src/tasks.c **** 	{
 1775              		.loc 1 1806 2
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 24
 1778              		@ frame_needed = 1, uses_anonymous_args = 0
 1779              		@ link register save eliminated.
 1780 0000 80B4     		push	{r7}
 1781              	.LCFI50:
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 0002 87B0     		sub	sp, sp, #28
 1785              	.LCFI51:
 1786              		.cfi_def_cfa_offset 32
 1787 0004 00AF     		add	r7, sp, #0
 1788              	.LCFI52:
 1789              		.cfi_def_cfa_register 7
 1790 0006 7860     		str	r0, [r7, #4]
1807:./freertos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1791              		.loc 1 1807 13
 1792 0008 0023     		movs	r3, #0
 1793 000a 7B61     		str	r3, [r7, #20]
1808:./freertos/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1794              		.loc 1 1808 22
 1795 000c 7B68     		ldr	r3, [r7, #4]
 1796 000e 3B61     		str	r3, [r7, #16]
1809:./freertos/src/tasks.c **** 
1810:./freertos/src/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:./freertos/src/tasks.c **** 		section. */
1812:./freertos/src/tasks.c **** 
1813:./freertos/src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 68


1814:./freertos/src/tasks.c **** 		configASSERT( xTask );
 1797              		.loc 1 1814 3
 1798 0010 7B68     		ldr	r3, [r7, #4]
 1799 0012 002B     		cmp	r3, #0
 1800 0014 0BD1     		bne	.L108
 1801              	.LBB121:
 1802              	.LBB122:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1803              		.loc 2 197 2
 1804              		.syntax unified
 1805              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1806 0016 4FF05003 			mov r3, #80												
 1807 001a 83F31188 		msr basepri, r3											
 1808 001e BFF36F8F 		isb														
 1809 0022 BFF34F8F 		dsb														
 1810              	
 1811              	@ 0 "" 2
 1812              		.thumb
 1813              		.syntax unified
 1814 0026 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1815              		.loc 2 205 1
 1816 0028 00BF     		nop
 1817              	.L109:
 1818              	.LBE122:
 1819              	.LBE121:
 1820              		.loc 1 1814 3
 1821 002a 00BF     		nop
 1822 002c FDE7     		b	.L109
 1823              	.L108:
1815:./freertos/src/tasks.c **** 
1816:./freertos/src/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:./freertos/src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1824              		.loc 1 1817 7
 1825 002e 3B69     		ldr	r3, [r7, #16]
 1826 0030 5B69     		ldr	r3, [r3, #20]
 1827              		.loc 1 1817 5
 1828 0032 0A4A     		ldr	r2, .L112
 1829 0034 9342     		cmp	r3, r2
 1830 0036 0AD1     		bne	.L110
1818:./freertos/src/tasks.c **** 		{
1819:./freertos/src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:./freertos/src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1831              		.loc 1 1820 8
 1832 0038 3B69     		ldr	r3, [r7, #16]
 1833 003a 9B6A     		ldr	r3, [r3, #40]
 1834              		.loc 1 1820 6
 1835 003c 084A     		ldr	r2, .L112+4
 1836 003e 9342     		cmp	r3, r2
 1837 0040 05D0     		beq	.L110
1821:./freertos/src/tasks.c **** 			{
1822:./freertos/src/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:./freertos/src/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:./freertos/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1838              		.loc 1 1824 9
 1839 0042 3B69     		ldr	r3, [r7, #16]
 1840 0044 9B6A     		ldr	r3, [r3, #40]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 69


 1841              		.loc 1 1824 7
 1842 0046 002B     		cmp	r3, #0
 1843 0048 01D1     		bne	.L110
1825:./freertos/src/tasks.c **** 				{
1826:./freertos/src/tasks.c **** 					xReturn = pdTRUE;
 1844              		.loc 1 1826 14
 1845 004a 0123     		movs	r3, #1
 1846 004c 7B61     		str	r3, [r7, #20]
 1847              	.L110:
1827:./freertos/src/tasks.c **** 				}
1828:./freertos/src/tasks.c **** 				else
1829:./freertos/src/tasks.c **** 				{
1830:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:./freertos/src/tasks.c **** 				}
1832:./freertos/src/tasks.c **** 			}
1833:./freertos/src/tasks.c **** 			else
1834:./freertos/src/tasks.c **** 			{
1835:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:./freertos/src/tasks.c **** 			}
1837:./freertos/src/tasks.c **** 		}
1838:./freertos/src/tasks.c **** 		else
1839:./freertos/src/tasks.c **** 		{
1840:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:./freertos/src/tasks.c **** 		}
1842:./freertos/src/tasks.c **** 
1843:./freertos/src/tasks.c **** 		return xReturn;
 1848              		.loc 1 1843 10
 1849 004e 7B69     		ldr	r3, [r7, #20]
1844:./freertos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1850              		.loc 1 1844 2
 1851 0050 1846     		mov	r0, r3
 1852 0052 1C37     		adds	r7, r7, #28
 1853              	.LCFI53:
 1854              		.cfi_def_cfa_offset 4
 1855 0054 BD46     		mov	sp, r7
 1856              	.LCFI54:
 1857              		.cfi_def_cfa_register 13
 1858              		@ sp needed
 1859 0056 80BC     		pop	{r7}
 1860              	.LCFI55:
 1861              		.cfi_restore 7
 1862              		.cfi_def_cfa_offset 0
 1863 0058 7047     		bx	lr
 1864              	.L113:
 1865 005a 00BF     		.align	2
 1866              	.L112:
 1867 005c 00000000 		.word	xSuspendedTaskList
 1868 0060 00000000 		.word	xPendingReadyList
 1869              		.cfi_endproc
 1870              	.LFE71:
 1872              		.section	.text.vTaskResume,"ax",%progbits
 1873              		.align	1
 1874              		.global	vTaskResume
 1875              		.syntax unified
 1876              		.thumb
 1877              		.thumb_func
 1879              	vTaskResume:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 70


 1880              	.LFB72:
1845:./freertos/src/tasks.c **** 
1846:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1848:./freertos/src/tasks.c **** 
1849:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:./freertos/src/tasks.c **** 
1851:./freertos/src/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:./freertos/src/tasks.c **** 	{
 1881              		.loc 1 1852 2
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 16
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885 0000 80B5     		push	{r7, lr}
 1886              	.LCFI56:
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 7, -8
 1889              		.cfi_offset 14, -4
 1890 0002 84B0     		sub	sp, sp, #16
 1891              	.LCFI57:
 1892              		.cfi_def_cfa_offset 24
 1893 0004 00AF     		add	r7, sp, #0
 1894              	.LCFI58:
 1895              		.cfi_def_cfa_register 7
 1896 0006 7860     		str	r0, [r7, #4]
1853:./freertos/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1897              		.loc 1 1853 16
 1898 0008 7B68     		ldr	r3, [r7, #4]
 1899 000a FB60     		str	r3, [r7, #12]
1854:./freertos/src/tasks.c **** 
1855:./freertos/src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:./freertos/src/tasks.c **** 		configASSERT( xTaskToResume );
 1900              		.loc 1 1856 3
 1901 000c 7B68     		ldr	r3, [r7, #4]
 1902 000e 002B     		cmp	r3, #0
 1903 0010 0BD1     		bne	.L115
 1904              	.LBB123:
 1905              	.LBB124:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1906              		.loc 2 197 2
 1907              		.syntax unified
 1908              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1909 0012 4FF05003 			mov r3, #80												
 1910 0016 83F31188 		msr basepri, r3											
 1911 001a BFF36F8F 		isb														
 1912 001e BFF34F8F 		dsb														
 1913              	
 1914              	@ 0 "" 2
 1915              		.thumb
 1916              		.syntax unified
 1917 0022 BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1918              		.loc 2 205 1
 1919 0024 00BF     		nop
 1920              	.L116:
 1921              	.LBE124:
 1922              	.LBE123:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 71


 1923              		.loc 1 1856 3
 1924 0026 00BF     		nop
 1925 0028 FDE7     		b	.L116
 1926              	.L115:
1857:./freertos/src/tasks.c **** 
1858:./freertos/src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:./freertos/src/tasks.c **** 		currently executing task. */
1860:./freertos/src/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1927              		.loc 1 1860 15
 1928 002a 204B     		ldr	r3, .L120
 1929 002c 1B68     		ldr	r3, [r3]
 1930              		.loc 1 1860 5
 1931 002e FA68     		ldr	r2, [r7, #12]
 1932 0030 9A42     		cmp	r2, r3
 1933 0032 37D0     		beq	.L119
 1934              		.loc 1 1860 33 discriminator 1
 1935 0034 FB68     		ldr	r3, [r7, #12]
 1936 0036 002B     		cmp	r3, #0
 1937 0038 34D0     		beq	.L119
1861:./freertos/src/tasks.c **** 		{
1862:./freertos/src/tasks.c **** 			taskENTER_CRITICAL();
 1938              		.loc 1 1862 4
 1939 003a FFF7FEFF 		bl	vPortEnterCritical
1863:./freertos/src/tasks.c **** 			{
1864:./freertos/src/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1940              		.loc 1 1864 9
 1941 003e F868     		ldr	r0, [r7, #12]
 1942 0040 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1943 0044 0346     		mov	r3, r0
 1944              		.loc 1 1864 7 discriminator 1
 1945 0046 002B     		cmp	r3, #0
 1946 0048 2AD0     		beq	.L118
1865:./freertos/src/tasks.c **** 				{
1866:./freertos/src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:./freertos/src/tasks.c **** 
1868:./freertos/src/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:./freertos/src/tasks.c **** 					suspended because this is inside a critical section. */
1870:./freertos/src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1947              		.loc 1 1870 15
 1948 004a FB68     		ldr	r3, [r7, #12]
 1949 004c 0433     		adds	r3, r3, #4
 1950 004e 1846     		mov	r0, r3
 1951 0050 FFF7FEFF 		bl	uxListRemove
1871:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1952              		.loc 1 1871 6
 1953 0054 FB68     		ldr	r3, [r7, #12]
 1954 0056 DB6A     		ldr	r3, [r3, #44]
 1955 0058 0122     		movs	r2, #1
 1956 005a 9A40     		lsls	r2, r2, r3
 1957 005c 144B     		ldr	r3, .L120+4
 1958 005e 1B68     		ldr	r3, [r3]
 1959 0060 1343     		orrs	r3, r3, r2
 1960 0062 134A     		ldr	r2, .L120+4
 1961 0064 1360     		str	r3, [r2]
 1962 0066 FB68     		ldr	r3, [r7, #12]
 1963 0068 DA6A     		ldr	r2, [r3, #44]
 1964 006a 1346     		mov	r3, r2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 72


 1965 006c 9B00     		lsls	r3, r3, #2
 1966 006e 1344     		add	r3, r3, r2
 1967 0070 9B00     		lsls	r3, r3, #2
 1968 0072 104A     		ldr	r2, .L120+8
 1969 0074 1A44     		add	r2, r2, r3
 1970 0076 FB68     		ldr	r3, [r7, #12]
 1971 0078 0433     		adds	r3, r3, #4
 1972 007a 1946     		mov	r1, r3
 1973 007c 1046     		mov	r0, r2
 1974 007e FFF7FEFF 		bl	vListInsertEnd
1872:./freertos/src/tasks.c **** 
1873:./freertos/src/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:./freertos/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1975              		.loc 1 1874 15
 1976 0082 FB68     		ldr	r3, [r7, #12]
 1977 0084 DA6A     		ldr	r2, [r3, #44]
 1978              		.loc 1 1874 43
 1979 0086 094B     		ldr	r3, .L120
 1980 0088 1B68     		ldr	r3, [r3]
 1981 008a DB6A     		ldr	r3, [r3, #44]
 1982              		.loc 1 1874 8
 1983 008c 9A42     		cmp	r2, r3
 1984 008e 07D3     		bcc	.L118
1875:./freertos/src/tasks.c **** 					{
1876:./freertos/src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:./freertos/src/tasks.c **** 						but will leave the lists in the correct state for the
1878:./freertos/src/tasks.c **** 						next yield. */
1879:./freertos/src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1985              		.loc 1 1879 7
 1986 0090 094B     		ldr	r3, .L120+12
 1987 0092 4FF08052 		mov	r2, #268435456
 1988 0096 1A60     		str	r2, [r3]
 1989              		.syntax unified
 1990              	@ 1879 "./freertos/src/tasks.c" 1
 1991 0098 BFF34F8F 		dsb
 1992              	@ 0 "" 2
 1993              	@ 1879 "./freertos/src/tasks.c" 1
 1994 009c BFF36F8F 		isb
 1995              	@ 0 "" 2
 1996              		.thumb
 1997              		.syntax unified
 1998              	.L118:
1880:./freertos/src/tasks.c **** 					}
1881:./freertos/src/tasks.c **** 					else
1882:./freertos/src/tasks.c **** 					{
1883:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:./freertos/src/tasks.c **** 					}
1885:./freertos/src/tasks.c **** 				}
1886:./freertos/src/tasks.c **** 				else
1887:./freertos/src/tasks.c **** 				{
1888:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:./freertos/src/tasks.c **** 				}
1890:./freertos/src/tasks.c **** 			}
1891:./freertos/src/tasks.c **** 			taskEXIT_CRITICAL();
 1999              		.loc 1 1891 4
 2000 00a0 FFF7FEFF 		bl	vPortExitCritical
 2001              	.L119:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 73


1892:./freertos/src/tasks.c **** 		}
1893:./freertos/src/tasks.c **** 		else
1894:./freertos/src/tasks.c **** 		{
1895:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:./freertos/src/tasks.c **** 		}
1897:./freertos/src/tasks.c **** 	}
 2002              		.loc 1 1897 2
 2003 00a4 00BF     		nop
 2004 00a6 1037     		adds	r7, r7, #16
 2005              	.LCFI59:
 2006              		.cfi_def_cfa_offset 8
 2007 00a8 BD46     		mov	sp, r7
 2008              	.LCFI60:
 2009              		.cfi_def_cfa_register 13
 2010              		@ sp needed
 2011 00aa 80BD     		pop	{r7, pc}
 2012              	.L121:
 2013              		.align	2
 2014              	.L120:
 2015 00ac 00000000 		.word	pxCurrentTCB
 2016 00b0 00000000 		.word	uxTopReadyPriority
 2017 00b4 00000000 		.word	pxReadyTasksLists
 2018 00b8 04ED00E0 		.word	-536810236
 2019              		.cfi_endproc
 2020              	.LFE72:
 2022              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2023              		.align	1
 2024              		.global	xTaskResumeFromISR
 2025              		.syntax unified
 2026              		.thumb
 2027              		.thumb_func
 2029              	xTaskResumeFromISR:
 2030              	.LFB73:
1898:./freertos/src/tasks.c **** 
1899:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:./freertos/src/tasks.c **** 
1901:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1902:./freertos/src/tasks.c **** 
1903:./freertos/src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:./freertos/src/tasks.c **** 
1905:./freertos/src/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:./freertos/src/tasks.c **** 	{
 2031              		.loc 1 1906 2
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 40
 2034              		@ frame_needed = 1, uses_anonymous_args = 0
 2035 0000 80B5     		push	{r7, lr}
 2036              	.LCFI61:
 2037              		.cfi_def_cfa_offset 8
 2038              		.cfi_offset 7, -8
 2039              		.cfi_offset 14, -4
 2040 0002 8AB0     		sub	sp, sp, #40
 2041              	.LCFI62:
 2042              		.cfi_def_cfa_offset 48
 2043 0004 00AF     		add	r7, sp, #0
 2044              	.LCFI63:
 2045              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 74


 2046 0006 7860     		str	r0, [r7, #4]
1907:./freertos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2047              		.loc 1 1907 13
 2048 0008 0023     		movs	r3, #0
 2049 000a 7B62     		str	r3, [r7, #36]
1908:./freertos/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2050              		.loc 1 1908 16
 2051 000c 7B68     		ldr	r3, [r7, #4]
 2052 000e 3B62     		str	r3, [r7, #32]
1909:./freertos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:./freertos/src/tasks.c **** 
1911:./freertos/src/tasks.c **** 		configASSERT( xTaskToResume );
 2053              		.loc 1 1911 3
 2054 0010 7B68     		ldr	r3, [r7, #4]
 2055 0012 002B     		cmp	r3, #0
 2056 0014 0BD1     		bne	.L123
 2057              	.LBB125:
 2058              	.LBB126:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2059              		.loc 2 197 2
 2060              		.syntax unified
 2061              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2062 0016 4FF05003 			mov r3, #80												
 2063 001a 83F31188 		msr basepri, r3											
 2064 001e BFF36F8F 		isb														
 2065 0022 BFF34F8F 		dsb														
 2066              	
 2067              	@ 0 "" 2
 2068              		.thumb
 2069              		.syntax unified
 2070 0026 BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2071              		.loc 2 205 1
 2072 0028 00BF     		nop
 2073              	.L124:
 2074              	.LBE126:
 2075              	.LBE125:
 2076              		.loc 1 1911 3
 2077 002a 00BF     		nop
 2078 002c FDE7     		b	.L124
 2079              	.L123:
1912:./freertos/src/tasks.c **** 
1913:./freertos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:./freertos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:./freertos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:./freertos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:./freertos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:./freertos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:./freertos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:./freertos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:./freertos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:./freertos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:./freertos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:./freertos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:./freertos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:./freertos/src/tasks.c **** 		provided on the following link:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 75


1928:./freertos/src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2080              		.loc 1 1929 3
 2081 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
 2082              	.LBB127:
 2083              	.LBB128:
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2084              		.loc 2 213 2
 2085              		.syntax unified
 2086              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2087 0032 EFF31182 			mrs r2, basepri											
 2088 0036 4FF05003 		mov r3, #80												
 2089 003a 83F31188 		msr basepri, r3											
 2090 003e BFF36F8F 		isb														
 2091 0042 BFF34F8F 		dsb														
 2092              	
 2093              	@ 0 "" 2
 2094              		.thumb
 2095              		.syntax unified
 2096 0046 7A61     		str	r2, [r7, #20]
 2097 0048 3B61     		str	r3, [r7, #16]
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 2098              		.loc 2 225 9
 2099 004a 7B69     		ldr	r3, [r7, #20]
 2100              	.LBE128:
 2101              	.LBE127:
1930:./freertos/src/tasks.c **** 
1931:./freertos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2102              		.loc 1 1931 28
 2103 004c FB61     		str	r3, [r7, #28]
1932:./freertos/src/tasks.c **** 		{
1933:./freertos/src/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2104              		.loc 1 1933 8
 2105 004e 386A     		ldr	r0, [r7, #32]
 2106 0050 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2107 0054 0346     		mov	r3, r0
 2108              		.loc 1 1933 6 discriminator 1
 2109 0056 002B     		cmp	r3, #0
 2110 0058 2FD0     		beq	.L126
1934:./freertos/src/tasks.c **** 			{
1935:./freertos/src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:./freertos/src/tasks.c **** 
1937:./freertos/src/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:./freertos/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2111              		.loc 1 1938 30
 2112 005a 1D4B     		ldr	r3, .L130
 2113 005c 1B68     		ldr	r3, [r3]
 2114              		.loc 1 1938 7
 2115 005e 002B     		cmp	r3, #0
 2116 0060 25D1     		bne	.L127
1939:./freertos/src/tasks.c **** 				{
1940:./freertos/src/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:./freertos/src/tasks.c **** 					suspended list to the ready list directly. */
1942:./freertos/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2117              		.loc 1 1942 15
 2118 0062 3B6A     		ldr	r3, [r7, #32]
 2119 0064 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 76


 2120              		.loc 1 1942 43
 2121 0066 1B4B     		ldr	r3, .L130+4
 2122 0068 1B68     		ldr	r3, [r3]
 2123 006a DB6A     		ldr	r3, [r3, #44]
 2124              		.loc 1 1942 8
 2125 006c 9A42     		cmp	r2, r3
 2126 006e 01D3     		bcc	.L128
1943:./freertos/src/tasks.c **** 					{
1944:./freertos/src/tasks.c **** 						xYieldRequired = pdTRUE;
 2127              		.loc 1 1944 22
 2128 0070 0123     		movs	r3, #1
 2129 0072 7B62     		str	r3, [r7, #36]
 2130              	.L128:
1945:./freertos/src/tasks.c **** 					}
1946:./freertos/src/tasks.c **** 					else
1947:./freertos/src/tasks.c **** 					{
1948:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:./freertos/src/tasks.c **** 					}
1950:./freertos/src/tasks.c **** 
1951:./freertos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2131              		.loc 1 1951 15
 2132 0074 3B6A     		ldr	r3, [r7, #32]
 2133 0076 0433     		adds	r3, r3, #4
 2134 0078 1846     		mov	r0, r3
 2135 007a FFF7FEFF 		bl	uxListRemove
1952:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2136              		.loc 1 1952 6
 2137 007e 3B6A     		ldr	r3, [r7, #32]
 2138 0080 DB6A     		ldr	r3, [r3, #44]
 2139 0082 0122     		movs	r2, #1
 2140 0084 9A40     		lsls	r2, r2, r3
 2141 0086 144B     		ldr	r3, .L130+8
 2142 0088 1B68     		ldr	r3, [r3]
 2143 008a 1343     		orrs	r3, r3, r2
 2144 008c 124A     		ldr	r2, .L130+8
 2145 008e 1360     		str	r3, [r2]
 2146 0090 3B6A     		ldr	r3, [r7, #32]
 2147 0092 DA6A     		ldr	r2, [r3, #44]
 2148 0094 1346     		mov	r3, r2
 2149 0096 9B00     		lsls	r3, r3, #2
 2150 0098 1344     		add	r3, r3, r2
 2151 009a 9B00     		lsls	r3, r3, #2
 2152 009c 0F4A     		ldr	r2, .L130+12
 2153 009e 1A44     		add	r2, r2, r3
 2154 00a0 3B6A     		ldr	r3, [r7, #32]
 2155 00a2 0433     		adds	r3, r3, #4
 2156 00a4 1946     		mov	r1, r3
 2157 00a6 1046     		mov	r0, r2
 2158 00a8 FFF7FEFF 		bl	vListInsertEnd
 2159 00ac 05E0     		b	.L126
 2160              	.L127:
1953:./freertos/src/tasks.c **** 				}
1954:./freertos/src/tasks.c **** 				else
1955:./freertos/src/tasks.c **** 				{
1956:./freertos/src/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:./freertos/src/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:./freertos/src/tasks.c **** 					unsuspended. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 77


1959:./freertos/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2161              		.loc 1 1959 6
 2162 00ae 3B6A     		ldr	r3, [r7, #32]
 2163 00b0 1833     		adds	r3, r3, #24
 2164 00b2 1946     		mov	r1, r3
 2165 00b4 0A48     		ldr	r0, .L130+16
 2166 00b6 FFF7FEFF 		bl	vListInsertEnd
 2167              	.L126:
 2168 00ba FB69     		ldr	r3, [r7, #28]
 2169 00bc FB60     		str	r3, [r7, #12]
 2170              	.LBB129:
 2171              	.LBB130:
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2172              		.loc 2 231 2
 2173 00be FB68     		ldr	r3, [r7, #12]
 2174              		.syntax unified
 2175              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2176 00c0 83F31188 			msr basepri, r3	
 2177              	@ 0 "" 2
 2178              		.loc 2 235 1
 2179              		.thumb
 2180              		.syntax unified
 2181 00c4 00BF     		nop
 2182              	.LBE130:
 2183              	.LBE129:
1960:./freertos/src/tasks.c **** 				}
1961:./freertos/src/tasks.c **** 			}
1962:./freertos/src/tasks.c **** 			else
1963:./freertos/src/tasks.c **** 			{
1964:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:./freertos/src/tasks.c **** 			}
1966:./freertos/src/tasks.c **** 		}
1967:./freertos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:./freertos/src/tasks.c **** 
1969:./freertos/src/tasks.c **** 		return xYieldRequired;
 2184              		.loc 1 1969 10
 2185 00c6 7B6A     		ldr	r3, [r7, #36]
1970:./freertos/src/tasks.c **** 	}
 2186              		.loc 1 1970 2
 2187 00c8 1846     		mov	r0, r3
 2188 00ca 2837     		adds	r7, r7, #40
 2189              	.LCFI64:
 2190              		.cfi_def_cfa_offset 8
 2191 00cc BD46     		mov	sp, r7
 2192              	.LCFI65:
 2193              		.cfi_def_cfa_register 13
 2194              		@ sp needed
 2195 00ce 80BD     		pop	{r7, pc}
 2196              	.L131:
 2197              		.align	2
 2198              	.L130:
 2199 00d0 00000000 		.word	uxSchedulerSuspended
 2200 00d4 00000000 		.word	pxCurrentTCB
 2201 00d8 00000000 		.word	uxTopReadyPriority
 2202 00dc 00000000 		.word	pxReadyTasksLists
 2203 00e0 00000000 		.word	xPendingReadyList
 2204              		.cfi_endproc
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 78


 2205              	.LFE73:
 2207              		.section	.rodata
 2208              		.align	2
 2209              	.LC0:
 2210 0000 49444C45 		.ascii	"IDLE\000"
 2210      00
 2211              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2212              		.align	1
 2213              		.global	vTaskStartScheduler
 2214              		.syntax unified
 2215              		.thumb
 2216              		.thumb_func
 2218              	vTaskStartScheduler:
 2219              	.LFB74:
1971:./freertos/src/tasks.c **** 
1972:./freertos/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
1974:./freertos/src/tasks.c **** 
1975:./freertos/src/tasks.c **** void vTaskStartScheduler( void )
1976:./freertos/src/tasks.c **** {
 2220              		.loc 1 1976 1
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 16
 2223              		@ frame_needed = 1, uses_anonymous_args = 0
 2224 0000 80B5     		push	{r7, lr}
 2225              	.LCFI66:
 2226              		.cfi_def_cfa_offset 8
 2227              		.cfi_offset 7, -8
 2228              		.cfi_offset 14, -4
 2229 0002 86B0     		sub	sp, sp, #24
 2230              	.LCFI67:
 2231              		.cfi_def_cfa_offset 32
 2232 0004 02AF     		add	r7, sp, #8
 2233              	.LCFI68:
 2234              		.cfi_def_cfa 7, 24
1977:./freertos/src/tasks.c **** BaseType_t xReturn;
1978:./freertos/src/tasks.c **** 
1979:./freertos/src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:./freertos/src/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:./freertos/src/tasks.c **** 	{
1982:./freertos/src/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:./freertos/src/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:./freertos/src/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:./freertos/src/tasks.c **** 
1986:./freertos/src/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:./freertos/src/tasks.c **** 		address of the RAM then create the idle task. */
1988:./freertos/src/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:./freertos/src/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:./freertos/src/tasks.c **** 												configIDLE_TASK_NAME,
1991:./freertos/src/tasks.c **** 												ulIdleTaskStackSize,
1992:./freertos/src/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:./freertos/src/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:./freertos/src/tasks.c **** 												pxIdleTaskStackBuffer,
1995:./freertos/src/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:./freertos/src/tasks.c **** 
1997:./freertos/src/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:./freertos/src/tasks.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 79


1999:./freertos/src/tasks.c **** 			xReturn = pdPASS;
2000:./freertos/src/tasks.c **** 		}
2001:./freertos/src/tasks.c **** 		else
2002:./freertos/src/tasks.c **** 		{
2003:./freertos/src/tasks.c **** 			xReturn = pdFAIL;
2004:./freertos/src/tasks.c **** 		}
2005:./freertos/src/tasks.c **** 	}
2006:./freertos/src/tasks.c **** 	#else
2007:./freertos/src/tasks.c **** 	{
2008:./freertos/src/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:./freertos/src/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2235              		.loc 1 2009 13
 2236 0006 204B     		ldr	r3, .L138
 2237 0008 0193     		str	r3, [sp, #4]
 2238 000a 0023     		movs	r3, #0
 2239 000c 0093     		str	r3, [sp]
 2240 000e 0023     		movs	r3, #0
 2241 0010 8022     		movs	r2, #128
 2242 0012 1E49     		ldr	r1, .L138+4
 2243 0014 1E48     		ldr	r0, .L138+8
 2244 0016 FFF7FEFF 		bl	xTaskCreate
 2245 001a F860     		str	r0, [r7, #12]
2010:./freertos/src/tasks.c **** 								configIDLE_TASK_NAME,
2011:./freertos/src/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:./freertos/src/tasks.c **** 								( void * ) NULL,
2013:./freertos/src/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:./freertos/src/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:./freertos/src/tasks.c **** 	}
2016:./freertos/src/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:./freertos/src/tasks.c **** 
2018:./freertos/src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:./freertos/src/tasks.c **** 	{
2020:./freertos/src/tasks.c **** 		if( xReturn == pdPASS )
 2246              		.loc 1 2020 5
 2247 001c FB68     		ldr	r3, [r7, #12]
 2248 001e 012B     		cmp	r3, #1
 2249 0020 02D1     		bne	.L133
2021:./freertos/src/tasks.c **** 		{
2022:./freertos/src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2250              		.loc 1 2022 14
 2251 0022 FFF7FEFF 		bl	xTimerCreateTimerTask
 2252 0026 F860     		str	r0, [r7, #12]
 2253              	.L133:
2023:./freertos/src/tasks.c **** 		}
2024:./freertos/src/tasks.c **** 		else
2025:./freertos/src/tasks.c **** 		{
2026:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:./freertos/src/tasks.c **** 		}
2028:./freertos/src/tasks.c **** 	}
2029:./freertos/src/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:./freertos/src/tasks.c **** 
2031:./freertos/src/tasks.c **** 	if( xReturn == pdPASS )
 2254              		.loc 1 2031 4
 2255 0028 FB68     		ldr	r3, [r7, #12]
 2256 002a 012B     		cmp	r3, #1
 2257 002c 18D1     		bne	.L134
 2258              	.LBB131:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 80


 2259              	.LBB132:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2260              		.loc 2 197 2
 2261              		.syntax unified
 2262              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2263 002e 4FF05003 			mov r3, #80												
 2264 0032 83F31188 		msr basepri, r3											
 2265 0036 BFF36F8F 		isb														
 2266 003a BFF34F8F 		dsb														
 2267              	
 2268              	@ 0 "" 2
 2269              		.thumb
 2270              		.syntax unified
 2271 003e BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2272              		.loc 2 205 1
 2273 0040 00BF     		nop
 2274              	.LBE132:
 2275              	.LBE131:
2032:./freertos/src/tasks.c **** 	{
2033:./freertos/src/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:./freertos/src/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:./freertos/src/tasks.c **** 		the only macro called by the function. */
2036:./freertos/src/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:./freertos/src/tasks.c **** 		{
2038:./freertos/src/tasks.c **** 			freertos_tasks_c_additions_init();
2039:./freertos/src/tasks.c **** 		}
2040:./freertos/src/tasks.c **** 		#endif
2041:./freertos/src/tasks.c **** 
2042:./freertos/src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:./freertos/src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:./freertos/src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:./freertos/src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:./freertos/src/tasks.c **** 		starts to run. */
2047:./freertos/src/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:./freertos/src/tasks.c **** 
2049:./freertos/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:./freertos/src/tasks.c **** 		{
2051:./freertos/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:./freertos/src/tasks.c **** 			structure specific to the task that will run first.
2053:./freertos/src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:./freertos/src/tasks.c **** 			for additional information. */
2055:./freertos/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:./freertos/src/tasks.c **** 		}
2057:./freertos/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:./freertos/src/tasks.c **** 
2059:./freertos/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2276              		.loc 1 2059 24
 2277 0042 144B     		ldr	r3, .L138+12
 2278 0044 4FF0FF32 		mov	r2, #-1
 2279 0048 1A60     		str	r2, [r3]
2060:./freertos/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2280              		.loc 1 2060 21
 2281 004a 134B     		ldr	r3, .L138+16
 2282 004c 0122     		movs	r2, #1
 2283 004e 1A60     		str	r2, [r3]
2061:./freertos/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 81


 2284              		.loc 1 2061 14
 2285 0050 124B     		ldr	r3, .L138+20
 2286 0052 0022     		movs	r2, #0
 2287 0054 1A60     		str	r2, [r3]
2062:./freertos/src/tasks.c **** 
2063:./freertos/src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:./freertos/src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:./freertos/src/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:./freertos/src/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:./freertos/src/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:./freertos/src/tasks.c **** 		FreeRTOSConfig.h file. */
2069:./freertos/src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 2288              		.loc 1 2069 3
 2289 0056 FFF7FEFF 		bl	configureTimerForRunTimeStats
2070:./freertos/src/tasks.c **** 
2071:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:./freertos/src/tasks.c **** 
2073:./freertos/src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:./freertos/src/tasks.c **** 		portable interface. */
2075:./freertos/src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2290              		.loc 1 2075 7
 2291 005a FFF7FEFF 		bl	xPortStartScheduler
2076:./freertos/src/tasks.c **** 		{
2077:./freertos/src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:./freertos/src/tasks.c **** 			function will not return. */
2079:./freertos/src/tasks.c **** 		}
2080:./freertos/src/tasks.c **** 		else
2081:./freertos/src/tasks.c **** 		{
2082:./freertos/src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:./freertos/src/tasks.c **** 		}
2084:./freertos/src/tasks.c **** 	}
2085:./freertos/src/tasks.c **** 	else
2086:./freertos/src/tasks.c **** 	{
2087:./freertos/src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:./freertos/src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:./freertos/src/tasks.c **** 		or the timer task. */
2090:./freertos/src/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:./freertos/src/tasks.c **** 	}
2092:./freertos/src/tasks.c **** 
2093:./freertos/src/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:./freertos/src/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:./freertos/src/tasks.c **** 	( void ) xIdleTaskHandle;
2096:./freertos/src/tasks.c **** }
 2292              		.loc 1 2096 1
 2293 005e 0FE0     		b	.L137
 2294              	.L134:
2090:./freertos/src/tasks.c **** 	}
 2295              		.loc 1 2090 3
 2296 0060 FB68     		ldr	r3, [r7, #12]
 2297 0062 B3F1FF3F 		cmp	r3, #-1
 2298 0066 0BD1     		bne	.L137
 2299              	.LBB133:
 2300              	.LBB134:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2301              		.loc 2 197 2
 2302              		.syntax unified
 2303              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 82


 2304 0068 4FF05003 			mov r3, #80												
 2305 006c 83F31188 		msr basepri, r3											
 2306 0070 BFF36F8F 		isb														
 2307 0074 BFF34F8F 		dsb														
 2308              	
 2309              	@ 0 "" 2
 2310              		.thumb
 2311              		.syntax unified
 2312 0078 7B60     		str	r3, [r7, #4]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2313              		.loc 2 205 1
 2314 007a 00BF     		nop
 2315              	.L136:
 2316              	.LBE134:
 2317              	.LBE133:
2090:./freertos/src/tasks.c **** 	}
 2318              		.loc 1 2090 3
 2319 007c 00BF     		nop
 2320 007e FDE7     		b	.L136
 2321              	.L137:
 2322              		.loc 1 2096 1
 2323 0080 00BF     		nop
 2324 0082 1037     		adds	r7, r7, #16
 2325              	.LCFI69:
 2326              		.cfi_def_cfa_offset 8
 2327 0084 BD46     		mov	sp, r7
 2328              	.LCFI70:
 2329              		.cfi_def_cfa_register 13
 2330              		@ sp needed
 2331 0086 80BD     		pop	{r7, pc}
 2332              	.L139:
 2333              		.align	2
 2334              	.L138:
 2335 0088 00000000 		.word	xIdleTaskHandle
 2336 008c 00000000 		.word	.LC0
 2337 0090 00000000 		.word	prvIdleTask
 2338 0094 00000000 		.word	xNextTaskUnblockTime
 2339 0098 00000000 		.word	xSchedulerRunning
 2340 009c 00000000 		.word	xTickCount
 2341              		.cfi_endproc
 2342              	.LFE74:
 2344              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2345              		.align	1
 2346              		.global	vTaskEndScheduler
 2347              		.syntax unified
 2348              		.thumb
 2349              		.thumb_func
 2351              	vTaskEndScheduler:
 2352              	.LFB75:
2097:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2098:./freertos/src/tasks.c **** 
2099:./freertos/src/tasks.c **** void vTaskEndScheduler( void )
2100:./freertos/src/tasks.c **** {
 2353              		.loc 1 2100 1
 2354              		.cfi_startproc
 2355              		@ args = 0, pretend = 0, frame = 8
 2356              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 83


 2357 0000 80B5     		push	{r7, lr}
 2358              	.LCFI71:
 2359              		.cfi_def_cfa_offset 8
 2360              		.cfi_offset 7, -8
 2361              		.cfi_offset 14, -4
 2362 0002 82B0     		sub	sp, sp, #8
 2363              	.LCFI72:
 2364              		.cfi_def_cfa_offset 16
 2365 0004 00AF     		add	r7, sp, #0
 2366              	.LCFI73:
 2367              		.cfi_def_cfa_register 7
 2368              	.LBB135:
 2369              	.LBB136:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2370              		.loc 2 197 2
 2371              		.syntax unified
 2372              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2373 0006 4FF05003 			mov r3, #80												
 2374 000a 83F31188 		msr basepri, r3											
 2375 000e BFF36F8F 		isb														
 2376 0012 BFF34F8F 		dsb														
 2377              	
 2378              	@ 0 "" 2
 2379              		.thumb
 2380              		.syntax unified
 2381 0016 7B60     		str	r3, [r7, #4]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2382              		.loc 2 205 1
 2383 0018 00BF     		nop
 2384              	.LBE136:
 2385              	.LBE135:
2101:./freertos/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:./freertos/src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:./freertos/src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:./freertos/src/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:./freertos/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2386              		.loc 1 2105 20
 2387 001a 044B     		ldr	r3, .L141
 2388 001c 0022     		movs	r2, #0
 2389 001e 1A60     		str	r2, [r3]
2106:./freertos/src/tasks.c **** 	vPortEndScheduler();
 2390              		.loc 1 2106 2
 2391 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:./freertos/src/tasks.c **** }
 2392              		.loc 1 2107 1
 2393 0024 00BF     		nop
 2394 0026 0837     		adds	r7, r7, #8
 2395              	.LCFI74:
 2396              		.cfi_def_cfa_offset 8
 2397 0028 BD46     		mov	sp, r7
 2398              	.LCFI75:
 2399              		.cfi_def_cfa_register 13
 2400              		@ sp needed
 2401 002a 80BD     		pop	{r7, pc}
 2402              	.L142:
 2403              		.align	2
 2404              	.L141:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 84


 2405 002c 00000000 		.word	xSchedulerRunning
 2406              		.cfi_endproc
 2407              	.LFE75:
 2409              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2410              		.align	1
 2411              		.global	vTaskSuspendAll
 2412              		.syntax unified
 2413              		.thumb
 2414              		.thumb_func
 2416              	vTaskSuspendAll:
 2417              	.LFB76:
2108:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2109:./freertos/src/tasks.c **** 
2110:./freertos/src/tasks.c **** void vTaskSuspendAll( void )
2111:./freertos/src/tasks.c **** {
 2418              		.loc 1 2111 1
 2419              		.cfi_startproc
 2420              		@ args = 0, pretend = 0, frame = 0
 2421              		@ frame_needed = 1, uses_anonymous_args = 0
 2422              		@ link register save eliminated.
 2423 0000 80B4     		push	{r7}
 2424              	.LCFI76:
 2425              		.cfi_def_cfa_offset 4
 2426              		.cfi_offset 7, -4
 2427 0002 00AF     		add	r7, sp, #0
 2428              	.LCFI77:
 2429              		.cfi_def_cfa_register 7
2112:./freertos/src/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:./freertos/src/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:./freertos/src/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:./freertos/src/tasks.c **** 	http://goo.gl/wu4acr */
2116:./freertos/src/tasks.c **** 
2117:./freertos/src/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:./freertos/src/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:./freertos/src/tasks.c **** 	portSOFTWARE_BARRIER();
2120:./freertos/src/tasks.c **** 
2121:./freertos/src/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:./freertos/src/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:./freertos/src/tasks.c **** 	++uxSchedulerSuspended;
 2430              		.loc 1 2123 2
 2431 0004 044B     		ldr	r3, .L144
 2432 0006 1B68     		ldr	r3, [r3]
 2433 0008 0133     		adds	r3, r3, #1
 2434 000a 034A     		ldr	r2, .L144
 2435 000c 1360     		str	r3, [r2]
2124:./freertos/src/tasks.c **** 
2125:./freertos/src/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:./freertos/src/tasks.c **** 	the above increment elsewhere. */
2127:./freertos/src/tasks.c **** 	portMEMORY_BARRIER();
 2436              		.loc 1 2127 2
2128:./freertos/src/tasks.c **** }
 2437              		.loc 1 2128 1
 2438 000e 00BF     		nop
 2439 0010 BD46     		mov	sp, r7
 2440              	.LCFI78:
 2441              		.cfi_def_cfa_register 13
 2442              		@ sp needed
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 85


 2443 0012 80BC     		pop	{r7}
 2444              	.LCFI79:
 2445              		.cfi_restore 7
 2446              		.cfi_def_cfa_offset 0
 2447 0014 7047     		bx	lr
 2448              	.L145:
 2449 0016 00BF     		.align	2
 2450              	.L144:
 2451 0018 00000000 		.word	uxSchedulerSuspended
 2452              		.cfi_endproc
 2453              	.LFE76:
 2455              		.section	.text.xTaskResumeAll,"ax",%progbits
 2456              		.align	1
 2457              		.global	xTaskResumeAll
 2458              		.syntax unified
 2459              		.thumb
 2460              		.thumb_func
 2462              	xTaskResumeAll:
 2463              	.LFB77:
2129:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2130:./freertos/src/tasks.c **** 
2131:./freertos/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:./freertos/src/tasks.c **** 
2133:./freertos/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:./freertos/src/tasks.c **** 	{
2135:./freertos/src/tasks.c **** 	TickType_t xReturn;
2136:./freertos/src/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:./freertos/src/tasks.c **** 
2138:./freertos/src/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:./freertos/src/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:./freertos/src/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:./freertos/src/tasks.c **** 		running. */
2142:./freertos/src/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:./freertos/src/tasks.c **** 		{
2144:./freertos/src/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:./freertos/src/tasks.c **** 			{
2146:./freertos/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:./freertos/src/tasks.c **** 			}
2148:./freertos/src/tasks.c **** 		}
2149:./freertos/src/tasks.c **** 		#else
2150:./freertos/src/tasks.c **** 		{
2151:./freertos/src/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:./freertos/src/tasks.c **** 
2153:./freertos/src/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:./freertos/src/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:./freertos/src/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:./freertos/src/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:./freertos/src/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:./freertos/src/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:./freertos/src/tasks.c **** 			{
2160:./freertos/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:./freertos/src/tasks.c **** 			}
2162:./freertos/src/tasks.c **** 		}
2163:./freertos/src/tasks.c **** 		#endif
2164:./freertos/src/tasks.c **** 
2165:./freertos/src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:./freertos/src/tasks.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 86


2167:./freertos/src/tasks.c **** 			xReturn = 0;
2168:./freertos/src/tasks.c **** 		}
2169:./freertos/src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:./freertos/src/tasks.c **** 		{
2171:./freertos/src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:./freertos/src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:./freertos/src/tasks.c **** 			processed. */
2174:./freertos/src/tasks.c **** 			xReturn = 0;
2175:./freertos/src/tasks.c **** 		}
2176:./freertos/src/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:./freertos/src/tasks.c **** 		{
2178:./freertos/src/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:./freertos/src/tasks.c **** 			idle priority.  This path can only be reached if
2180:./freertos/src/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:./freertos/src/tasks.c **** 			xReturn = 0;
2182:./freertos/src/tasks.c **** 		}
2183:./freertos/src/tasks.c **** 		else
2184:./freertos/src/tasks.c **** 		{
2185:./freertos/src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:./freertos/src/tasks.c **** 		}
2187:./freertos/src/tasks.c **** 
2188:./freertos/src/tasks.c **** 		return xReturn;
2189:./freertos/src/tasks.c **** 	}
2190:./freertos/src/tasks.c **** 
2191:./freertos/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2193:./freertos/src/tasks.c **** 
2194:./freertos/src/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:./freertos/src/tasks.c **** {
 2464              		.loc 1 2195 1
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 16
 2467              		@ frame_needed = 1, uses_anonymous_args = 0
 2468 0000 80B5     		push	{r7, lr}
 2469              	.LCFI80:
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 7, -8
 2472              		.cfi_offset 14, -4
 2473 0002 84B0     		sub	sp, sp, #16
 2474              	.LCFI81:
 2475              		.cfi_def_cfa_offset 24
 2476 0004 00AF     		add	r7, sp, #0
 2477              	.LCFI82:
 2478              		.cfi_def_cfa_register 7
2196:./freertos/src/tasks.c **** TCB_t *pxTCB = NULL;
 2479              		.loc 1 2196 8
 2480 0006 0023     		movs	r3, #0
 2481 0008 FB60     		str	r3, [r7, #12]
2197:./freertos/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2482              		.loc 1 2197 12
 2483 000a 0023     		movs	r3, #0
 2484 000c BB60     		str	r3, [r7, #8]
2198:./freertos/src/tasks.c **** 
2199:./freertos/src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:./freertos/src/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:./freertos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2485              		.loc 1 2201 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 87


 2486 000e 424B     		ldr	r3, .L158
 2487 0010 1B68     		ldr	r3, [r3]
 2488 0012 002B     		cmp	r3, #0
 2489 0014 0BD1     		bne	.L147
 2490              	.LBB137:
 2491              	.LBB138:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2492              		.loc 2 197 2
 2493              		.syntax unified
 2494              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2495 0016 4FF05003 			mov r3, #80												
 2496 001a 83F31188 		msr basepri, r3											
 2497 001e BFF36F8F 		isb														
 2498 0022 BFF34F8F 		dsb														
 2499              	
 2500              	@ 0 "" 2
 2501              		.thumb
 2502              		.syntax unified
 2503 0026 3B60     		str	r3, [r7]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2504              		.loc 2 205 1
 2505 0028 00BF     		nop
 2506              	.L148:
 2507              	.LBE138:
 2508              	.LBE137:
 2509              		.loc 1 2201 2
 2510 002a 00BF     		nop
 2511 002c FDE7     		b	.L148
 2512              	.L147:
2202:./freertos/src/tasks.c **** 
2203:./freertos/src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:./freertos/src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:./freertos/src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:./freertos/src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:./freertos/src/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:./freertos/src/tasks.c **** 	taskENTER_CRITICAL();
 2513              		.loc 1 2208 2
 2514 002e FFF7FEFF 		bl	vPortEnterCritical
2209:./freertos/src/tasks.c **** 	{
2210:./freertos/src/tasks.c **** 		--uxSchedulerSuspended;
 2515              		.loc 1 2210 3
 2516 0032 394B     		ldr	r3, .L158
 2517 0034 1B68     		ldr	r3, [r3]
 2518 0036 013B     		subs	r3, r3, #1
 2519 0038 374A     		ldr	r2, .L158
 2520 003a 1360     		str	r3, [r2]
2211:./freertos/src/tasks.c **** 
2212:./freertos/src/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2521              		.loc 1 2212 28
 2522 003c 364B     		ldr	r3, .L158
 2523 003e 1B68     		ldr	r3, [r3]
 2524              		.loc 1 2212 5
 2525 0040 002B     		cmp	r3, #0
 2526 0042 61D1     		bne	.L149
2213:./freertos/src/tasks.c **** 		{
2214:./freertos/src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2527              		.loc 1 2214 31
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 88


 2528 0044 354B     		ldr	r3, .L158+4
 2529 0046 1B68     		ldr	r3, [r3]
 2530              		.loc 1 2214 6
 2531 0048 002B     		cmp	r3, #0
 2532 004a 5DD0     		beq	.L149
2215:./freertos/src/tasks.c **** 			{
2216:./freertos/src/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:./freertos/src/tasks.c **** 				appropriate ready list. */
2218:./freertos/src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2533              		.loc 1 2218 10
 2534 004c 2EE0     		b	.L150
 2535              	.L152:
2219:./freertos/src/tasks.c **** 				{
2220:./freertos/src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2536              		.loc 1 2220 14
 2537 004e 344B     		ldr	r3, .L158+8
 2538 0050 DB68     		ldr	r3, [r3, #12]
 2539              		.loc 1 2220 12
 2540 0052 DB68     		ldr	r3, [r3, #12]
 2541 0054 FB60     		str	r3, [r7, #12]
2221:./freertos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2542              		.loc 1 2221 15
 2543 0056 FB68     		ldr	r3, [r7, #12]
 2544 0058 1833     		adds	r3, r3, #24
 2545 005a 1846     		mov	r0, r3
 2546 005c FFF7FEFF 		bl	uxListRemove
2222:./freertos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2547              		.loc 1 2222 15
 2548 0060 FB68     		ldr	r3, [r7, #12]
 2549 0062 0433     		adds	r3, r3, #4
 2550 0064 1846     		mov	r0, r3
 2551 0066 FFF7FEFF 		bl	uxListRemove
2223:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2552              		.loc 1 2223 6
 2553 006a FB68     		ldr	r3, [r7, #12]
 2554 006c DB6A     		ldr	r3, [r3, #44]
 2555 006e 0122     		movs	r2, #1
 2556 0070 9A40     		lsls	r2, r2, r3
 2557 0072 2C4B     		ldr	r3, .L158+12
 2558 0074 1B68     		ldr	r3, [r3]
 2559 0076 1343     		orrs	r3, r3, r2
 2560 0078 2A4A     		ldr	r2, .L158+12
 2561 007a 1360     		str	r3, [r2]
 2562 007c FB68     		ldr	r3, [r7, #12]
 2563 007e DA6A     		ldr	r2, [r3, #44]
 2564 0080 1346     		mov	r3, r2
 2565 0082 9B00     		lsls	r3, r3, #2
 2566 0084 1344     		add	r3, r3, r2
 2567 0086 9B00     		lsls	r3, r3, #2
 2568 0088 274A     		ldr	r2, .L158+16
 2569 008a 1A44     		add	r2, r2, r3
 2570 008c FB68     		ldr	r3, [r7, #12]
 2571 008e 0433     		adds	r3, r3, #4
 2572 0090 1946     		mov	r1, r3
 2573 0092 1046     		mov	r0, r2
 2574 0094 FFF7FEFF 		bl	vListInsertEnd
2224:./freertos/src/tasks.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 89


2225:./freertos/src/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:./freertos/src/tasks.c **** 					task then a yield must be performed. */
2227:./freertos/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2575              		.loc 1 2227 15
 2576 0098 FB68     		ldr	r3, [r7, #12]
 2577 009a DA6A     		ldr	r2, [r3, #44]
 2578              		.loc 1 2227 43
 2579 009c 234B     		ldr	r3, .L158+20
 2580 009e 1B68     		ldr	r3, [r3]
 2581 00a0 DB6A     		ldr	r3, [r3, #44]
 2582              		.loc 1 2227 8
 2583 00a2 9A42     		cmp	r2, r3
 2584 00a4 02D3     		bcc	.L150
2228:./freertos/src/tasks.c **** 					{
2229:./freertos/src/tasks.c **** 						xYieldPending = pdTRUE;
 2585              		.loc 1 2229 21
 2586 00a6 224B     		ldr	r3, .L158+24
 2587 00a8 0122     		movs	r2, #1
 2588 00aa 1A60     		str	r2, [r3]
 2589              	.L150:
2218:./freertos/src/tasks.c **** 				{
 2590              		.loc 1 2218 12
 2591 00ac 1C4B     		ldr	r3, .L158+8
 2592 00ae 1B68     		ldr	r3, [r3]
2218:./freertos/src/tasks.c **** 				{
 2593              		.loc 1 2218 52
 2594 00b0 002B     		cmp	r3, #0
 2595 00b2 CCD1     		bne	.L152
2230:./freertos/src/tasks.c **** 					}
2231:./freertos/src/tasks.c **** 					else
2232:./freertos/src/tasks.c **** 					{
2233:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:./freertos/src/tasks.c **** 					}
2235:./freertos/src/tasks.c **** 				}
2236:./freertos/src/tasks.c **** 
2237:./freertos/src/tasks.c **** 				if( pxTCB != NULL )
 2596              		.loc 1 2237 7
 2597 00b4 FB68     		ldr	r3, [r7, #12]
 2598 00b6 002B     		cmp	r3, #0
 2599 00b8 01D0     		beq	.L153
2238:./freertos/src/tasks.c **** 				{
2239:./freertos/src/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:./freertos/src/tasks.c **** 					which may have prevented the next unblock time from being
2241:./freertos/src/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:./freertos/src/tasks.c **** 					important for low power tickless implementations, where
2243:./freertos/src/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:./freertos/src/tasks.c **** 					state. */
2245:./freertos/src/tasks.c **** 					prvResetNextTaskUnblockTime();
 2600              		.loc 1 2245 6
 2601 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2602              	.L153:
 2603              	.LBB139:
2246:./freertos/src/tasks.c **** 				}
2247:./freertos/src/tasks.c **** 
2248:./freertos/src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:./freertos/src/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:./freertos/src/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 90


2251:./freertos/src/tasks.c **** 				time. */
2252:./freertos/src/tasks.c **** 				{
2253:./freertos/src/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2604              		.loc 1 2253 17
 2605 00be 1D4B     		ldr	r3, .L158+28
 2606 00c0 1B68     		ldr	r3, [r3]
 2607 00c2 7B60     		str	r3, [r7, #4]
2254:./freertos/src/tasks.c **** 
2255:./freertos/src/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2608              		.loc 1 2255 8
 2609 00c4 7B68     		ldr	r3, [r7, #4]
 2610 00c6 002B     		cmp	r3, #0
 2611 00c8 10D0     		beq	.L154
 2612              	.L156:
2256:./freertos/src/tasks.c **** 					{
2257:./freertos/src/tasks.c **** 						do
2258:./freertos/src/tasks.c **** 						{
2259:./freertos/src/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2613              		.loc 1 2259 12
 2614 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2615 00ce 0346     		mov	r3, r0
 2616              		.loc 1 2259 10 discriminator 1
 2617 00d0 002B     		cmp	r3, #0
 2618 00d2 02D0     		beq	.L155
2260:./freertos/src/tasks.c **** 							{
2261:./freertos/src/tasks.c **** 								xYieldPending = pdTRUE;
 2619              		.loc 1 2261 23
 2620 00d4 164B     		ldr	r3, .L158+24
 2621 00d6 0122     		movs	r2, #1
 2622 00d8 1A60     		str	r2, [r3]
 2623              	.L155:
2262:./freertos/src/tasks.c **** 							}
2263:./freertos/src/tasks.c **** 							else
2264:./freertos/src/tasks.c **** 							{
2265:./freertos/src/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:./freertos/src/tasks.c **** 							}
2267:./freertos/src/tasks.c **** 							--xPendedCounts;
 2624              		.loc 1 2267 8
 2625 00da 7B68     		ldr	r3, [r7, #4]
 2626 00dc 013B     		subs	r3, r3, #1
 2627 00de 7B60     		str	r3, [r7, #4]
2268:./freertos/src/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2628              		.loc 1 2268 30
 2629 00e0 7B68     		ldr	r3, [r7, #4]
 2630 00e2 002B     		cmp	r3, #0
 2631 00e4 F1D1     		bne	.L156
2269:./freertos/src/tasks.c **** 
2270:./freertos/src/tasks.c **** 						xPendedTicks = 0;
 2632              		.loc 1 2270 20
 2633 00e6 134B     		ldr	r3, .L158+28
 2634 00e8 0022     		movs	r2, #0
 2635 00ea 1A60     		str	r2, [r3]
 2636              	.L154:
 2637              	.LBE139:
2271:./freertos/src/tasks.c **** 					}
2272:./freertos/src/tasks.c **** 					else
2273:./freertos/src/tasks.c **** 					{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 91


2274:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:./freertos/src/tasks.c **** 					}
2276:./freertos/src/tasks.c **** 				}
2277:./freertos/src/tasks.c **** 
2278:./freertos/src/tasks.c **** 				if( xYieldPending != pdFALSE )
 2638              		.loc 1 2278 23
 2639 00ec 104B     		ldr	r3, .L158+24
 2640 00ee 1B68     		ldr	r3, [r3]
 2641              		.loc 1 2278 7
 2642 00f0 002B     		cmp	r3, #0
 2643 00f2 09D0     		beq	.L149
2279:./freertos/src/tasks.c **** 				{
2280:./freertos/src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:./freertos/src/tasks.c **** 					{
2282:./freertos/src/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2644              		.loc 1 2282 23
 2645 00f4 0123     		movs	r3, #1
 2646 00f6 BB60     		str	r3, [r7, #8]
2283:./freertos/src/tasks.c **** 					}
2284:./freertos/src/tasks.c **** 					#endif
2285:./freertos/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2647              		.loc 1 2285 6
 2648 00f8 0F4B     		ldr	r3, .L158+32
 2649 00fa 4FF08052 		mov	r2, #268435456
 2650 00fe 1A60     		str	r2, [r3]
 2651              		.syntax unified
 2652              	@ 2285 "./freertos/src/tasks.c" 1
 2653 0100 BFF34F8F 		dsb
 2654              	@ 0 "" 2
 2655              	@ 2285 "./freertos/src/tasks.c" 1
 2656 0104 BFF36F8F 		isb
 2657              	@ 0 "" 2
 2658              		.thumb
 2659              		.syntax unified
 2660              	.L149:
2286:./freertos/src/tasks.c **** 				}
2287:./freertos/src/tasks.c **** 				else
2288:./freertos/src/tasks.c **** 				{
2289:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:./freertos/src/tasks.c **** 				}
2291:./freertos/src/tasks.c **** 			}
2292:./freertos/src/tasks.c **** 		}
2293:./freertos/src/tasks.c **** 		else
2294:./freertos/src/tasks.c **** 		{
2295:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:./freertos/src/tasks.c **** 		}
2297:./freertos/src/tasks.c **** 	}
2298:./freertos/src/tasks.c **** 	taskEXIT_CRITICAL();
 2661              		.loc 1 2298 2
 2662 0108 FFF7FEFF 		bl	vPortExitCritical
2299:./freertos/src/tasks.c **** 
2300:./freertos/src/tasks.c **** 	return xAlreadyYielded;
 2663              		.loc 1 2300 9
 2664 010c BB68     		ldr	r3, [r7, #8]
2301:./freertos/src/tasks.c **** }
 2665              		.loc 1 2301 1
 2666 010e 1846     		mov	r0, r3
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 92


 2667 0110 1037     		adds	r7, r7, #16
 2668              	.LCFI83:
 2669              		.cfi_def_cfa_offset 8
 2670 0112 BD46     		mov	sp, r7
 2671              	.LCFI84:
 2672              		.cfi_def_cfa_register 13
 2673              		@ sp needed
 2674 0114 80BD     		pop	{r7, pc}
 2675              	.L159:
 2676 0116 00BF     		.align	2
 2677              	.L158:
 2678 0118 00000000 		.word	uxSchedulerSuspended
 2679 011c 00000000 		.word	uxCurrentNumberOfTasks
 2680 0120 00000000 		.word	xPendingReadyList
 2681 0124 00000000 		.word	uxTopReadyPriority
 2682 0128 00000000 		.word	pxReadyTasksLists
 2683 012c 00000000 		.word	pxCurrentTCB
 2684 0130 00000000 		.word	xYieldPending
 2685 0134 00000000 		.word	xPendedTicks
 2686 0138 04ED00E0 		.word	-536810236
 2687              		.cfi_endproc
 2688              	.LFE77:
 2690              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2691              		.align	1
 2692              		.global	xTaskGetTickCount
 2693              		.syntax unified
 2694              		.thumb
 2695              		.thumb_func
 2697              	xTaskGetTickCount:
 2698              	.LFB78:
2302:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2303:./freertos/src/tasks.c **** 
2304:./freertos/src/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:./freertos/src/tasks.c **** {
 2699              		.loc 1 2305 1
 2700              		.cfi_startproc
 2701              		@ args = 0, pretend = 0, frame = 8
 2702              		@ frame_needed = 1, uses_anonymous_args = 0
 2703              		@ link register save eliminated.
 2704 0000 80B4     		push	{r7}
 2705              	.LCFI85:
 2706              		.cfi_def_cfa_offset 4
 2707              		.cfi_offset 7, -4
 2708 0002 83B0     		sub	sp, sp, #12
 2709              	.LCFI86:
 2710              		.cfi_def_cfa_offset 16
 2711 0004 00AF     		add	r7, sp, #0
 2712              	.LCFI87:
 2713              		.cfi_def_cfa_register 7
2306:./freertos/src/tasks.c **** TickType_t xTicks;
2307:./freertos/src/tasks.c **** 
2308:./freertos/src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:./freertos/src/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:./freertos/src/tasks.c **** 	{
2311:./freertos/src/tasks.c **** 		xTicks = xTickCount;
 2714              		.loc 1 2311 10
 2715 0006 044B     		ldr	r3, .L162
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 93


 2716 0008 1B68     		ldr	r3, [r3]
 2717 000a 7B60     		str	r3, [r7, #4]
2312:./freertos/src/tasks.c **** 	}
2313:./freertos/src/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:./freertos/src/tasks.c **** 
2315:./freertos/src/tasks.c **** 	return xTicks;
 2718              		.loc 1 2315 9
 2719 000c 7B68     		ldr	r3, [r7, #4]
2316:./freertos/src/tasks.c **** }
 2720              		.loc 1 2316 1
 2721 000e 1846     		mov	r0, r3
 2722 0010 0C37     		adds	r7, r7, #12
 2723              	.LCFI88:
 2724              		.cfi_def_cfa_offset 4
 2725 0012 BD46     		mov	sp, r7
 2726              	.LCFI89:
 2727              		.cfi_def_cfa_register 13
 2728              		@ sp needed
 2729 0014 80BC     		pop	{r7}
 2730              	.LCFI90:
 2731              		.cfi_restore 7
 2732              		.cfi_def_cfa_offset 0
 2733 0016 7047     		bx	lr
 2734              	.L163:
 2735              		.align	2
 2736              	.L162:
 2737 0018 00000000 		.word	xTickCount
 2738              		.cfi_endproc
 2739              	.LFE78:
 2741              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2742              		.align	1
 2743              		.global	xTaskGetTickCountFromISR
 2744              		.syntax unified
 2745              		.thumb
 2746              		.thumb_func
 2748              	xTaskGetTickCountFromISR:
 2749              	.LFB79:
2317:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2318:./freertos/src/tasks.c **** 
2319:./freertos/src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:./freertos/src/tasks.c **** {
 2750              		.loc 1 2320 1
 2751              		.cfi_startproc
 2752              		@ args = 0, pretend = 0, frame = 8
 2753              		@ frame_needed = 1, uses_anonymous_args = 0
 2754 0000 80B5     		push	{r7, lr}
 2755              	.LCFI91:
 2756              		.cfi_def_cfa_offset 8
 2757              		.cfi_offset 7, -8
 2758              		.cfi_offset 14, -4
 2759 0002 82B0     		sub	sp, sp, #8
 2760              	.LCFI92:
 2761              		.cfi_def_cfa_offset 16
 2762 0004 00AF     		add	r7, sp, #0
 2763              	.LCFI93:
 2764              		.cfi_def_cfa_register 7
2321:./freertos/src/tasks.c **** TickType_t xReturn;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 94


2322:./freertos/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:./freertos/src/tasks.c **** 
2324:./freertos/src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:./freertos/src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:./freertos/src/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:./freertos/src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:./freertos/src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:./freertos/src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:./freertos/src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:./freertos/src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:./freertos/src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:./freertos/src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:./freertos/src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:./freertos/src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:./freertos/src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:./freertos/src/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:./freertos/src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2765              		.loc 1 2338 2
 2766 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:./freertos/src/tasks.c **** 
2340:./freertos/src/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2767              		.loc 1 2340 25
 2768 000a 0023     		movs	r3, #0
 2769 000c 7B60     		str	r3, [r7, #4]
2341:./freertos/src/tasks.c **** 	{
2342:./freertos/src/tasks.c **** 		xReturn = xTickCount;
 2770              		.loc 1 2342 11
 2771 000e 044B     		ldr	r3, .L166
 2772 0010 1B68     		ldr	r3, [r3]
 2773 0012 3B60     		str	r3, [r7]
2343:./freertos/src/tasks.c **** 	}
2344:./freertos/src/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:./freertos/src/tasks.c **** 
2346:./freertos/src/tasks.c **** 	return xReturn;
 2774              		.loc 1 2346 9
 2775 0014 3B68     		ldr	r3, [r7]
2347:./freertos/src/tasks.c **** }
 2776              		.loc 1 2347 1
 2777 0016 1846     		mov	r0, r3
 2778 0018 0837     		adds	r7, r7, #8
 2779              	.LCFI94:
 2780              		.cfi_def_cfa_offset 8
 2781 001a BD46     		mov	sp, r7
 2782              	.LCFI95:
 2783              		.cfi_def_cfa_register 13
 2784              		@ sp needed
 2785 001c 80BD     		pop	{r7, pc}
 2786              	.L167:
 2787 001e 00BF     		.align	2
 2788              	.L166:
 2789 0020 00000000 		.word	xTickCount
 2790              		.cfi_endproc
 2791              	.LFE79:
 2793              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2794              		.align	1
 2795              		.global	uxTaskGetNumberOfTasks
 2796              		.syntax unified
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 95


 2797              		.thumb
 2798              		.thumb_func
 2800              	uxTaskGetNumberOfTasks:
 2801              	.LFB80:
2348:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2349:./freertos/src/tasks.c **** 
2350:./freertos/src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:./freertos/src/tasks.c **** {
 2802              		.loc 1 2351 1
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 0
 2805              		@ frame_needed = 1, uses_anonymous_args = 0
 2806              		@ link register save eliminated.
 2807 0000 80B4     		push	{r7}
 2808              	.LCFI96:
 2809              		.cfi_def_cfa_offset 4
 2810              		.cfi_offset 7, -4
 2811 0002 00AF     		add	r7, sp, #0
 2812              	.LCFI97:
 2813              		.cfi_def_cfa_register 7
2352:./freertos/src/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:./freertos/src/tasks.c **** 	BaseType_t. */
2354:./freertos/src/tasks.c **** 	return uxCurrentNumberOfTasks;
 2814              		.loc 1 2354 9
 2815 0004 024B     		ldr	r3, .L170
 2816 0006 1B68     		ldr	r3, [r3]
2355:./freertos/src/tasks.c **** }
 2817              		.loc 1 2355 1
 2818 0008 1846     		mov	r0, r3
 2819 000a BD46     		mov	sp, r7
 2820              	.LCFI98:
 2821              		.cfi_def_cfa_register 13
 2822              		@ sp needed
 2823 000c 80BC     		pop	{r7}
 2824              	.LCFI99:
 2825              		.cfi_restore 7
 2826              		.cfi_def_cfa_offset 0
 2827 000e 7047     		bx	lr
 2828              	.L171:
 2829              		.align	2
 2830              	.L170:
 2831 0010 00000000 		.word	uxCurrentNumberOfTasks
 2832              		.cfi_endproc
 2833              	.LFE80:
 2835              		.section	.text.pcTaskGetName,"ax",%progbits
 2836              		.align	1
 2837              		.global	pcTaskGetName
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2842              	pcTaskGetName:
 2843              	.LFB81:
2356:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2357:./freertos/src/tasks.c **** 
2358:./freertos/src/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:./freertos/src/tasks.c **** {
 2844              		.loc 1 2359 1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 96


 2845              		.cfi_startproc
 2846              		@ args = 0, pretend = 0, frame = 16
 2847              		@ frame_needed = 1, uses_anonymous_args = 0
 2848              		@ link register save eliminated.
 2849 0000 80B4     		push	{r7}
 2850              	.LCFI100:
 2851              		.cfi_def_cfa_offset 4
 2852              		.cfi_offset 7, -4
 2853 0002 85B0     		sub	sp, sp, #20
 2854              	.LCFI101:
 2855              		.cfi_def_cfa_offset 24
 2856 0004 00AF     		add	r7, sp, #0
 2857              	.LCFI102:
 2858              		.cfi_def_cfa_register 7
 2859 0006 7860     		str	r0, [r7, #4]
2360:./freertos/src/tasks.c **** TCB_t *pxTCB;
2361:./freertos/src/tasks.c **** 
2362:./freertos/src/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:./freertos/src/tasks.c **** 	queried. */
2364:./freertos/src/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2860              		.loc 1 2364 10
 2861 0008 7B68     		ldr	r3, [r7, #4]
 2862 000a 002B     		cmp	r3, #0
 2863 000c 02D1     		bne	.L173
 2864              		.loc 1 2364 10 is_stmt 0 discriminator 1
 2865 000e 0D4B     		ldr	r3, .L178
 2866 0010 1B68     		ldr	r3, [r3]
 2867 0012 00E0     		b	.L174
 2868              	.L173:
 2869              		.loc 1 2364 10 discriminator 2
 2870 0014 7B68     		ldr	r3, [r7, #4]
 2871              	.L174:
 2872              		.loc 1 2364 8 is_stmt 1 discriminator 4
 2873 0016 FB60     		str	r3, [r7, #12]
2365:./freertos/src/tasks.c **** 	configASSERT( pxTCB );
 2874              		.loc 1 2365 2
 2875 0018 FB68     		ldr	r3, [r7, #12]
 2876 001a 002B     		cmp	r3, #0
 2877 001c 0BD1     		bne	.L175
 2878              	.LBB140:
 2879              	.LBB141:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2880              		.loc 2 197 2
 2881              		.syntax unified
 2882              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2883 001e 4FF05003 			mov r3, #80												
 2884 0022 83F31188 		msr basepri, r3											
 2885 0026 BFF36F8F 		isb														
 2886 002a BFF34F8F 		dsb														
 2887              	
 2888              	@ 0 "" 2
 2889              		.thumb
 2890              		.syntax unified
 2891 002e BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2892              		.loc 2 205 1
 2893 0030 00BF     		nop
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 97


 2894              	.L176:
 2895              	.LBE141:
 2896              	.LBE140:
 2897              		.loc 1 2365 2
 2898 0032 00BF     		nop
 2899 0034 FDE7     		b	.L176
 2900              	.L175:
2366:./freertos/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2901              		.loc 1 2366 9
 2902 0036 FB68     		ldr	r3, [r7, #12]
 2903 0038 3433     		adds	r3, r3, #52
2367:./freertos/src/tasks.c **** }
 2904              		.loc 1 2367 1
 2905 003a 1846     		mov	r0, r3
 2906 003c 1437     		adds	r7, r7, #20
 2907              	.LCFI103:
 2908              		.cfi_def_cfa_offset 4
 2909 003e BD46     		mov	sp, r7
 2910              	.LCFI104:
 2911              		.cfi_def_cfa_register 13
 2912              		@ sp needed
 2913 0040 80BC     		pop	{r7}
 2914              	.LCFI105:
 2915              		.cfi_restore 7
 2916              		.cfi_def_cfa_offset 0
 2917 0042 7047     		bx	lr
 2918              	.L179:
 2919              		.align	2
 2920              	.L178:
 2921 0044 00000000 		.word	pxCurrentTCB
 2922              		.cfi_endproc
 2923              	.LFE81:
 2925              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2926              		.align	1
 2927              		.global	uxTaskGetSystemState
 2928              		.syntax unified
 2929              		.thumb
 2930              		.thumb_func
 2932              	uxTaskGetSystemState:
 2933              	.LFB82:
2368:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2369:./freertos/src/tasks.c **** 
2370:./freertos/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:./freertos/src/tasks.c **** 
2372:./freertos/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:./freertos/src/tasks.c **** 	{
2374:./freertos/src/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:./freertos/src/tasks.c **** 	UBaseType_t x;
2376:./freertos/src/tasks.c **** 	char cNextChar;
2377:./freertos/src/tasks.c **** 	BaseType_t xBreakLoop;
2378:./freertos/src/tasks.c **** 
2379:./freertos/src/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:./freertos/src/tasks.c **** 
2381:./freertos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:./freertos/src/tasks.c **** 		{
2383:./freertos/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:./freertos/src/tasks.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 98


2385:./freertos/src/tasks.c **** 			do
2386:./freertos/src/tasks.c **** 			{
2387:./freertos/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:./freertos/src/tasks.c **** 
2389:./freertos/src/tasks.c **** 				/* Check each character in the name looking for a match or
2390:./freertos/src/tasks.c **** 				mismatch. */
2391:./freertos/src/tasks.c **** 				xBreakLoop = pdFALSE;
2392:./freertos/src/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:./freertos/src/tasks.c **** 				{
2394:./freertos/src/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:./freertos/src/tasks.c **** 
2396:./freertos/src/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:./freertos/src/tasks.c **** 					{
2398:./freertos/src/tasks.c **** 						/* Characters didn't match. */
2399:./freertos/src/tasks.c **** 						xBreakLoop = pdTRUE;
2400:./freertos/src/tasks.c **** 					}
2401:./freertos/src/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:./freertos/src/tasks.c **** 					{
2403:./freertos/src/tasks.c **** 						/* Both strings terminated, a match must have been
2404:./freertos/src/tasks.c **** 						found. */
2405:./freertos/src/tasks.c **** 						pxReturn = pxNextTCB;
2406:./freertos/src/tasks.c **** 						xBreakLoop = pdTRUE;
2407:./freertos/src/tasks.c **** 					}
2408:./freertos/src/tasks.c **** 					else
2409:./freertos/src/tasks.c **** 					{
2410:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:./freertos/src/tasks.c **** 					}
2412:./freertos/src/tasks.c **** 
2413:./freertos/src/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:./freertos/src/tasks.c **** 					{
2415:./freertos/src/tasks.c **** 						break;
2416:./freertos/src/tasks.c **** 					}
2417:./freertos/src/tasks.c **** 				}
2418:./freertos/src/tasks.c **** 
2419:./freertos/src/tasks.c **** 				if( pxReturn != NULL )
2420:./freertos/src/tasks.c **** 				{
2421:./freertos/src/tasks.c **** 					/* The handle has been found. */
2422:./freertos/src/tasks.c **** 					break;
2423:./freertos/src/tasks.c **** 				}
2424:./freertos/src/tasks.c **** 
2425:./freertos/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:./freertos/src/tasks.c **** 		}
2427:./freertos/src/tasks.c **** 		else
2428:./freertos/src/tasks.c **** 		{
2429:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:./freertos/src/tasks.c **** 		}
2431:./freertos/src/tasks.c **** 
2432:./freertos/src/tasks.c **** 		return pxReturn;
2433:./freertos/src/tasks.c **** 	}
2434:./freertos/src/tasks.c **** 
2435:./freertos/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2437:./freertos/src/tasks.c **** 
2438:./freertos/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:./freertos/src/tasks.c **** 
2440:./freertos/src/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:./freertos/src/tasks.c **** 	{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 99


2442:./freertos/src/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:./freertos/src/tasks.c **** 	TCB_t* pxTCB;
2444:./freertos/src/tasks.c **** 
2445:./freertos/src/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:./freertos/src/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:./freertos/src/tasks.c **** 
2448:./freertos/src/tasks.c **** 		vTaskSuspendAll();
2449:./freertos/src/tasks.c **** 		{
2450:./freertos/src/tasks.c **** 			/* Search the ready lists. */
2451:./freertos/src/tasks.c **** 			do
2452:./freertos/src/tasks.c **** 			{
2453:./freertos/src/tasks.c **** 				uxQueue--;
2454:./freertos/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:./freertos/src/tasks.c **** 
2456:./freertos/src/tasks.c **** 				if( pxTCB != NULL )
2457:./freertos/src/tasks.c **** 				{
2458:./freertos/src/tasks.c **** 					/* Found the handle. */
2459:./freertos/src/tasks.c **** 					break;
2460:./freertos/src/tasks.c **** 				}
2461:./freertos/src/tasks.c **** 
2462:./freertos/src/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:./freertos/src/tasks.c **** 
2464:./freertos/src/tasks.c **** 			/* Search the delayed lists. */
2465:./freertos/src/tasks.c **** 			if( pxTCB == NULL )
2466:./freertos/src/tasks.c **** 			{
2467:./freertos/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:./freertos/src/tasks.c **** 			}
2469:./freertos/src/tasks.c **** 
2470:./freertos/src/tasks.c **** 			if( pxTCB == NULL )
2471:./freertos/src/tasks.c **** 			{
2472:./freertos/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:./freertos/src/tasks.c **** 			}
2474:./freertos/src/tasks.c **** 
2475:./freertos/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:./freertos/src/tasks.c **** 			{
2477:./freertos/src/tasks.c **** 				if( pxTCB == NULL )
2478:./freertos/src/tasks.c **** 				{
2479:./freertos/src/tasks.c **** 					/* Search the suspended list. */
2480:./freertos/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:./freertos/src/tasks.c **** 				}
2482:./freertos/src/tasks.c **** 			}
2483:./freertos/src/tasks.c **** 			#endif
2484:./freertos/src/tasks.c **** 
2485:./freertos/src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:./freertos/src/tasks.c **** 			{
2487:./freertos/src/tasks.c **** 				if( pxTCB == NULL )
2488:./freertos/src/tasks.c **** 				{
2489:./freertos/src/tasks.c **** 					/* Search the deleted list. */
2490:./freertos/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:./freertos/src/tasks.c **** 				}
2492:./freertos/src/tasks.c **** 			}
2493:./freertos/src/tasks.c **** 			#endif
2494:./freertos/src/tasks.c **** 		}
2495:./freertos/src/tasks.c **** 		( void ) xTaskResumeAll();
2496:./freertos/src/tasks.c **** 
2497:./freertos/src/tasks.c **** 		return pxTCB;
2498:./freertos/src/tasks.c **** 	}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 100


2499:./freertos/src/tasks.c **** 
2500:./freertos/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2502:./freertos/src/tasks.c **** 
2503:./freertos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:./freertos/src/tasks.c **** 
2505:./freertos/src/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:./freertos/src/tasks.c **** 	{
 2934              		.loc 1 2506 2
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 24
 2937              		@ frame_needed = 1, uses_anonymous_args = 0
 2938 0000 80B5     		push	{r7, lr}
 2939              	.LCFI106:
 2940              		.cfi_def_cfa_offset 8
 2941              		.cfi_offset 7, -8
 2942              		.cfi_offset 14, -4
 2943 0002 86B0     		sub	sp, sp, #24
 2944              	.LCFI107:
 2945              		.cfi_def_cfa_offset 32
 2946 0004 00AF     		add	r7, sp, #0
 2947              	.LCFI108:
 2948              		.cfi_def_cfa_register 7
 2949 0006 F860     		str	r0, [r7, #12]
 2950 0008 B960     		str	r1, [r7, #8]
 2951 000a 7A60     		str	r2, [r7, #4]
2507:./freertos/src/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2952              		.loc 1 2507 14
 2953 000c 0023     		movs	r3, #0
 2954 000e 7B61     		str	r3, [r7, #20]
 2955              		.loc 1 2507 26
 2956 0010 0523     		movs	r3, #5
 2957 0012 3B61     		str	r3, [r7, #16]
2508:./freertos/src/tasks.c **** 
2509:./freertos/src/tasks.c **** 		vTaskSuspendAll();
 2958              		.loc 1 2509 3
 2959 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:./freertos/src/tasks.c **** 		{
2511:./freertos/src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:./freertos/src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2960              		.loc 1 2512 20
 2961 0018 3A4B     		ldr	r3, .L184
 2962 001a 1B68     		ldr	r3, [r3]
 2963              		.loc 1 2512 6
 2964 001c BA68     		ldr	r2, [r7, #8]
 2965 001e 9A42     		cmp	r2, r3
 2966 0020 68D3     		bcc	.L181
 2967              	.L182:
2513:./freertos/src/tasks.c **** 			{
2514:./freertos/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:./freertos/src/tasks.c **** 				task in the Ready state. */
2516:./freertos/src/tasks.c **** 				do
2517:./freertos/src/tasks.c **** 				{
2518:./freertos/src/tasks.c **** 					uxQueue--;
 2968              		.loc 1 2518 13
 2969 0022 3B69     		ldr	r3, [r7, #16]
 2970 0024 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 101


 2971 0026 3B61     		str	r3, [r7, #16]
2519:./freertos/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 2972              		.loc 1 2519 66
 2973 0028 7A69     		ldr	r2, [r7, #20]
 2974 002a 1346     		mov	r3, r2
 2975 002c DB00     		lsls	r3, r3, #3
 2976 002e 1344     		add	r3, r3, r2
 2977 0030 9B00     		lsls	r3, r3, #2
 2978 0032 1A46     		mov	r2, r3
 2979              		.loc 1 2519 46
 2980 0034 FB68     		ldr	r3, [r7, #12]
 2981 0036 9818     		adds	r0, r3, r2
 2982              		.loc 1 2519 16
 2983 0038 3A69     		ldr	r2, [r7, #16]
 2984 003a 1346     		mov	r3, r2
 2985 003c 9B00     		lsls	r3, r3, #2
 2986 003e 1344     		add	r3, r3, r2
 2987 0040 9B00     		lsls	r3, r3, #2
 2988 0042 314A     		ldr	r2, .L184+4
 2989 0044 1344     		add	r3, r3, r2
 2990 0046 0122     		movs	r2, #1
 2991 0048 1946     		mov	r1, r3
 2992 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 2993 004e 0246     		mov	r2, r0
 2994              		.loc 1 2519 13 discriminator 1
 2995 0050 7B69     		ldr	r3, [r7, #20]
 2996 0052 1344     		add	r3, r3, r2
 2997 0054 7B61     		str	r3, [r7, #20]
2520:./freertos/src/tasks.c **** 
2521:./freertos/src/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 2998              		.loc 1 2521 22 discriminator 1
 2999 0056 3B69     		ldr	r3, [r7, #16]
 3000 0058 002B     		cmp	r3, #0
 3001 005a E2D1     		bne	.L182
2522:./freertos/src/tasks.c **** 
2523:./freertos/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:./freertos/src/tasks.c **** 				task in the Blocked state. */
2525:./freertos/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3002              		.loc 1 2525 65
 3003 005c 7A69     		ldr	r2, [r7, #20]
 3004 005e 1346     		mov	r3, r2
 3005 0060 DB00     		lsls	r3, r3, #3
 3006 0062 1344     		add	r3, r3, r2
 3007 0064 9B00     		lsls	r3, r3, #2
 3008 0066 1A46     		mov	r2, r3
 3009              		.loc 1 2525 45
 3010 0068 FB68     		ldr	r3, [r7, #12]
 3011 006a 1344     		add	r3, r3, r2
 3012              		.loc 1 2525 15
 3013 006c 274A     		ldr	r2, .L184+8
 3014 006e 1168     		ldr	r1, [r2]
 3015 0070 0222     		movs	r2, #2
 3016 0072 1846     		mov	r0, r3
 3017 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3018 0078 0246     		mov	r2, r0
 3019              		.loc 1 2525 12 discriminator 1
 3020 007a 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 102


 3021 007c 1344     		add	r3, r3, r2
 3022 007e 7B61     		str	r3, [r7, #20]
2526:./freertos/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3023              		.loc 1 2526 65
 3024 0080 7A69     		ldr	r2, [r7, #20]
 3025 0082 1346     		mov	r3, r2
 3026 0084 DB00     		lsls	r3, r3, #3
 3027 0086 1344     		add	r3, r3, r2
 3028 0088 9B00     		lsls	r3, r3, #2
 3029 008a 1A46     		mov	r2, r3
 3030              		.loc 1 2526 45
 3031 008c FB68     		ldr	r3, [r7, #12]
 3032 008e 1344     		add	r3, r3, r2
 3033              		.loc 1 2526 15
 3034 0090 1F4A     		ldr	r2, .L184+12
 3035 0092 1168     		ldr	r1, [r2]
 3036 0094 0222     		movs	r2, #2
 3037 0096 1846     		mov	r0, r3
 3038 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3039 009c 0246     		mov	r2, r0
 3040              		.loc 1 2526 12 discriminator 1
 3041 009e 7B69     		ldr	r3, [r7, #20]
 3042 00a0 1344     		add	r3, r3, r2
 3043 00a2 7B61     		str	r3, [r7, #20]
2527:./freertos/src/tasks.c **** 
2528:./freertos/src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:./freertos/src/tasks.c **** 				{
2530:./freertos/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:./freertos/src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:./freertos/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3044              		.loc 1 2532 66
 3045 00a4 7A69     		ldr	r2, [r7, #20]
 3046 00a6 1346     		mov	r3, r2
 3047 00a8 DB00     		lsls	r3, r3, #3
 3048 00aa 1344     		add	r3, r3, r2
 3049 00ac 9B00     		lsls	r3, r3, #2
 3050 00ae 1A46     		mov	r2, r3
 3051              		.loc 1 2532 46
 3052 00b0 FB68     		ldr	r3, [r7, #12]
 3053 00b2 1344     		add	r3, r3, r2
 3054              		.loc 1 2532 16
 3055 00b4 0422     		movs	r2, #4
 3056 00b6 1749     		ldr	r1, .L184+16
 3057 00b8 1846     		mov	r0, r3
 3058 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3059 00be 0246     		mov	r2, r0
 3060              		.loc 1 2532 13 discriminator 1
 3061 00c0 7B69     		ldr	r3, [r7, #20]
 3062 00c2 1344     		add	r3, r3, r2
 3063 00c4 7B61     		str	r3, [r7, #20]
2533:./freertos/src/tasks.c **** 				}
2534:./freertos/src/tasks.c **** 				#endif
2535:./freertos/src/tasks.c **** 
2536:./freertos/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:./freertos/src/tasks.c **** 				{
2538:./freertos/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:./freertos/src/tasks.c **** 					each task in the Suspended state. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 103


2540:./freertos/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3064              		.loc 1 2540 66
 3065 00c6 7A69     		ldr	r2, [r7, #20]
 3066 00c8 1346     		mov	r3, r2
 3067 00ca DB00     		lsls	r3, r3, #3
 3068 00cc 1344     		add	r3, r3, r2
 3069 00ce 9B00     		lsls	r3, r3, #2
 3070 00d0 1A46     		mov	r2, r3
 3071              		.loc 1 2540 46
 3072 00d2 FB68     		ldr	r3, [r7, #12]
 3073 00d4 1344     		add	r3, r3, r2
 3074              		.loc 1 2540 16
 3075 00d6 0322     		movs	r2, #3
 3076 00d8 0F49     		ldr	r1, .L184+20
 3077 00da 1846     		mov	r0, r3
 3078 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3079 00e0 0246     		mov	r2, r0
 3080              		.loc 1 2540 13 discriminator 1
 3081 00e2 7B69     		ldr	r3, [r7, #20]
 3082 00e4 1344     		add	r3, r3, r2
 3083 00e6 7B61     		str	r3, [r7, #20]
2541:./freertos/src/tasks.c **** 				}
2542:./freertos/src/tasks.c **** 				#endif
2543:./freertos/src/tasks.c **** 
2544:./freertos/src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:./freertos/src/tasks.c **** 				{
2546:./freertos/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:./freertos/src/tasks.c **** 					{
2548:./freertos/src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:./freertos/src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:./freertos/src/tasks.c **** 						#else
2551:./freertos/src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:./freertos/src/tasks.c **** 						#endif
2553:./freertos/src/tasks.c **** 					}
2554:./freertos/src/tasks.c **** 				}
2555:./freertos/src/tasks.c **** 				#else
2556:./freertos/src/tasks.c **** 				{
2557:./freertos/src/tasks.c **** 					if( pulTotalRunTime != NULL )
 3084              		.loc 1 2557 8
 3085 00e8 7B68     		ldr	r3, [r7, #4]
 3086 00ea 002B     		cmp	r3, #0
 3087 00ec 02D0     		beq	.L181
2558:./freertos/src/tasks.c **** 					{
2559:./freertos/src/tasks.c **** 						*pulTotalRunTime = 0;
 3088              		.loc 1 2559 24
 3089 00ee 7B68     		ldr	r3, [r7, #4]
 3090 00f0 0022     		movs	r2, #0
 3091 00f2 1A60     		str	r2, [r3]
 3092              	.L181:
2560:./freertos/src/tasks.c **** 					}
2561:./freertos/src/tasks.c **** 				}
2562:./freertos/src/tasks.c **** 				#endif
2563:./freertos/src/tasks.c **** 			}
2564:./freertos/src/tasks.c **** 			else
2565:./freertos/src/tasks.c **** 			{
2566:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:./freertos/src/tasks.c **** 			}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 104


2568:./freertos/src/tasks.c **** 		}
2569:./freertos/src/tasks.c **** 		( void ) xTaskResumeAll();
 3093              		.loc 1 2569 12
 3094 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:./freertos/src/tasks.c **** 
2571:./freertos/src/tasks.c **** 		return uxTask;
 3095              		.loc 1 2571 10
 3096 00f8 7B69     		ldr	r3, [r7, #20]
2572:./freertos/src/tasks.c **** 	}
 3097              		.loc 1 2572 2
 3098 00fa 1846     		mov	r0, r3
 3099 00fc 1837     		adds	r7, r7, #24
 3100              	.LCFI109:
 3101              		.cfi_def_cfa_offset 8
 3102 00fe BD46     		mov	sp, r7
 3103              	.LCFI110:
 3104              		.cfi_def_cfa_register 13
 3105              		@ sp needed
 3106 0100 80BD     		pop	{r7, pc}
 3107              	.L185:
 3108 0102 00BF     		.align	2
 3109              	.L184:
 3110 0104 00000000 		.word	uxCurrentNumberOfTasks
 3111 0108 00000000 		.word	pxReadyTasksLists
 3112 010c 00000000 		.word	pxDelayedTaskList
 3113 0110 00000000 		.word	pxOverflowDelayedTaskList
 3114 0114 00000000 		.word	xTasksWaitingTermination
 3115 0118 00000000 		.word	xSuspendedTaskList
 3116              		.cfi_endproc
 3117              	.LFE82:
 3119              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3120              		.align	1
 3121              		.global	xTaskCatchUpTicks
 3122              		.syntax unified
 3123              		.thumb
 3124              		.thumb_func
 3126              	xTaskCatchUpTicks:
 3127              	.LFB83:
2573:./freertos/src/tasks.c **** 
2574:./freertos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2576:./freertos/src/tasks.c **** 
2577:./freertos/src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:./freertos/src/tasks.c **** 
2579:./freertos/src/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:./freertos/src/tasks.c **** 	{
2581:./freertos/src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:./freertos/src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:./freertos/src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:./freertos/src/tasks.c **** 		return xIdleTaskHandle;
2585:./freertos/src/tasks.c **** 	}
2586:./freertos/src/tasks.c **** 
2587:./freertos/src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2589:./freertos/src/tasks.c **** 
2590:./freertos/src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:./freertos/src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 105


2592:./freertos/src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:./freertos/src/tasks.c **** 1. */
2594:./freertos/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:./freertos/src/tasks.c **** 
2596:./freertos/src/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:./freertos/src/tasks.c **** 	{
2598:./freertos/src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:./freertos/src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:./freertos/src/tasks.c **** 		each stepped tick. */
2601:./freertos/src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:./freertos/src/tasks.c **** 		xTickCount += xTicksToJump;
2603:./freertos/src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:./freertos/src/tasks.c **** 	}
2605:./freertos/src/tasks.c **** 
2606:./freertos/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2608:./freertos/src/tasks.c **** 
2609:./freertos/src/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:./freertos/src/tasks.c **** {
 3128              		.loc 1 2610 1
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 16
 3131              		@ frame_needed = 1, uses_anonymous_args = 0
 3132 0000 80B5     		push	{r7, lr}
 3133              	.LCFI111:
 3134              		.cfi_def_cfa_offset 8
 3135              		.cfi_offset 7, -8
 3136              		.cfi_offset 14, -4
 3137 0002 84B0     		sub	sp, sp, #16
 3138              	.LCFI112:
 3139              		.cfi_def_cfa_offset 24
 3140 0004 00AF     		add	r7, sp, #0
 3141              	.LCFI113:
 3142              		.cfi_def_cfa_register 7
 3143 0006 7860     		str	r0, [r7, #4]
2611:./freertos/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3144              		.loc 1 2611 12
 3145 0008 0023     		movs	r3, #0
 3146 000a FB60     		str	r3, [r7, #12]
2612:./freertos/src/tasks.c **** 
2613:./freertos/src/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:./freertos/src/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:./freertos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3147              		.loc 1 2615 2
 3148 000c 0F4B     		ldr	r3, .L190
 3149 000e 1B68     		ldr	r3, [r3]
 3150 0010 002B     		cmp	r3, #0
 3151 0012 0BD0     		beq	.L187
 3152              	.LBB142:
 3153              	.LBB143:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3154              		.loc 2 197 2
 3155              		.syntax unified
 3156              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3157 0014 4FF05003 			mov r3, #80												
 3158 0018 83F31188 		msr basepri, r3											
 3159 001c BFF36F8F 		isb														
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 106


 3160 0020 BFF34F8F 		dsb														
 3161              	
 3162              	@ 0 "" 2
 3163              		.thumb
 3164              		.syntax unified
 3165 0024 BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3166              		.loc 2 205 1
 3167 0026 00BF     		nop
 3168              	.L188:
 3169              	.LBE143:
 3170              	.LBE142:
 3171              		.loc 1 2615 2
 3172 0028 00BF     		nop
 3173 002a FDE7     		b	.L188
 3174              	.L187:
2616:./freertos/src/tasks.c **** 
2617:./freertos/src/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:./freertos/src/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:./freertos/src/tasks.c **** 	vTaskSuspendAll();
 3175              		.loc 1 2619 2
 3176 002c FFF7FEFF 		bl	vTaskSuspendAll
2620:./freertos/src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3177              		.loc 1 2620 15
 3178 0030 074B     		ldr	r3, .L190+4
 3179 0032 1A68     		ldr	r2, [r3]
 3180 0034 7B68     		ldr	r3, [r7, #4]
 3181 0036 1344     		add	r3, r3, r2
 3182 0038 054A     		ldr	r2, .L190+4
 3183 003a 1360     		str	r3, [r2]
2621:./freertos/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3184              		.loc 1 2621 19
 3185 003c FFF7FEFF 		bl	xTaskResumeAll
 3186 0040 F860     		str	r0, [r7, #12]
2622:./freertos/src/tasks.c **** 
2623:./freertos/src/tasks.c **** 	return xYieldRequired;
 3187              		.loc 1 2623 9
 3188 0042 FB68     		ldr	r3, [r7, #12]
2624:./freertos/src/tasks.c **** }
 3189              		.loc 1 2624 1
 3190 0044 1846     		mov	r0, r3
 3191 0046 1037     		adds	r7, r7, #16
 3192              	.LCFI114:
 3193              		.cfi_def_cfa_offset 8
 3194 0048 BD46     		mov	sp, r7
 3195              	.LCFI115:
 3196              		.cfi_def_cfa_register 13
 3197              		@ sp needed
 3198 004a 80BD     		pop	{r7, pc}
 3199              	.L191:
 3200              		.align	2
 3201              	.L190:
 3202 004c 00000000 		.word	uxSchedulerSuspended
 3203 0050 00000000 		.word	xPendedTicks
 3204              		.cfi_endproc
 3205              	.LFE83:
 3207              		.section	.text.xTaskIncrementTick,"ax",%progbits
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 107


 3208              		.align	1
 3209              		.global	xTaskIncrementTick
 3210              		.syntax unified
 3211              		.thumb
 3212              		.thumb_func
 3214              	xTaskIncrementTick:
 3215              	.LFB84:
2625:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2626:./freertos/src/tasks.c **** 
2627:./freertos/src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:./freertos/src/tasks.c **** 
2629:./freertos/src/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:./freertos/src/tasks.c **** 	{
2631:./freertos/src/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:./freertos/src/tasks.c **** 	BaseType_t xReturn;
2633:./freertos/src/tasks.c **** 
2634:./freertos/src/tasks.c **** 		configASSERT( pxTCB );
2635:./freertos/src/tasks.c **** 
2636:./freertos/src/tasks.c **** 		vTaskSuspendAll();
2637:./freertos/src/tasks.c **** 		{
2638:./freertos/src/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:./freertos/src/tasks.c **** 			it is actually in the Blocked state. */
2640:./freertos/src/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:./freertos/src/tasks.c **** 			{
2642:./freertos/src/tasks.c **** 				xReturn = pdPASS;
2643:./freertos/src/tasks.c **** 
2644:./freertos/src/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:./freertos/src/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:./freertos/src/tasks.c **** 				scheduler is suspended. */
2647:./freertos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:./freertos/src/tasks.c **** 
2649:./freertos/src/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:./freertos/src/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:./freertos/src/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:./freertos/src/tasks.c **** 				is used. */
2653:./freertos/src/tasks.c **** 				taskENTER_CRITICAL();
2654:./freertos/src/tasks.c **** 				{
2655:./freertos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:./freertos/src/tasks.c **** 					{
2657:./freertos/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:./freertos/src/tasks.c **** 
2659:./freertos/src/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:./freertos/src/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:./freertos/src/tasks.c **** 						then block again. */
2662:./freertos/src/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:./freertos/src/tasks.c **** 					}
2664:./freertos/src/tasks.c **** 					else
2665:./freertos/src/tasks.c **** 					{
2666:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:./freertos/src/tasks.c **** 					}
2668:./freertos/src/tasks.c **** 				}
2669:./freertos/src/tasks.c **** 				taskEXIT_CRITICAL();
2670:./freertos/src/tasks.c **** 
2671:./freertos/src/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:./freertos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:./freertos/src/tasks.c **** 
2674:./freertos/src/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 108


2675:./freertos/src/tasks.c **** 				switch if preemption is turned off. */
2676:./freertos/src/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:./freertos/src/tasks.c **** 				{
2678:./freertos/src/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:./freertos/src/tasks.c **** 					performed if the unblocked task has a priority that is
2680:./freertos/src/tasks.c **** 					equal to or higher than the currently executing task. */
2681:./freertos/src/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:./freertos/src/tasks.c **** 					{
2683:./freertos/src/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:./freertos/src/tasks.c **** 						is unsuspended. */
2685:./freertos/src/tasks.c **** 						xYieldPending = pdTRUE;
2686:./freertos/src/tasks.c **** 					}
2687:./freertos/src/tasks.c **** 					else
2688:./freertos/src/tasks.c **** 					{
2689:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:./freertos/src/tasks.c **** 					}
2691:./freertos/src/tasks.c **** 				}
2692:./freertos/src/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:./freertos/src/tasks.c **** 			}
2694:./freertos/src/tasks.c **** 			else
2695:./freertos/src/tasks.c **** 			{
2696:./freertos/src/tasks.c **** 				xReturn = pdFAIL;
2697:./freertos/src/tasks.c **** 			}
2698:./freertos/src/tasks.c **** 		}
2699:./freertos/src/tasks.c **** 		( void ) xTaskResumeAll();
2700:./freertos/src/tasks.c **** 
2701:./freertos/src/tasks.c **** 		return xReturn;
2702:./freertos/src/tasks.c **** 	}
2703:./freertos/src/tasks.c **** 
2704:./freertos/src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
2706:./freertos/src/tasks.c **** 
2707:./freertos/src/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:./freertos/src/tasks.c **** {
 3216              		.loc 1 2708 1
 3217              		.cfi_startproc
 3218              		@ args = 0, pretend = 0, frame = 24
 3219              		@ frame_needed = 1, uses_anonymous_args = 0
 3220 0000 80B5     		push	{r7, lr}
 3221              	.LCFI116:
 3222              		.cfi_def_cfa_offset 8
 3223              		.cfi_offset 7, -8
 3224              		.cfi_offset 14, -4
 3225 0002 86B0     		sub	sp, sp, #24
 3226              	.LCFI117:
 3227              		.cfi_def_cfa_offset 32
 3228 0004 00AF     		add	r7, sp, #0
 3229              	.LCFI118:
 3230              		.cfi_def_cfa_register 7
2709:./freertos/src/tasks.c **** TCB_t * pxTCB;
2710:./freertos/src/tasks.c **** TickType_t xItemValue;
2711:./freertos/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3231              		.loc 1 2711 12
 3232 0006 0023     		movs	r3, #0
 3233 0008 7B61     		str	r3, [r7, #20]
2712:./freertos/src/tasks.c **** 
2713:./freertos/src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 109


2714:./freertos/src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:./freertos/src/tasks.c **** 	tasks to be unblocked. */
2716:./freertos/src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:./freertos/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3234              		.loc 1 2717 27
 3235 000a 4F4B     		ldr	r3, .L206
 3236 000c 1B68     		ldr	r3, [r3]
 3237              		.loc 1 2717 4
 3238 000e 002B     		cmp	r3, #0
 3239 0010 40F08F80 		bne	.L193
 3240              	.LBB144:
2718:./freertos/src/tasks.c **** 	{
2719:./freertos/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:./freertos/src/tasks.c **** 		block. */
2721:./freertos/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3241              		.loc 1 2721 49
 3242 0014 4D4B     		ldr	r3, .L206+4
 3243 0016 1B68     		ldr	r3, [r3]
 3244              		.loc 1 2721 20
 3245 0018 0133     		adds	r3, r3, #1
 3246 001a 3B61     		str	r3, [r7, #16]
2722:./freertos/src/tasks.c **** 
2723:./freertos/src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:./freertos/src/tasks.c **** 		delayed lists if it wraps to 0. */
2725:./freertos/src/tasks.c **** 		xTickCount = xConstTickCount;
 3247              		.loc 1 2725 14
 3248 001c 4B4A     		ldr	r2, .L206+4
 3249 001e 3B69     		ldr	r3, [r7, #16]
 3250 0020 1360     		str	r3, [r2]
2726:./freertos/src/tasks.c **** 
2727:./freertos/src/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3251              		.loc 1 2727 5
 3252 0022 3B69     		ldr	r3, [r7, #16]
 3253 0024 002B     		cmp	r3, #0
 3254 0026 21D1     		bne	.L194
 3255              	.LBB145:
2728:./freertos/src/tasks.c **** 		{
2729:./freertos/src/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3256              		.loc 1 2729 4
 3257 0028 494B     		ldr	r3, .L206+8
 3258 002a 1B68     		ldr	r3, [r3]
 3259 002c 1B68     		ldr	r3, [r3]
 3260 002e 002B     		cmp	r3, #0
 3261 0030 0BD0     		beq	.L195
 3262              	.LBB146:
 3263              	.LBB147:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3264              		.loc 2 197 2
 3265              		.syntax unified
 3266              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3267 0032 4FF05003 			mov r3, #80												
 3268 0036 83F31188 		msr basepri, r3											
 3269 003a BFF36F8F 		isb														
 3270 003e BFF34F8F 		dsb														
 3271              	
 3272              	@ 0 "" 2
 3273              		.thumb
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 110


 3274              		.syntax unified
 3275 0042 3B60     		str	r3, [r7]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3276              		.loc 2 205 1
 3277 0044 00BF     		nop
 3278              	.L196:
 3279              	.LBE147:
 3280              	.LBE146:
 3281              		.loc 1 2729 4
 3282 0046 00BF     		nop
 3283 0048 FDE7     		b	.L196
 3284              	.L195:
 3285              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3286 004a 414B     		ldr	r3, .L206+8
 3287 004c 1B68     		ldr	r3, [r3]
 3288 004e FB60     		str	r3, [r7, #12]
 3289 0050 404B     		ldr	r3, .L206+12
 3290 0052 1B68     		ldr	r3, [r3]
 3291 0054 3E4A     		ldr	r2, .L206+8
 3292 0056 1360     		str	r3, [r2]
 3293 0058 3E4A     		ldr	r2, .L206+12
 3294 005a FB68     		ldr	r3, [r7, #12]
 3295 005c 1360     		str	r3, [r2]
 3296 005e 3E4B     		ldr	r3, .L206+16
 3297 0060 1B68     		ldr	r3, [r3]
 3298 0062 0133     		adds	r3, r3, #1
 3299 0064 3C4A     		ldr	r2, .L206+16
 3300 0066 1360     		str	r3, [r2]
 3301 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3302              	.L194:
 3303              	.LBE145:
2730:./freertos/src/tasks.c **** 		}
2731:./freertos/src/tasks.c **** 		else
2732:./freertos/src/tasks.c **** 		{
2733:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:./freertos/src/tasks.c **** 		}
2735:./freertos/src/tasks.c **** 
2736:./freertos/src/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:./freertos/src/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:./freertos/src/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:./freertos/src/tasks.c **** 		look any further down the list. */
2740:./freertos/src/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3304              		.loc 1 2740 23 is_stmt 1
 3305 006c 3B4B     		ldr	r3, .L206+20
 3306 006e 1B68     		ldr	r3, [r3]
 3307              		.loc 1 2740 5
 3308 0070 3A69     		ldr	r2, [r7, #16]
 3309 0072 9A42     		cmp	r2, r3
 3310 0074 48D3     		bcc	.L197
 3311              	.L202:
2741:./freertos/src/tasks.c **** 		{
2742:./freertos/src/tasks.c **** 			for( ;; )
2743:./freertos/src/tasks.c **** 			{
2744:./freertos/src/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3312              		.loc 1 2744 9
 3313 0076 364B     		ldr	r3, .L206+8
 3314 0078 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 111


 3315 007a 1B68     		ldr	r3, [r3]
 3316              		.loc 1 2744 7
 3317 007c 002B     		cmp	r3, #0
 3318 007e 04D1     		bne	.L198
2745:./freertos/src/tasks.c **** 				{
2746:./freertos/src/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:./freertos/src/tasks.c **** 					to the maximum possible value so it is extremely
2748:./freertos/src/tasks.c **** 					unlikely that the
2749:./freertos/src/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:./freertos/src/tasks.c **** 					next time through. */
2751:./freertos/src/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3319              		.loc 1 2751 27
 3320 0080 364B     		ldr	r3, .L206+20
 3321 0082 4FF0FF32 		mov	r2, #-1
 3322 0086 1A60     		str	r2, [r3]
2752:./freertos/src/tasks.c **** 					break;
 3323              		.loc 1 2752 6
 3324 0088 3EE0     		b	.L197
 3325              	.L198:
2753:./freertos/src/tasks.c **** 				}
2754:./freertos/src/tasks.c **** 				else
2755:./freertos/src/tasks.c **** 				{
2756:./freertos/src/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:./freertos/src/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:./freertos/src/tasks.c **** 					at which the task at the head of the delayed list must
2759:./freertos/src/tasks.c **** 					be removed from the Blocked state. */
2760:./freertos/src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3326              		.loc 1 2760 14
 3327 008a 314B     		ldr	r3, .L206+8
 3328 008c 1B68     		ldr	r3, [r3]
 3329 008e DB68     		ldr	r3, [r3, #12]
 3330              		.loc 1 2760 12
 3331 0090 DB68     		ldr	r3, [r3, #12]
 3332 0092 BB60     		str	r3, [r7, #8]
2761:./freertos/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3333              		.loc 1 2761 17
 3334 0094 BB68     		ldr	r3, [r7, #8]
 3335 0096 5B68     		ldr	r3, [r3, #4]
 3336 0098 7B60     		str	r3, [r7, #4]
2762:./freertos/src/tasks.c **** 
2763:./freertos/src/tasks.c **** 					if( xConstTickCount < xItemValue )
 3337              		.loc 1 2763 8
 3338 009a 3A69     		ldr	r2, [r7, #16]
 3339 009c 7B68     		ldr	r3, [r7, #4]
 3340 009e 9A42     		cmp	r2, r3
 3341 00a0 03D2     		bcs	.L199
2764:./freertos/src/tasks.c **** 					{
2765:./freertos/src/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:./freertos/src/tasks.c **** 						item value is the time at which the task at the head
2767:./freertos/src/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:./freertos/src/tasks.c **** 						state -	so record the item value in
2769:./freertos/src/tasks.c **** 						xNextTaskUnblockTime. */
2770:./freertos/src/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3342              		.loc 1 2770 28
 3343 00a2 2E4A     		ldr	r2, .L206+20
 3344 00a4 7B68     		ldr	r3, [r7, #4]
 3345 00a6 1360     		str	r3, [r2]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 112


2771:./freertos/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3346              		.loc 1 2771 7
 3347 00a8 2EE0     		b	.L197
 3348              	.L199:
2772:./freertos/src/tasks.c **** 					}
2773:./freertos/src/tasks.c **** 					else
2774:./freertos/src/tasks.c **** 					{
2775:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:./freertos/src/tasks.c **** 					}
2777:./freertos/src/tasks.c **** 
2778:./freertos/src/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:./freertos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3349              		.loc 1 2779 15
 3350 00aa BB68     		ldr	r3, [r7, #8]
 3351 00ac 0433     		adds	r3, r3, #4
 3352 00ae 1846     		mov	r0, r3
 3353 00b0 FFF7FEFF 		bl	uxListRemove
2780:./freertos/src/tasks.c **** 
2781:./freertos/src/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:./freertos/src/tasks.c **** 					it from the event list. */
2783:./freertos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3354              		.loc 1 2783 10
 3355 00b4 BB68     		ldr	r3, [r7, #8]
 3356 00b6 9B6A     		ldr	r3, [r3, #40]
 3357              		.loc 1 2783 8
 3358 00b8 002B     		cmp	r3, #0
 3359 00ba 04D0     		beq	.L200
2784:./freertos/src/tasks.c **** 					{
2785:./freertos/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3360              		.loc 1 2785 16
 3361 00bc BB68     		ldr	r3, [r7, #8]
 3362 00be 1833     		adds	r3, r3, #24
 3363 00c0 1846     		mov	r0, r3
 3364 00c2 FFF7FEFF 		bl	uxListRemove
 3365              	.L200:
2786:./freertos/src/tasks.c **** 					}
2787:./freertos/src/tasks.c **** 					else
2788:./freertos/src/tasks.c **** 					{
2789:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:./freertos/src/tasks.c **** 					}
2791:./freertos/src/tasks.c **** 
2792:./freertos/src/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:./freertos/src/tasks.c **** 					list. */
2794:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3366              		.loc 1 2794 6
 3367 00c6 BB68     		ldr	r3, [r7, #8]
 3368 00c8 DB6A     		ldr	r3, [r3, #44]
 3369 00ca 0122     		movs	r2, #1
 3370 00cc 9A40     		lsls	r2, r2, r3
 3371 00ce 244B     		ldr	r3, .L206+24
 3372 00d0 1B68     		ldr	r3, [r3]
 3373 00d2 1343     		orrs	r3, r3, r2
 3374 00d4 224A     		ldr	r2, .L206+24
 3375 00d6 1360     		str	r3, [r2]
 3376 00d8 BB68     		ldr	r3, [r7, #8]
 3377 00da DA6A     		ldr	r2, [r3, #44]
 3378 00dc 1346     		mov	r3, r2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 113


 3379 00de 9B00     		lsls	r3, r3, #2
 3380 00e0 1344     		add	r3, r3, r2
 3381 00e2 9B00     		lsls	r3, r3, #2
 3382 00e4 1F4A     		ldr	r2, .L206+28
 3383 00e6 1A44     		add	r2, r2, r3
 3384 00e8 BB68     		ldr	r3, [r7, #8]
 3385 00ea 0433     		adds	r3, r3, #4
 3386 00ec 1946     		mov	r1, r3
 3387 00ee 1046     		mov	r0, r2
 3388 00f0 FFF7FEFF 		bl	vListInsertEnd
2795:./freertos/src/tasks.c **** 
2796:./freertos/src/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:./freertos/src/tasks.c **** 					context switch if preemption is turned off. */
2798:./freertos/src/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:./freertos/src/tasks.c **** 					{
2800:./freertos/src/tasks.c **** 						/* Preemption is on, but a context switch should
2801:./freertos/src/tasks.c **** 						only be performed if the unblocked task has a
2802:./freertos/src/tasks.c **** 						priority that is equal to or higher than the
2803:./freertos/src/tasks.c **** 						currently executing task. */
2804:./freertos/src/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3389              		.loc 1 2804 16
 3390 00f4 BB68     		ldr	r3, [r7, #8]
 3391 00f6 DA6A     		ldr	r2, [r3, #44]
 3392              		.loc 1 2804 44
 3393 00f8 1B4B     		ldr	r3, .L206+32
 3394 00fa 1B68     		ldr	r3, [r3]
 3395 00fc DB6A     		ldr	r3, [r3, #44]
 3396              		.loc 1 2804 9
 3397 00fe 9A42     		cmp	r2, r3
 3398 0100 B9D3     		bcc	.L202
2805:./freertos/src/tasks.c **** 						{
2806:./freertos/src/tasks.c **** 							xSwitchRequired = pdTRUE;
 3399              		.loc 1 2806 24
 3400 0102 0123     		movs	r3, #1
 3401 0104 7B61     		str	r3, [r7, #20]
2744:./freertos/src/tasks.c **** 				{
 3402              		.loc 1 2744 7
 3403 0106 B6E7     		b	.L202
 3404              	.L197:
2807:./freertos/src/tasks.c **** 						}
2808:./freertos/src/tasks.c **** 						else
2809:./freertos/src/tasks.c **** 						{
2810:./freertos/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:./freertos/src/tasks.c **** 						}
2812:./freertos/src/tasks.c **** 					}
2813:./freertos/src/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:./freertos/src/tasks.c **** 				}
2815:./freertos/src/tasks.c **** 			}
2816:./freertos/src/tasks.c **** 		}
2817:./freertos/src/tasks.c **** 
2818:./freertos/src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:./freertos/src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:./freertos/src/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:./freertos/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:./freertos/src/tasks.c **** 		{
2823:./freertos/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3405              		.loc 1 2823 8
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 114


 3406 0108 174B     		ldr	r3, .L206+32
 3407 010a 1B68     		ldr	r3, [r3]
 3408 010c DA6A     		ldr	r2, [r3, #44]
 3409 010e 1549     		ldr	r1, .L206+28
 3410 0110 1346     		mov	r3, r2
 3411 0112 9B00     		lsls	r3, r3, #2
 3412 0114 1344     		add	r3, r3, r2
 3413 0116 9B00     		lsls	r3, r3, #2
 3414 0118 0B44     		add	r3, r3, r1
 3415 011a 1B68     		ldr	r3, [r3]
 3416              		.loc 1 2823 6
 3417 011c 012B     		cmp	r3, #1
 3418 011e 01D9     		bls	.L203
2824:./freertos/src/tasks.c **** 			{
2825:./freertos/src/tasks.c **** 				xSwitchRequired = pdTRUE;
 3419              		.loc 1 2825 21
 3420 0120 0123     		movs	r3, #1
 3421 0122 7B61     		str	r3, [r7, #20]
 3422              	.L203:
2826:./freertos/src/tasks.c **** 			}
2827:./freertos/src/tasks.c **** 			else
2828:./freertos/src/tasks.c **** 			{
2829:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:./freertos/src/tasks.c **** 			}
2831:./freertos/src/tasks.c **** 		}
2832:./freertos/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:./freertos/src/tasks.c **** 
2834:./freertos/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:./freertos/src/tasks.c **** 		{
2836:./freertos/src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:./freertos/src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:./freertos/src/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:./freertos/src/tasks.c **** 			{
2840:./freertos/src/tasks.c **** 				vApplicationTickHook();
2841:./freertos/src/tasks.c **** 			}
2842:./freertos/src/tasks.c **** 			else
2843:./freertos/src/tasks.c **** 			{
2844:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:./freertos/src/tasks.c **** 			}
2846:./freertos/src/tasks.c **** 		}
2847:./freertos/src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:./freertos/src/tasks.c **** 
2849:./freertos/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:./freertos/src/tasks.c **** 		{
2851:./freertos/src/tasks.c **** 			if( xYieldPending != pdFALSE )
 3423              		.loc 1 2851 22
 3424 0124 114B     		ldr	r3, .L206+36
 3425 0126 1B68     		ldr	r3, [r3]
 3426              		.loc 1 2851 6
 3427 0128 002B     		cmp	r3, #0
 3428 012a 07D0     		beq	.L204
2852:./freertos/src/tasks.c **** 			{
2853:./freertos/src/tasks.c **** 				xSwitchRequired = pdTRUE;
 3429              		.loc 1 2853 21
 3430 012c 0123     		movs	r3, #1
 3431 012e 7B61     		str	r3, [r7, #20]
 3432 0130 04E0     		b	.L204
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 115


 3433              	.L193:
 3434              	.LBE144:
2854:./freertos/src/tasks.c **** 			}
2855:./freertos/src/tasks.c **** 			else
2856:./freertos/src/tasks.c **** 			{
2857:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:./freertos/src/tasks.c **** 			}
2859:./freertos/src/tasks.c **** 		}
2860:./freertos/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:./freertos/src/tasks.c **** 	}
2862:./freertos/src/tasks.c **** 	else
2863:./freertos/src/tasks.c **** 	{
2864:./freertos/src/tasks.c **** 		++xPendedTicks;
 3435              		.loc 1 2864 3
 3436 0132 0F4B     		ldr	r3, .L206+40
 3437 0134 1B68     		ldr	r3, [r3]
 3438 0136 0133     		adds	r3, r3, #1
 3439 0138 0D4A     		ldr	r2, .L206+40
 3440 013a 1360     		str	r3, [r2]
 3441              	.L204:
2865:./freertos/src/tasks.c **** 
2866:./freertos/src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:./freertos/src/tasks.c **** 		scheduler is locked. */
2868:./freertos/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:./freertos/src/tasks.c **** 		{
2870:./freertos/src/tasks.c **** 			vApplicationTickHook();
2871:./freertos/src/tasks.c **** 		}
2872:./freertos/src/tasks.c **** 		#endif
2873:./freertos/src/tasks.c **** 	}
2874:./freertos/src/tasks.c **** 
2875:./freertos/src/tasks.c **** 	return xSwitchRequired;
 3442              		.loc 1 2875 9
 3443 013c 7B69     		ldr	r3, [r7, #20]
2876:./freertos/src/tasks.c **** }
 3444              		.loc 1 2876 1
 3445 013e 1846     		mov	r0, r3
 3446 0140 1837     		adds	r7, r7, #24
 3447              	.LCFI119:
 3448              		.cfi_def_cfa_offset 8
 3449 0142 BD46     		mov	sp, r7
 3450              	.LCFI120:
 3451              		.cfi_def_cfa_register 13
 3452              		@ sp needed
 3453 0144 80BD     		pop	{r7, pc}
 3454              	.L207:
 3455 0146 00BF     		.align	2
 3456              	.L206:
 3457 0148 00000000 		.word	uxSchedulerSuspended
 3458 014c 00000000 		.word	xTickCount
 3459 0150 00000000 		.word	pxDelayedTaskList
 3460 0154 00000000 		.word	pxOverflowDelayedTaskList
 3461 0158 00000000 		.word	xNumOfOverflows
 3462 015c 00000000 		.word	xNextTaskUnblockTime
 3463 0160 00000000 		.word	uxTopReadyPriority
 3464 0164 00000000 		.word	pxReadyTasksLists
 3465 0168 00000000 		.word	pxCurrentTCB
 3466 016c 00000000 		.word	xYieldPending
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 116


 3467 0170 00000000 		.word	xPendedTicks
 3468              		.cfi_endproc
 3469              	.LFE84:
 3471              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3472              		.align	1
 3473              		.global	vTaskSwitchContext
 3474              		.syntax unified
 3475              		.thumb
 3476              		.thumb_func
 3478              	vTaskSwitchContext:
 3479              	.LFB85:
2877:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2878:./freertos/src/tasks.c **** 
2879:./freertos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:./freertos/src/tasks.c **** 
2881:./freertos/src/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:./freertos/src/tasks.c **** 	{
2883:./freertos/src/tasks.c **** 	TCB_t *xTCB;
2884:./freertos/src/tasks.c **** 
2885:./freertos/src/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:./freertos/src/tasks.c **** 		getting set. */
2887:./freertos/src/tasks.c **** 		if( xTask == NULL )
2888:./freertos/src/tasks.c **** 		{
2889:./freertos/src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:./freertos/src/tasks.c **** 		}
2891:./freertos/src/tasks.c **** 		else
2892:./freertos/src/tasks.c **** 		{
2893:./freertos/src/tasks.c **** 			xTCB = xTask;
2894:./freertos/src/tasks.c **** 		}
2895:./freertos/src/tasks.c **** 
2896:./freertos/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:./freertos/src/tasks.c **** 		the value can be accessed from an interrupt. */
2898:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
2899:./freertos/src/tasks.c **** 		{
2900:./freertos/src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:./freertos/src/tasks.c **** 		}
2902:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
2903:./freertos/src/tasks.c **** 	}
2904:./freertos/src/tasks.c **** 
2905:./freertos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2907:./freertos/src/tasks.c **** 
2908:./freertos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:./freertos/src/tasks.c **** 
2910:./freertos/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:./freertos/src/tasks.c **** 	{
2912:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
2913:./freertos/src/tasks.c **** 	TaskHookFunction_t xReturn;
2914:./freertos/src/tasks.c **** 
2915:./freertos/src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:./freertos/src/tasks.c **** 
2918:./freertos/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:./freertos/src/tasks.c **** 		the value can be accessed from an interrupt. */
2920:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
2921:./freertos/src/tasks.c **** 		{
2922:./freertos/src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 117


2923:./freertos/src/tasks.c **** 		}
2924:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
2925:./freertos/src/tasks.c **** 
2926:./freertos/src/tasks.c **** 		return xReturn;
2927:./freertos/src/tasks.c **** 	}
2928:./freertos/src/tasks.c **** 
2929:./freertos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2931:./freertos/src/tasks.c **** 
2932:./freertos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:./freertos/src/tasks.c **** 
2934:./freertos/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:./freertos/src/tasks.c **** 	{
2936:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
2937:./freertos/src/tasks.c **** 	TaskHookFunction_t xReturn;
2938:./freertos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:./freertos/src/tasks.c **** 
2940:./freertos/src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:./freertos/src/tasks.c **** 
2943:./freertos/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:./freertos/src/tasks.c **** 		the value can be accessed from an interrupt. */
2945:./freertos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:./freertos/src/tasks.c **** 		{
2947:./freertos/src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:./freertos/src/tasks.c **** 		}
2949:./freertos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:./freertos/src/tasks.c **** 
2951:./freertos/src/tasks.c **** 		return xReturn;
2952:./freertos/src/tasks.c **** 	}
2953:./freertos/src/tasks.c **** 
2954:./freertos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2956:./freertos/src/tasks.c **** 
2957:./freertos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:./freertos/src/tasks.c **** 
2959:./freertos/src/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:./freertos/src/tasks.c **** 	{
2961:./freertos/src/tasks.c **** 	TCB_t *xTCB;
2962:./freertos/src/tasks.c **** 	BaseType_t xReturn;
2963:./freertos/src/tasks.c **** 
2964:./freertos/src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:./freertos/src/tasks.c **** 		if( xTask == NULL )
2966:./freertos/src/tasks.c **** 		{
2967:./freertos/src/tasks.c **** 			xTCB = pxCurrentTCB;
2968:./freertos/src/tasks.c **** 		}
2969:./freertos/src/tasks.c **** 		else
2970:./freertos/src/tasks.c **** 		{
2971:./freertos/src/tasks.c **** 			xTCB = xTask;
2972:./freertos/src/tasks.c **** 		}
2973:./freertos/src/tasks.c **** 
2974:./freertos/src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:./freertos/src/tasks.c **** 		{
2976:./freertos/src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:./freertos/src/tasks.c **** 		}
2978:./freertos/src/tasks.c **** 		else
2979:./freertos/src/tasks.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 118


2980:./freertos/src/tasks.c **** 			xReturn = pdFAIL;
2981:./freertos/src/tasks.c **** 		}
2982:./freertos/src/tasks.c **** 
2983:./freertos/src/tasks.c **** 		return xReturn;
2984:./freertos/src/tasks.c **** 	}
2985:./freertos/src/tasks.c **** 
2986:./freertos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
2988:./freertos/src/tasks.c **** 
2989:./freertos/src/tasks.c **** void vTaskSwitchContext( void )
2990:./freertos/src/tasks.c **** {
 3480              		.loc 1 2990 1
 3481              		.cfi_startproc
 3482              		@ args = 0, pretend = 0, frame = 24
 3483              		@ frame_needed = 1, uses_anonymous_args = 0
 3484              		@ link register save eliminated.
 3485 0000 80B4     		push	{r7}
 3486              	.LCFI121:
 3487              		.cfi_def_cfa_offset 4
 3488              		.cfi_offset 7, -4
 3489 0002 87B0     		sub	sp, sp, #28
 3490              	.LCFI122:
 3491              		.cfi_def_cfa_offset 32
 3492 0004 00AF     		add	r7, sp, #0
 3493              	.LCFI123:
 3494              		.cfi_def_cfa_register 7
2991:./freertos/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3495              		.loc 1 2991 27
 3496 0006 274B     		ldr	r3, .L216
 3497 0008 1B68     		ldr	r3, [r3]
 3498              		.loc 1 2991 4
 3499 000a 002B     		cmp	r3, #0
 3500 000c 03D0     		beq	.L209
2992:./freertos/src/tasks.c **** 	{
2993:./freertos/src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:./freertos/src/tasks.c **** 		switch. */
2995:./freertos/src/tasks.c **** 		xYieldPending = pdTRUE;
 3501              		.loc 1 2995 17
 3502 000e 264B     		ldr	r3, .L216+4
 3503 0010 0122     		movs	r2, #1
 3504 0012 1A60     		str	r2, [r3]
2996:./freertos/src/tasks.c **** 	}
2997:./freertos/src/tasks.c **** 	else
2998:./freertos/src/tasks.c **** 	{
2999:./freertos/src/tasks.c **** 		xYieldPending = pdFALSE;
3000:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:./freertos/src/tasks.c **** 
3002:./freertos/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:./freertos/src/tasks.c **** 		{
3004:./freertos/src/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:./freertos/src/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:./freertos/src/tasks.c **** 			#else
3007:./freertos/src/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:./freertos/src/tasks.c **** 			#endif
3009:./freertos/src/tasks.c **** 
3010:./freertos/src/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:./freertos/src/tasks.c **** 			accumulated time so far.  The time the task started running was
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 119


3012:./freertos/src/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:./freertos/src/tasks.c **** 			protection here so count values are only valid until the timer
3014:./freertos/src/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:./freertos/src/tasks.c **** 			against suspect run time stat counter implementations - which
3016:./freertos/src/tasks.c **** 			are provided by the application, not the kernel. */
3017:./freertos/src/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:./freertos/src/tasks.c **** 			{
3019:./freertos/src/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:./freertos/src/tasks.c **** 			}
3021:./freertos/src/tasks.c **** 			else
3022:./freertos/src/tasks.c **** 			{
3023:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:./freertos/src/tasks.c **** 			}
3025:./freertos/src/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:./freertos/src/tasks.c **** 		}
3027:./freertos/src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:./freertos/src/tasks.c **** 
3029:./freertos/src/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:./freertos/src/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:./freertos/src/tasks.c **** 
3032:./freertos/src/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:./freertos/src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:./freertos/src/tasks.c **** 		{
3035:./freertos/src/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:./freertos/src/tasks.c **** 		}
3037:./freertos/src/tasks.c **** 		#endif
3038:./freertos/src/tasks.c **** 
3039:./freertos/src/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:./freertos/src/tasks.c **** 		optimised asm code. */
3041:./freertos/src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:./freertos/src/tasks.c **** 
3044:./freertos/src/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:./freertos/src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:./freertos/src/tasks.c **** 		{
3047:./freertos/src/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:./freertos/src/tasks.c **** 		}
3049:./freertos/src/tasks.c **** 		#endif
3050:./freertos/src/tasks.c **** 
3051:./freertos/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:./freertos/src/tasks.c **** 		{
3053:./freertos/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:./freertos/src/tasks.c **** 			structure specific to this task.
3055:./freertos/src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:./freertos/src/tasks.c **** 			for additional information. */
3057:./freertos/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:./freertos/src/tasks.c **** 		}
3059:./freertos/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:./freertos/src/tasks.c **** 	}
3061:./freertos/src/tasks.c **** }
 3505              		.loc 1 3061 1
 3506 0014 40E0     		b	.L215
 3507              	.L209:
2999:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3508              		.loc 1 2999 17
 3509 0016 244B     		ldr	r3, .L216+4
 3510 0018 0022     		movs	r2, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 120


 3511 001a 1A60     		str	r2, [r3]
 3512              	.LBB148:
3041:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3513              		.loc 1 3041 3
 3514 001c 234B     		ldr	r3, .L216+8
 3515 001e 1B68     		ldr	r3, [r3]
 3516 0020 FB60     		str	r3, [r7, #12]
 3517              	.LBB149:
 3518              	.LBB150:
 134:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 3519              		.loc 2 134 3
 3520 0022 FB68     		ldr	r3, [r7, #12]
 3521              		.syntax unified
 3522              	@ 134 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3523 0024 B3FA83F3 		clz r3, r3
 3524              	@ 0 "" 2
 3525              		.thumb
 3526              		.syntax unified
 3527 0028 FB72     		strb	r3, [r7, #11]
 135:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
 3528              		.loc 2 135 10
 3529 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3530              	.LBE150:
 3531              	.LBE149:
3041:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3532              		.loc 1 3041 3 discriminator 1
 3533 002c C3F11F03 		rsb	r3, r3, #31
 3534 0030 7B61     		str	r3, [r7, #20]
 3535 0032 1F49     		ldr	r1, .L216+12
 3536 0034 7A69     		ldr	r2, [r7, #20]
 3537 0036 1346     		mov	r3, r2
 3538 0038 9B00     		lsls	r3, r3, #2
 3539 003a 1344     		add	r3, r3, r2
 3540 003c 9B00     		lsls	r3, r3, #2
 3541 003e 0B44     		add	r3, r3, r1
 3542 0040 1B68     		ldr	r3, [r3]
 3543 0042 002B     		cmp	r3, #0
 3544 0044 0BD1     		bne	.L212
 3545              	.LBB151:
 3546              	.LBB152:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3547              		.loc 2 197 2
 3548              		.syntax unified
 3549              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3550 0046 4FF05003 			mov r3, #80												
 3551 004a 83F31188 		msr basepri, r3											
 3552 004e BFF36F8F 		isb														
 3553 0052 BFF34F8F 		dsb														
 3554              	
 3555              	@ 0 "" 2
 3556              		.thumb
 3557              		.syntax unified
 3558 0056 7B60     		str	r3, [r7, #4]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3559              		.loc 2 205 1
 3560 0058 00BF     		nop
 3561              	.L213:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 121


 3562              	.LBE152:
 3563              	.LBE151:
3041:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3564              		.loc 1 3041 3
 3565 005a 00BF     		nop
 3566 005c FDE7     		b	.L213
 3567              	.L212:
 3568              	.LBB153:
3041:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3569              		.loc 1 3041 3 is_stmt 0 discriminator 2
 3570 005e 7A69     		ldr	r2, [r7, #20]
 3571 0060 1346     		mov	r3, r2
 3572 0062 9B00     		lsls	r3, r3, #2
 3573 0064 1344     		add	r3, r3, r2
 3574 0066 9B00     		lsls	r3, r3, #2
 3575 0068 114A     		ldr	r2, .L216+12
 3576 006a 1344     		add	r3, r3, r2
 3577 006c 3B61     		str	r3, [r7, #16]
 3578 006e 3B69     		ldr	r3, [r7, #16]
 3579 0070 5B68     		ldr	r3, [r3, #4]
 3580 0072 5A68     		ldr	r2, [r3, #4]
 3581 0074 3B69     		ldr	r3, [r7, #16]
 3582 0076 5A60     		str	r2, [r3, #4]
 3583 0078 3B69     		ldr	r3, [r7, #16]
 3584 007a 5A68     		ldr	r2, [r3, #4]
 3585 007c 3B69     		ldr	r3, [r7, #16]
 3586 007e 0833     		adds	r3, r3, #8
 3587 0080 9A42     		cmp	r2, r3
 3588 0082 04D1     		bne	.L214
3041:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3589              		.loc 1 3041 3 discriminator 3
 3590 0084 3B69     		ldr	r3, [r7, #16]
 3591 0086 5B68     		ldr	r3, [r3, #4]
 3592 0088 5A68     		ldr	r2, [r3, #4]
 3593 008a 3B69     		ldr	r3, [r7, #16]
 3594 008c 5A60     		str	r2, [r3, #4]
 3595              	.L214:
3041:./freertos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3596              		.loc 1 3041 3 discriminator 5
 3597 008e 3B69     		ldr	r3, [r7, #16]
 3598 0090 5B68     		ldr	r3, [r3, #4]
 3599 0092 DB68     		ldr	r3, [r3, #12]
 3600 0094 074A     		ldr	r2, .L216+16
 3601 0096 1360     		str	r3, [r2]
 3602              	.L215:
 3603              	.LBE153:
 3604              	.LBE148:
 3605              		.loc 1 3061 1 is_stmt 1
 3606 0098 00BF     		nop
 3607 009a 1C37     		adds	r7, r7, #28
 3608              	.LCFI124:
 3609              		.cfi_def_cfa_offset 4
 3610 009c BD46     		mov	sp, r7
 3611              	.LCFI125:
 3612              		.cfi_def_cfa_register 13
 3613              		@ sp needed
 3614 009e 80BC     		pop	{r7}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 122


 3615              	.LCFI126:
 3616              		.cfi_restore 7
 3617              		.cfi_def_cfa_offset 0
 3618 00a0 7047     		bx	lr
 3619              	.L217:
 3620 00a2 00BF     		.align	2
 3621              	.L216:
 3622 00a4 00000000 		.word	uxSchedulerSuspended
 3623 00a8 00000000 		.word	xYieldPending
 3624 00ac 00000000 		.word	uxTopReadyPriority
 3625 00b0 00000000 		.word	pxReadyTasksLists
 3626 00b4 00000000 		.word	pxCurrentTCB
 3627              		.cfi_endproc
 3628              	.LFE85:
 3630              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3631              		.align	1
 3632              		.global	vTaskPlaceOnEventList
 3633              		.syntax unified
 3634              		.thumb
 3635              		.thumb_func
 3637              	vTaskPlaceOnEventList:
 3638              	.LFB86:
3062:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3063:./freertos/src/tasks.c **** 
3064:./freertos/src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:./freertos/src/tasks.c **** {
 3639              		.loc 1 3065 1
 3640              		.cfi_startproc
 3641              		@ args = 0, pretend = 0, frame = 16
 3642              		@ frame_needed = 1, uses_anonymous_args = 0
 3643 0000 80B5     		push	{r7, lr}
 3644              	.LCFI127:
 3645              		.cfi_def_cfa_offset 8
 3646              		.cfi_offset 7, -8
 3647              		.cfi_offset 14, -4
 3648 0002 84B0     		sub	sp, sp, #16
 3649              	.LCFI128:
 3650              		.cfi_def_cfa_offset 24
 3651 0004 00AF     		add	r7, sp, #0
 3652              	.LCFI129:
 3653              		.cfi_def_cfa_register 7
 3654 0006 7860     		str	r0, [r7, #4]
 3655 0008 3960     		str	r1, [r7]
3066:./freertos/src/tasks.c **** 	configASSERT( pxEventList );
 3656              		.loc 1 3066 2
 3657 000a 7B68     		ldr	r3, [r7, #4]
 3658 000c 002B     		cmp	r3, #0
 3659 000e 0BD1     		bne	.L219
 3660              	.LBB154:
 3661              	.LBB155:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3662              		.loc 2 197 2
 3663              		.syntax unified
 3664              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3665 0010 4FF05003 			mov r3, #80												
 3666 0014 83F31188 		msr basepri, r3											
 3667 0018 BFF36F8F 		isb														
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 123


 3668 001c BFF34F8F 		dsb														
 3669              	
 3670              	@ 0 "" 2
 3671              		.thumb
 3672              		.syntax unified
 3673 0020 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3674              		.loc 2 205 1
 3675 0022 00BF     		nop
 3676              	.L220:
 3677              	.LBE155:
 3678              	.LBE154:
 3679              		.loc 1 3066 2
 3680 0024 00BF     		nop
 3681 0026 FDE7     		b	.L220
 3682              	.L219:
3067:./freertos/src/tasks.c **** 
3068:./freertos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:./freertos/src/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:./freertos/src/tasks.c **** 
3071:./freertos/src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:./freertos/src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:./freertos/src/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:./freertos/src/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:./freertos/src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3683              		.loc 1 3075 43
 3684 0028 074B     		ldr	r3, .L221
 3685 002a 1B68     		ldr	r3, [r3]
 3686              		.loc 1 3075 2
 3687 002c 1833     		adds	r3, r3, #24
 3688 002e 1946     		mov	r1, r3
 3689 0030 7868     		ldr	r0, [r7, #4]
 3690 0032 FFF7FEFF 		bl	vListInsert
3076:./freertos/src/tasks.c **** 
3077:./freertos/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3691              		.loc 1 3077 2
 3692 0036 0121     		movs	r1, #1
 3693 0038 3868     		ldr	r0, [r7]
 3694 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:./freertos/src/tasks.c **** }
 3695              		.loc 1 3078 1
 3696 003e 00BF     		nop
 3697 0040 1037     		adds	r7, r7, #16
 3698              	.LCFI130:
 3699              		.cfi_def_cfa_offset 8
 3700 0042 BD46     		mov	sp, r7
 3701              	.LCFI131:
 3702              		.cfi_def_cfa_register 13
 3703              		@ sp needed
 3704 0044 80BD     		pop	{r7, pc}
 3705              	.L222:
 3706 0046 00BF     		.align	2
 3707              	.L221:
 3708 0048 00000000 		.word	pxCurrentTCB
 3709              		.cfi_endproc
 3710              	.LFE86:
 3712              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 124


 3713              		.align	1
 3714              		.global	vTaskPlaceOnUnorderedEventList
 3715              		.syntax unified
 3716              		.thumb
 3717              		.thumb_func
 3719              	vTaskPlaceOnUnorderedEventList:
 3720              	.LFB87:
3079:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3080:./freertos/src/tasks.c **** 
3081:./freertos/src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:./freertos/src/tasks.c **** {
 3721              		.loc 1 3082 1
 3722              		.cfi_startproc
 3723              		@ args = 0, pretend = 0, frame = 24
 3724              		@ frame_needed = 1, uses_anonymous_args = 0
 3725 0000 80B5     		push	{r7, lr}
 3726              	.LCFI132:
 3727              		.cfi_def_cfa_offset 8
 3728              		.cfi_offset 7, -8
 3729              		.cfi_offset 14, -4
 3730 0002 86B0     		sub	sp, sp, #24
 3731              	.LCFI133:
 3732              		.cfi_def_cfa_offset 32
 3733 0004 00AF     		add	r7, sp, #0
 3734              	.LCFI134:
 3735              		.cfi_def_cfa_register 7
 3736 0006 F860     		str	r0, [r7, #12]
 3737 0008 B960     		str	r1, [r7, #8]
 3738 000a 7A60     		str	r2, [r7, #4]
3083:./freertos/src/tasks.c **** 	configASSERT( pxEventList );
 3739              		.loc 1 3083 2
 3740 000c FB68     		ldr	r3, [r7, #12]
 3741 000e 002B     		cmp	r3, #0
 3742 0010 0BD1     		bne	.L224
 3743              	.LBB156:
 3744              	.LBB157:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3745              		.loc 2 197 2
 3746              		.syntax unified
 3747              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3748 0012 4FF05003 			mov r3, #80												
 3749 0016 83F31188 		msr basepri, r3											
 3750 001a BFF36F8F 		isb														
 3751 001e BFF34F8F 		dsb														
 3752              	
 3753              	@ 0 "" 2
 3754              		.thumb
 3755              		.syntax unified
 3756 0022 7B61     		str	r3, [r7, #20]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3757              		.loc 2 205 1
 3758 0024 00BF     		nop
 3759              	.L225:
 3760              	.LBE157:
 3761              	.LBE156:
 3762              		.loc 1 3083 2
 3763 0026 00BF     		nop
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 125


 3764 0028 FDE7     		b	.L225
 3765              	.L224:
3084:./freertos/src/tasks.c **** 
3085:./freertos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:./freertos/src/tasks.c **** 	the event groups implementation. */
3087:./freertos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3766              		.loc 1 3087 2
 3767 002a 124B     		ldr	r3, .L228
 3768 002c 1B68     		ldr	r3, [r3]
 3769 002e 002B     		cmp	r3, #0
 3770 0030 0BD1     		bne	.L226
 3771              	.LBB158:
 3772              	.LBB159:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3773              		.loc 2 197 2
 3774              		.syntax unified
 3775              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3776 0032 4FF05003 			mov r3, #80												
 3777 0036 83F31188 		msr basepri, r3											
 3778 003a BFF36F8F 		isb														
 3779 003e BFF34F8F 		dsb														
 3780              	
 3781              	@ 0 "" 2
 3782              		.thumb
 3783              		.syntax unified
 3784 0042 3B61     		str	r3, [r7, #16]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3785              		.loc 2 205 1
 3786 0044 00BF     		nop
 3787              	.L227:
 3788              	.LBE159:
 3789              	.LBE158:
 3790              		.loc 1 3087 2
 3791 0046 00BF     		nop
 3792 0048 FDE7     		b	.L227
 3793              	.L226:
3088:./freertos/src/tasks.c **** 
3089:./freertos/src/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:./freertos/src/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:./freertos/src/tasks.c **** 	task that is not in the Blocked state. */
3092:./freertos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3794              		.loc 1 3092 2
 3795 004a 0B4B     		ldr	r3, .L228+4
 3796 004c 1B68     		ldr	r3, [r3]
 3797 004e BA68     		ldr	r2, [r7, #8]
 3798 0050 42F00042 		orr	r2, r2, #-2147483648
 3799 0054 9A61     		str	r2, [r3, #24]
3093:./freertos/src/tasks.c **** 
3094:./freertos/src/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:./freertos/src/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:./freertos/src/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:./freertos/src/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:./freertos/src/tasks.c **** 	the task level). */
3099:./freertos/src/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3800              		.loc 1 3099 46
 3801 0056 084B     		ldr	r3, .L228+4
 3802 0058 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 126


 3803              		.loc 1 3099 2
 3804 005a 1833     		adds	r3, r3, #24
 3805 005c 1946     		mov	r1, r3
 3806 005e F868     		ldr	r0, [r7, #12]
 3807 0060 FFF7FEFF 		bl	vListInsertEnd
3100:./freertos/src/tasks.c **** 
3101:./freertos/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3808              		.loc 1 3101 2
 3809 0064 0121     		movs	r1, #1
 3810 0066 7868     		ldr	r0, [r7, #4]
 3811 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:./freertos/src/tasks.c **** }
 3812              		.loc 1 3102 1
 3813 006c 00BF     		nop
 3814 006e 1837     		adds	r7, r7, #24
 3815              	.LCFI135:
 3816              		.cfi_def_cfa_offset 8
 3817 0070 BD46     		mov	sp, r7
 3818              	.LCFI136:
 3819              		.cfi_def_cfa_register 13
 3820              		@ sp needed
 3821 0072 80BD     		pop	{r7, pc}
 3822              	.L229:
 3823              		.align	2
 3824              	.L228:
 3825 0074 00000000 		.word	uxSchedulerSuspended
 3826 0078 00000000 		.word	pxCurrentTCB
 3827              		.cfi_endproc
 3828              	.LFE87:
 3830              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3831              		.align	1
 3832              		.global	vTaskPlaceOnEventListRestricted
 3833              		.syntax unified
 3834              		.thumb
 3835              		.thumb_func
 3837              	vTaskPlaceOnEventListRestricted:
 3838              	.LFB88:
3103:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3104:./freertos/src/tasks.c **** 
3105:./freertos/src/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:./freertos/src/tasks.c **** 
3107:./freertos/src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:./freertos/src/tasks.c **** 	{
 3839              		.loc 1 3108 2
 3840              		.cfi_startproc
 3841              		@ args = 0, pretend = 0, frame = 24
 3842              		@ frame_needed = 1, uses_anonymous_args = 0
 3843 0000 80B5     		push	{r7, lr}
 3844              	.LCFI137:
 3845              		.cfi_def_cfa_offset 8
 3846              		.cfi_offset 7, -8
 3847              		.cfi_offset 14, -4
 3848 0002 86B0     		sub	sp, sp, #24
 3849              	.LCFI138:
 3850              		.cfi_def_cfa_offset 32
 3851 0004 00AF     		add	r7, sp, #0
 3852              	.LCFI139:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 127


 3853              		.cfi_def_cfa_register 7
 3854 0006 F860     		str	r0, [r7, #12]
 3855 0008 B960     		str	r1, [r7, #8]
 3856 000a 7A60     		str	r2, [r7, #4]
3109:./freertos/src/tasks.c **** 		configASSERT( pxEventList );
 3857              		.loc 1 3109 3
 3858 000c FB68     		ldr	r3, [r7, #12]
 3859 000e 002B     		cmp	r3, #0
 3860 0010 0BD1     		bne	.L231
 3861              	.LBB160:
 3862              	.LBB161:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3863              		.loc 2 197 2
 3864              		.syntax unified
 3865              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3866 0012 4FF05003 			mov r3, #80												
 3867 0016 83F31188 		msr basepri, r3											
 3868 001a BFF36F8F 		isb														
 3869 001e BFF34F8F 		dsb														
 3870              	
 3871              	@ 0 "" 2
 3872              		.thumb
 3873              		.syntax unified
 3874 0022 7B61     		str	r3, [r7, #20]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3875              		.loc 2 205 1
 3876 0024 00BF     		nop
 3877              	.L232:
 3878              	.LBE161:
 3879              	.LBE160:
 3880              		.loc 1 3109 3
 3881 0026 00BF     		nop
 3882 0028 FDE7     		b	.L232
 3883              	.L231:
3110:./freertos/src/tasks.c **** 
3111:./freertos/src/tasks.c **** 		/* This function should not be called by application code hence the
3112:./freertos/src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:./freertos/src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:./freertos/src/tasks.c **** 		it should be called with the scheduler suspended. */
3115:./freertos/src/tasks.c **** 
3116:./freertos/src/tasks.c **** 
3117:./freertos/src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:./freertos/src/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:./freertos/src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:./freertos/src/tasks.c **** 		can be used in place of vListInsert. */
3121:./freertos/src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3884              		.loc 1 3121 47
 3885 002a 0A4B     		ldr	r3, .L234
 3886 002c 1B68     		ldr	r3, [r3]
 3887              		.loc 1 3121 3
 3888 002e 1833     		adds	r3, r3, #24
 3889 0030 1946     		mov	r1, r3
 3890 0032 F868     		ldr	r0, [r7, #12]
 3891 0034 FFF7FEFF 		bl	vListInsertEnd
3122:./freertos/src/tasks.c **** 
3123:./freertos/src/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:./freertos/src/tasks.c **** 		value that will be recognised as an indefinite delay inside the
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 128


3125:./freertos/src/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:./freertos/src/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 3892              		.loc 1 3126 5
 3893 0038 7B68     		ldr	r3, [r7, #4]
 3894 003a 002B     		cmp	r3, #0
 3895 003c 02D0     		beq	.L233
3127:./freertos/src/tasks.c **** 		{
3128:./freertos/src/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 3896              		.loc 1 3128 17
 3897 003e 4FF0FF33 		mov	r3, #-1
 3898 0042 BB60     		str	r3, [r7, #8]
 3899              	.L233:
3129:./freertos/src/tasks.c **** 		}
3130:./freertos/src/tasks.c **** 
3131:./freertos/src/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:./freertos/src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3900              		.loc 1 3132 3
 3901 0044 7968     		ldr	r1, [r7, #4]
 3902 0046 B868     		ldr	r0, [r7, #8]
 3903 0048 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:./freertos/src/tasks.c **** 	}
 3904              		.loc 1 3133 2
 3905 004c 00BF     		nop
 3906 004e 1837     		adds	r7, r7, #24
 3907              	.LCFI140:
 3908              		.cfi_def_cfa_offset 8
 3909 0050 BD46     		mov	sp, r7
 3910              	.LCFI141:
 3911              		.cfi_def_cfa_register 13
 3912              		@ sp needed
 3913 0052 80BD     		pop	{r7, pc}
 3914              	.L235:
 3915              		.align	2
 3916              	.L234:
 3917 0054 00000000 		.word	pxCurrentTCB
 3918              		.cfi_endproc
 3919              	.LFE88:
 3921              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3922              		.align	1
 3923              		.global	xTaskRemoveFromEventList
 3924              		.syntax unified
 3925              		.thumb
 3926              		.thumb_func
 3928              	xTaskRemoveFromEventList:
 3929              	.LFB89:
3134:./freertos/src/tasks.c **** 
3135:./freertos/src/tasks.c **** #endif /* configUSE_TIMERS */
3136:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3137:./freertos/src/tasks.c **** 
3138:./freertos/src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:./freertos/src/tasks.c **** {
 3930              		.loc 1 3139 1
 3931              		.cfi_startproc
 3932              		@ args = 0, pretend = 0, frame = 24
 3933              		@ frame_needed = 1, uses_anonymous_args = 0
 3934 0000 80B5     		push	{r7, lr}
 3935              	.LCFI142:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 129


 3936              		.cfi_def_cfa_offset 8
 3937              		.cfi_offset 7, -8
 3938              		.cfi_offset 14, -4
 3939 0002 86B0     		sub	sp, sp, #24
 3940              	.LCFI143:
 3941              		.cfi_def_cfa_offset 32
 3942 0004 00AF     		add	r7, sp, #0
 3943              	.LCFI144:
 3944              		.cfi_def_cfa_register 7
 3945 0006 7860     		str	r0, [r7, #4]
3140:./freertos/src/tasks.c **** TCB_t *pxUnblockedTCB;
3141:./freertos/src/tasks.c **** BaseType_t xReturn;
3142:./freertos/src/tasks.c **** 
3143:./freertos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:./freertos/src/tasks.c **** 	called from a critical section within an ISR. */
3145:./freertos/src/tasks.c **** 
3146:./freertos/src/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:./freertos/src/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:./freertos/src/tasks.c **** 	the delayed list, and add it to the ready list.
3149:./freertos/src/tasks.c **** 
3150:./freertos/src/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:./freertos/src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:./freertos/src/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:./freertos/src/tasks.c **** 
3154:./freertos/src/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:./freertos/src/tasks.c **** 	pxEventList is not empty. */
3156:./freertos/src/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 3946              		.loc 1 3156 19
 3947 0008 7B68     		ldr	r3, [r7, #4]
 3948 000a DB68     		ldr	r3, [r3, #12]
 3949              		.loc 1 3156 17
 3950 000c DB68     		ldr	r3, [r3, #12]
 3951 000e 3B61     		str	r3, [r7, #16]
3157:./freertos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3952              		.loc 1 3157 2
 3953 0010 3B69     		ldr	r3, [r7, #16]
 3954 0012 002B     		cmp	r3, #0
 3955 0014 0BD1     		bne	.L237
 3956              	.LBB162:
 3957              	.LBB163:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3958              		.loc 2 197 2
 3959              		.syntax unified
 3960              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3961 0016 4FF05003 			mov r3, #80												
 3962 001a 83F31188 		msr basepri, r3											
 3963 001e BFF36F8F 		isb														
 3964 0022 BFF34F8F 		dsb														
 3965              	
 3966              	@ 0 "" 2
 3967              		.thumb
 3968              		.syntax unified
 3969 0026 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3970              		.loc 2 205 1
 3971 0028 00BF     		nop
 3972              	.L238:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 130


 3973              	.LBE163:
 3974              	.LBE162:
 3975              		.loc 1 3157 2
 3976 002a 00BF     		nop
 3977 002c FDE7     		b	.L238
 3978              	.L237:
3158:./freertos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3979              		.loc 1 3158 11
 3980 002e 3B69     		ldr	r3, [r7, #16]
 3981 0030 1833     		adds	r3, r3, #24
 3982 0032 1846     		mov	r0, r3
 3983 0034 FFF7FEFF 		bl	uxListRemove
3159:./freertos/src/tasks.c **** 
3160:./freertos/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3984              		.loc 1 3160 27
 3985 0038 1D4B     		ldr	r3, .L244
 3986 003a 1B68     		ldr	r3, [r3]
 3987              		.loc 1 3160 4
 3988 003c 002B     		cmp	r3, #0
 3989 003e 1CD1     		bne	.L239
3161:./freertos/src/tasks.c **** 	{
3162:./freertos/src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3990              		.loc 1 3162 12
 3991 0040 3B69     		ldr	r3, [r7, #16]
 3992 0042 0433     		adds	r3, r3, #4
 3993 0044 1846     		mov	r0, r3
 3994 0046 FFF7FEFF 		bl	uxListRemove
3163:./freertos/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3995              		.loc 1 3163 3
 3996 004a 3B69     		ldr	r3, [r7, #16]
 3997 004c DB6A     		ldr	r3, [r3, #44]
 3998 004e 0122     		movs	r2, #1
 3999 0050 9A40     		lsls	r2, r2, r3
 4000 0052 184B     		ldr	r3, .L244+4
 4001 0054 1B68     		ldr	r3, [r3]
 4002 0056 1343     		orrs	r3, r3, r2
 4003 0058 164A     		ldr	r2, .L244+4
 4004 005a 1360     		str	r3, [r2]
 4005 005c 3B69     		ldr	r3, [r7, #16]
 4006 005e DA6A     		ldr	r2, [r3, #44]
 4007 0060 1346     		mov	r3, r2
 4008 0062 9B00     		lsls	r3, r3, #2
 4009 0064 1344     		add	r3, r3, r2
 4010 0066 9B00     		lsls	r3, r3, #2
 4011 0068 134A     		ldr	r2, .L244+8
 4012 006a 1A44     		add	r2, r2, r3
 4013 006c 3B69     		ldr	r3, [r7, #16]
 4014 006e 0433     		adds	r3, r3, #4
 4015 0070 1946     		mov	r1, r3
 4016 0072 1046     		mov	r0, r2
 4017 0074 FFF7FEFF 		bl	vListInsertEnd
 4018 0078 05E0     		b	.L240
 4019              	.L239:
3164:./freertos/src/tasks.c **** 
3165:./freertos/src/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:./freertos/src/tasks.c **** 		{
3167:./freertos/src/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 131


3168:./freertos/src/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:./freertos/src/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:./freertos/src/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:./freertos/src/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:./freertos/src/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:./freertos/src/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:./freertos/src/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:./freertos/src/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:./freertos/src/tasks.c **** 		}
3177:./freertos/src/tasks.c **** 		#endif
3178:./freertos/src/tasks.c **** 	}
3179:./freertos/src/tasks.c **** 	else
3180:./freertos/src/tasks.c **** 	{
3181:./freertos/src/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:./freertos/src/tasks.c **** 		pending until the scheduler is resumed. */
3183:./freertos/src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4020              		.loc 1 3183 3
 4021 007a 3B69     		ldr	r3, [r7, #16]
 4022 007c 1833     		adds	r3, r3, #24
 4023 007e 1946     		mov	r1, r3
 4024 0080 0E48     		ldr	r0, .L244+12
 4025 0082 FFF7FEFF 		bl	vListInsertEnd
 4026              	.L240:
3184:./freertos/src/tasks.c **** 	}
3185:./freertos/src/tasks.c **** 
3186:./freertos/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4027              		.loc 1 3186 20
 4028 0086 3B69     		ldr	r3, [r7, #16]
 4029 0088 DA6A     		ldr	r2, [r3, #44]
 4030              		.loc 1 3186 47
 4031 008a 0D4B     		ldr	r3, .L244+16
 4032 008c 1B68     		ldr	r3, [r3]
 4033 008e DB6A     		ldr	r3, [r3, #44]
 4034              		.loc 1 3186 4
 4035 0090 9A42     		cmp	r2, r3
 4036 0092 05D9     		bls	.L241
3187:./freertos/src/tasks.c **** 	{
3188:./freertos/src/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:./freertos/src/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:./freertos/src/tasks.c **** 		it should force a context switch now. */
3191:./freertos/src/tasks.c **** 		xReturn = pdTRUE;
 4037              		.loc 1 3191 11
 4038 0094 0123     		movs	r3, #1
 4039 0096 7B61     		str	r3, [r7, #20]
3192:./freertos/src/tasks.c **** 
3193:./freertos/src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:./freertos/src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:./freertos/src/tasks.c **** 		xYieldPending = pdTRUE;
 4040              		.loc 1 3195 17
 4041 0098 0A4B     		ldr	r3, .L244+20
 4042 009a 0122     		movs	r2, #1
 4043 009c 1A60     		str	r2, [r3]
 4044 009e 01E0     		b	.L242
 4045              	.L241:
3196:./freertos/src/tasks.c **** 	}
3197:./freertos/src/tasks.c **** 	else
3198:./freertos/src/tasks.c **** 	{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 132


3199:./freertos/src/tasks.c **** 		xReturn = pdFALSE;
 4046              		.loc 1 3199 11
 4047 00a0 0023     		movs	r3, #0
 4048 00a2 7B61     		str	r3, [r7, #20]
 4049              	.L242:
3200:./freertos/src/tasks.c **** 	}
3201:./freertos/src/tasks.c **** 
3202:./freertos/src/tasks.c **** 	return xReturn;
 4050              		.loc 1 3202 9
 4051 00a4 7B69     		ldr	r3, [r7, #20]
3203:./freertos/src/tasks.c **** }
 4052              		.loc 1 3203 1
 4053 00a6 1846     		mov	r0, r3
 4054 00a8 1837     		adds	r7, r7, #24
 4055              	.LCFI145:
 4056              		.cfi_def_cfa_offset 8
 4057 00aa BD46     		mov	sp, r7
 4058              	.LCFI146:
 4059              		.cfi_def_cfa_register 13
 4060              		@ sp needed
 4061 00ac 80BD     		pop	{r7, pc}
 4062              	.L245:
 4063 00ae 00BF     		.align	2
 4064              	.L244:
 4065 00b0 00000000 		.word	uxSchedulerSuspended
 4066 00b4 00000000 		.word	uxTopReadyPriority
 4067 00b8 00000000 		.word	pxReadyTasksLists
 4068 00bc 00000000 		.word	xPendingReadyList
 4069 00c0 00000000 		.word	pxCurrentTCB
 4070 00c4 00000000 		.word	xYieldPending
 4071              		.cfi_endproc
 4072              	.LFE89:
 4074              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4075              		.align	1
 4076              		.global	vTaskRemoveFromUnorderedEventList
 4077              		.syntax unified
 4078              		.thumb
 4079              		.thumb_func
 4081              	vTaskRemoveFromUnorderedEventList:
 4082              	.LFB90:
3204:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3205:./freertos/src/tasks.c **** 
3206:./freertos/src/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:./freertos/src/tasks.c **** {
 4083              		.loc 1 3207 1
 4084              		.cfi_startproc
 4085              		@ args = 0, pretend = 0, frame = 24
 4086              		@ frame_needed = 1, uses_anonymous_args = 0
 4087 0000 80B5     		push	{r7, lr}
 4088              	.LCFI147:
 4089              		.cfi_def_cfa_offset 8
 4090              		.cfi_offset 7, -8
 4091              		.cfi_offset 14, -4
 4092 0002 86B0     		sub	sp, sp, #24
 4093              	.LCFI148:
 4094              		.cfi_def_cfa_offset 32
 4095 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 133


 4096              	.LCFI149:
 4097              		.cfi_def_cfa_register 7
 4098 0006 7860     		str	r0, [r7, #4]
 4099 0008 3960     		str	r1, [r7]
3208:./freertos/src/tasks.c **** TCB_t *pxUnblockedTCB;
3209:./freertos/src/tasks.c **** 
3210:./freertos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:./freertos/src/tasks.c **** 	the event flags implementation. */
3212:./freertos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4100              		.loc 1 3212 2
 4101 000a 2A4B     		ldr	r3, .L253
 4102 000c 1B68     		ldr	r3, [r3]
 4103 000e 002B     		cmp	r3, #0
 4104 0010 0BD1     		bne	.L247
 4105              	.LBB164:
 4106              	.LBB165:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4107              		.loc 2 197 2
 4108              		.syntax unified
 4109              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4110 0012 4FF05003 			mov r3, #80												
 4111 0016 83F31188 		msr basepri, r3											
 4112 001a BFF36F8F 		isb														
 4113 001e BFF34F8F 		dsb														
 4114              	
 4115              	@ 0 "" 2
 4116              		.thumb
 4117              		.syntax unified
 4118 0022 3B61     		str	r3, [r7, #16]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 4119              		.loc 2 205 1
 4120 0024 00BF     		nop
 4121              	.L248:
 4122              	.LBE165:
 4123              	.LBE164:
 4124              		.loc 1 3212 2
 4125 0026 00BF     		nop
 4126 0028 FDE7     		b	.L248
 4127              	.L247:
3213:./freertos/src/tasks.c **** 
3214:./freertos/src/tasks.c **** 	/* Store the new item value in the event list. */
3215:./freertos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4128              		.loc 1 3215 2
 4129 002a 3B68     		ldr	r3, [r7]
 4130 002c 43F00042 		orr	r2, r3, #-2147483648
 4131 0030 7B68     		ldr	r3, [r7, #4]
 4132 0032 1A60     		str	r2, [r3]
3216:./freertos/src/tasks.c **** 
3217:./freertos/src/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:./freertos/src/tasks.c **** 	event flags. */
3219:./freertos/src/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4133              		.loc 1 3219 17
 4134 0034 7B68     		ldr	r3, [r7, #4]
 4135 0036 DB68     		ldr	r3, [r3, #12]
 4136 0038 7B61     		str	r3, [r7, #20]
3220:./freertos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4137              		.loc 1 3220 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 134


 4138 003a 7B69     		ldr	r3, [r7, #20]
 4139 003c 002B     		cmp	r3, #0
 4140 003e 0BD1     		bne	.L249
 4141              	.LBB166:
 4142              	.LBB167:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4143              		.loc 2 197 2
 4144              		.syntax unified
 4145              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4146 0040 4FF05003 			mov r3, #80												
 4147 0044 83F31188 		msr basepri, r3											
 4148 0048 BFF36F8F 		isb														
 4149 004c BFF34F8F 		dsb														
 4150              	
 4151              	@ 0 "" 2
 4152              		.thumb
 4153              		.syntax unified
 4154 0050 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 4155              		.loc 2 205 1
 4156 0052 00BF     		nop
 4157              	.L250:
 4158              	.LBE167:
 4159              	.LBE166:
 4160              		.loc 1 3220 2
 4161 0054 00BF     		nop
 4162 0056 FDE7     		b	.L250
 4163              	.L249:
3221:./freertos/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4164              		.loc 1 3221 11
 4165 0058 7868     		ldr	r0, [r7, #4]
 4166 005a FFF7FEFF 		bl	uxListRemove
3222:./freertos/src/tasks.c **** 
3223:./freertos/src/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:./freertos/src/tasks.c **** 	{
3225:./freertos/src/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:./freertos/src/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:./freertos/src/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:./freertos/src/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:./freertos/src/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:./freertos/src/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:./freertos/src/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:./freertos/src/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:./freertos/src/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:./freertos/src/tasks.c **** 	}
3235:./freertos/src/tasks.c **** 	#endif
3236:./freertos/src/tasks.c **** 
3237:./freertos/src/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:./freertos/src/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:./freertos/src/tasks.c **** 	lists. */
3240:./freertos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4167              		.loc 1 3240 11
 4168 005e 7B69     		ldr	r3, [r7, #20]
 4169 0060 0433     		adds	r3, r3, #4
 4170 0062 1846     		mov	r0, r3
 4171 0064 FFF7FEFF 		bl	uxListRemove
3241:./freertos/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 135


 4172              		.loc 1 3241 2
 4173 0068 7B69     		ldr	r3, [r7, #20]
 4174 006a DB6A     		ldr	r3, [r3, #44]
 4175 006c 0122     		movs	r2, #1
 4176 006e 9A40     		lsls	r2, r2, r3
 4177 0070 114B     		ldr	r3, .L253+4
 4178 0072 1B68     		ldr	r3, [r3]
 4179 0074 1343     		orrs	r3, r3, r2
 4180 0076 104A     		ldr	r2, .L253+4
 4181 0078 1360     		str	r3, [r2]
 4182 007a 7B69     		ldr	r3, [r7, #20]
 4183 007c DA6A     		ldr	r2, [r3, #44]
 4184 007e 1346     		mov	r3, r2
 4185 0080 9B00     		lsls	r3, r3, #2
 4186 0082 1344     		add	r3, r3, r2
 4187 0084 9B00     		lsls	r3, r3, #2
 4188 0086 0D4A     		ldr	r2, .L253+8
 4189 0088 1A44     		add	r2, r2, r3
 4190 008a 7B69     		ldr	r3, [r7, #20]
 4191 008c 0433     		adds	r3, r3, #4
 4192 008e 1946     		mov	r1, r3
 4193 0090 1046     		mov	r0, r2
 4194 0092 FFF7FEFF 		bl	vListInsertEnd
3242:./freertos/src/tasks.c **** 
3243:./freertos/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4195              		.loc 1 3243 20
 4196 0096 7B69     		ldr	r3, [r7, #20]
 4197 0098 DA6A     		ldr	r2, [r3, #44]
 4198              		.loc 1 3243 47
 4199 009a 094B     		ldr	r3, .L253+12
 4200 009c 1B68     		ldr	r3, [r3]
 4201 009e DB6A     		ldr	r3, [r3, #44]
 4202              		.loc 1 3243 4
 4203 00a0 9A42     		cmp	r2, r3
 4204 00a2 02D9     		bls	.L252
3244:./freertos/src/tasks.c **** 	{
3245:./freertos/src/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:./freertos/src/tasks.c **** 		a context switch is required.  This function is called with the
3247:./freertos/src/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:./freertos/src/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:./freertos/src/tasks.c **** 		xYieldPending = pdTRUE;
 4205              		.loc 1 3249 17
 4206 00a4 074B     		ldr	r3, .L253+16
 4207 00a6 0122     		movs	r2, #1
 4208 00a8 1A60     		str	r2, [r3]
 4209              	.L252:
3250:./freertos/src/tasks.c **** 	}
3251:./freertos/src/tasks.c **** }
 4210              		.loc 1 3251 1
 4211 00aa 00BF     		nop
 4212 00ac 1837     		adds	r7, r7, #24
 4213              	.LCFI150:
 4214              		.cfi_def_cfa_offset 8
 4215 00ae BD46     		mov	sp, r7
 4216              	.LCFI151:
 4217              		.cfi_def_cfa_register 13
 4218              		@ sp needed
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 136


 4219 00b0 80BD     		pop	{r7, pc}
 4220              	.L254:
 4221 00b2 00BF     		.align	2
 4222              	.L253:
 4223 00b4 00000000 		.word	uxSchedulerSuspended
 4224 00b8 00000000 		.word	uxTopReadyPriority
 4225 00bc 00000000 		.word	pxReadyTasksLists
 4226 00c0 00000000 		.word	pxCurrentTCB
 4227 00c4 00000000 		.word	xYieldPending
 4228              		.cfi_endproc
 4229              	.LFE90:
 4231              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4232              		.align	1
 4233              		.global	vTaskSetTimeOutState
 4234              		.syntax unified
 4235              		.thumb
 4236              		.thumb_func
 4238              	vTaskSetTimeOutState:
 4239              	.LFB91:
3252:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3253:./freertos/src/tasks.c **** 
3254:./freertos/src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:./freertos/src/tasks.c **** {
 4240              		.loc 1 3255 1
 4241              		.cfi_startproc
 4242              		@ args = 0, pretend = 0, frame = 16
 4243              		@ frame_needed = 1, uses_anonymous_args = 0
 4244 0000 80B5     		push	{r7, lr}
 4245              	.LCFI152:
 4246              		.cfi_def_cfa_offset 8
 4247              		.cfi_offset 7, -8
 4248              		.cfi_offset 14, -4
 4249 0002 84B0     		sub	sp, sp, #16
 4250              	.LCFI153:
 4251              		.cfi_def_cfa_offset 24
 4252 0004 00AF     		add	r7, sp, #0
 4253              	.LCFI154:
 4254              		.cfi_def_cfa_register 7
 4255 0006 7860     		str	r0, [r7, #4]
3256:./freertos/src/tasks.c **** 	configASSERT( pxTimeOut );
 4256              		.loc 1 3256 2
 4257 0008 7B68     		ldr	r3, [r7, #4]
 4258 000a 002B     		cmp	r3, #0
 4259 000c 0BD1     		bne	.L256
 4260              	.LBB168:
 4261              	.LBB169:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4262              		.loc 2 197 2
 4263              		.syntax unified
 4264              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4265 000e 4FF05003 			mov r3, #80												
 4266 0012 83F31188 		msr basepri, r3											
 4267 0016 BFF36F8F 		isb														
 4268 001a BFF34F8F 		dsb														
 4269              	
 4270              	@ 0 "" 2
 4271              		.thumb
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 137


 4272              		.syntax unified
 4273 001e FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 4274              		.loc 2 205 1
 4275 0020 00BF     		nop
 4276              	.L257:
 4277              	.LBE169:
 4278              	.LBE168:
 4279              		.loc 1 3256 2
 4280 0022 00BF     		nop
 4281 0024 FDE7     		b	.L257
 4282              	.L256:
3257:./freertos/src/tasks.c **** 	taskENTER_CRITICAL();
 4283              		.loc 1 3257 2
 4284 0026 FFF7FEFF 		bl	vPortEnterCritical
3258:./freertos/src/tasks.c **** 	{
3259:./freertos/src/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4285              		.loc 1 3259 29
 4286 002a 074B     		ldr	r3, .L258
 4287 002c 1A68     		ldr	r2, [r3]
 4288 002e 7B68     		ldr	r3, [r7, #4]
 4289 0030 1A60     		str	r2, [r3]
3260:./freertos/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4290              		.loc 1 3260 30
 4291 0032 064B     		ldr	r3, .L258+4
 4292 0034 1A68     		ldr	r2, [r3]
 4293 0036 7B68     		ldr	r3, [r7, #4]
 4294 0038 5A60     		str	r2, [r3, #4]
3261:./freertos/src/tasks.c **** 	}
3262:./freertos/src/tasks.c **** 	taskEXIT_CRITICAL();
 4295              		.loc 1 3262 2
 4296 003a FFF7FEFF 		bl	vPortExitCritical
3263:./freertos/src/tasks.c **** }
 4297              		.loc 1 3263 1
 4298 003e 00BF     		nop
 4299 0040 1037     		adds	r7, r7, #16
 4300              	.LCFI155:
 4301              		.cfi_def_cfa_offset 8
 4302 0042 BD46     		mov	sp, r7
 4303              	.LCFI156:
 4304              		.cfi_def_cfa_register 13
 4305              		@ sp needed
 4306 0044 80BD     		pop	{r7, pc}
 4307              	.L259:
 4308 0046 00BF     		.align	2
 4309              	.L258:
 4310 0048 00000000 		.word	xNumOfOverflows
 4311 004c 00000000 		.word	xTickCount
 4312              		.cfi_endproc
 4313              	.LFE91:
 4315              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4316              		.align	1
 4317              		.global	vTaskInternalSetTimeOutState
 4318              		.syntax unified
 4319              		.thumb
 4320              		.thumb_func
 4322              	vTaskInternalSetTimeOutState:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 138


 4323              	.LFB92:
3264:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3265:./freertos/src/tasks.c **** 
3266:./freertos/src/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:./freertos/src/tasks.c **** {
 4324              		.loc 1 3267 1
 4325              		.cfi_startproc
 4326              		@ args = 0, pretend = 0, frame = 8
 4327              		@ frame_needed = 1, uses_anonymous_args = 0
 4328              		@ link register save eliminated.
 4329 0000 80B4     		push	{r7}
 4330              	.LCFI157:
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 7, -4
 4333 0002 83B0     		sub	sp, sp, #12
 4334              	.LCFI158:
 4335              		.cfi_def_cfa_offset 16
 4336 0004 00AF     		add	r7, sp, #0
 4337              	.LCFI159:
 4338              		.cfi_def_cfa_register 7
 4339 0006 7860     		str	r0, [r7, #4]
3268:./freertos/src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:./freertos/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4340              		.loc 1 3269 28
 4341 0008 064B     		ldr	r3, .L261
 4342 000a 1A68     		ldr	r2, [r3]
 4343 000c 7B68     		ldr	r3, [r7, #4]
 4344 000e 1A60     		str	r2, [r3]
3270:./freertos/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4345              		.loc 1 3270 29
 4346 0010 054B     		ldr	r3, .L261+4
 4347 0012 1A68     		ldr	r2, [r3]
 4348 0014 7B68     		ldr	r3, [r7, #4]
 4349 0016 5A60     		str	r2, [r3, #4]
3271:./freertos/src/tasks.c **** }
 4350              		.loc 1 3271 1
 4351 0018 00BF     		nop
 4352 001a 0C37     		adds	r7, r7, #12
 4353              	.LCFI160:
 4354              		.cfi_def_cfa_offset 4
 4355 001c BD46     		mov	sp, r7
 4356              	.LCFI161:
 4357              		.cfi_def_cfa_register 13
 4358              		@ sp needed
 4359 001e 80BC     		pop	{r7}
 4360              	.LCFI162:
 4361              		.cfi_restore 7
 4362              		.cfi_def_cfa_offset 0
 4363 0020 7047     		bx	lr
 4364              	.L262:
 4365 0022 00BF     		.align	2
 4366              	.L261:
 4367 0024 00000000 		.word	xNumOfOverflows
 4368 0028 00000000 		.word	xTickCount
 4369              		.cfi_endproc
 4370              	.LFE92:
 4372              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 139


 4373              		.align	1
 4374              		.global	xTaskCheckForTimeOut
 4375              		.syntax unified
 4376              		.thumb
 4377              		.thumb_func
 4379              	xTaskCheckForTimeOut:
 4380              	.LFB93:
3272:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3273:./freertos/src/tasks.c **** 
3274:./freertos/src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:./freertos/src/tasks.c **** {
 4381              		.loc 1 3275 1
 4382              		.cfi_startproc
 4383              		@ args = 0, pretend = 0, frame = 32
 4384              		@ frame_needed = 1, uses_anonymous_args = 0
 4385 0000 80B5     		push	{r7, lr}
 4386              	.LCFI163:
 4387              		.cfi_def_cfa_offset 8
 4388              		.cfi_offset 7, -8
 4389              		.cfi_offset 14, -4
 4390 0002 88B0     		sub	sp, sp, #32
 4391              	.LCFI164:
 4392              		.cfi_def_cfa_offset 40
 4393 0004 00AF     		add	r7, sp, #0
 4394              	.LCFI165:
 4395              		.cfi_def_cfa_register 7
 4396 0006 7860     		str	r0, [r7, #4]
 4397 0008 3960     		str	r1, [r7]
3276:./freertos/src/tasks.c **** BaseType_t xReturn;
3277:./freertos/src/tasks.c **** 
3278:./freertos/src/tasks.c **** 	configASSERT( pxTimeOut );
 4398              		.loc 1 3278 2
 4399 000a 7B68     		ldr	r3, [r7, #4]
 4400 000c 002B     		cmp	r3, #0
 4401 000e 0BD1     		bne	.L264
 4402              	.LBB170:
 4403              	.LBB171:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4404              		.loc 2 197 2
 4405              		.syntax unified
 4406              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4407 0010 4FF05003 			mov r3, #80												
 4408 0014 83F31188 		msr basepri, r3											
 4409 0018 BFF36F8F 		isb														
 4410 001c BFF34F8F 		dsb														
 4411              	
 4412              	@ 0 "" 2
 4413              		.thumb
 4414              		.syntax unified
 4415 0020 3B61     		str	r3, [r7, #16]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 4416              		.loc 2 205 1
 4417 0022 00BF     		nop
 4418              	.L265:
 4419              	.LBE171:
 4420              	.LBE170:
 4421              		.loc 1 3278 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 140


 4422 0024 00BF     		nop
 4423 0026 FDE7     		b	.L265
 4424              	.L264:
3279:./freertos/src/tasks.c **** 	configASSERT( pxTicksToWait );
 4425              		.loc 1 3279 2
 4426 0028 3B68     		ldr	r3, [r7]
 4427 002a 002B     		cmp	r3, #0
 4428 002c 0BD1     		bne	.L266
 4429              	.LBB172:
 4430              	.LBB173:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4431              		.loc 2 197 2
 4432              		.syntax unified
 4433              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4434 002e 4FF05003 			mov r3, #80												
 4435 0032 83F31188 		msr basepri, r3											
 4436 0036 BFF36F8F 		isb														
 4437 003a BFF34F8F 		dsb														
 4438              	
 4439              	@ 0 "" 2
 4440              		.thumb
 4441              		.syntax unified
 4442 003e FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 4443              		.loc 2 205 1
 4444 0040 00BF     		nop
 4445              	.L267:
 4446              	.LBE173:
 4447              	.LBE172:
 4448              		.loc 1 3279 2
 4449 0042 00BF     		nop
 4450 0044 FDE7     		b	.L267
 4451              	.L266:
3280:./freertos/src/tasks.c **** 
3281:./freertos/src/tasks.c **** 	taskENTER_CRITICAL();
 4452              		.loc 1 3281 2
 4453 0046 FFF7FEFF 		bl	vPortEnterCritical
 4454              	.LBB174:
3282:./freertos/src/tasks.c **** 	{
3283:./freertos/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:./freertos/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4455              		.loc 1 3284 20
 4456 004a 1D4B     		ldr	r3, .L273
 4457 004c 1B68     		ldr	r3, [r3]
 4458 004e BB61     		str	r3, [r7, #24]
3285:./freertos/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4459              		.loc 1 3285 62
 4460 0050 7B68     		ldr	r3, [r7, #4]
 4461 0052 5B68     		ldr	r3, [r3, #4]
 4462              		.loc 1 3285 20
 4463 0054 BA69     		ldr	r2, [r7, #24]
 4464 0056 D31A     		subs	r3, r2, r3
 4465 0058 7B61     		str	r3, [r7, #20]
3286:./freertos/src/tasks.c **** 
3287:./freertos/src/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:./freertos/src/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:./freertos/src/tasks.c **** 			{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 141


3290:./freertos/src/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:./freertos/src/tasks.c **** 				but has the same result. */
3292:./freertos/src/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:./freertos/src/tasks.c **** 				xReturn = pdTRUE;
3294:./freertos/src/tasks.c **** 			}
3295:./freertos/src/tasks.c **** 			else
3296:./freertos/src/tasks.c **** 		#endif
3297:./freertos/src/tasks.c **** 
3298:./freertos/src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:./freertos/src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4466              		.loc 1 3299 8
 4467 005a 3B68     		ldr	r3, [r7]
 4468 005c 1B68     		ldr	r3, [r3]
 4469              		.loc 1 3299 6
 4470 005e B3F1FF3F 		cmp	r3, #-1
 4471 0062 02D1     		bne	.L268
3300:./freertos/src/tasks.c **** 			{
3301:./freertos/src/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:./freertos/src/tasks.c **** 				specified is the maximum block time then the task should block
3303:./freertos/src/tasks.c **** 				indefinitely, and therefore never time out. */
3304:./freertos/src/tasks.c **** 				xReturn = pdFALSE;
 4472              		.loc 1 3304 13
 4473 0064 0023     		movs	r3, #0
 4474 0066 FB61     		str	r3, [r7, #28]
 4475 0068 23E0     		b	.L269
 4476              	.L268:
3305:./freertos/src/tasks.c **** 			}
3306:./freertos/src/tasks.c **** 			else
3307:./freertos/src/tasks.c **** 		#endif
3308:./freertos/src/tasks.c **** 
3309:./freertos/src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4477              		.loc 1 3309 37
 4478 006a 7B68     		ldr	r3, [r7, #4]
 4479 006c 1A68     		ldr	r2, [r3]
 4480              		.loc 1 3309 25
 4481 006e 154B     		ldr	r3, .L273+4
 4482 0070 1B68     		ldr	r3, [r3]
 4483              		.loc 1 3309 5
 4484 0072 9A42     		cmp	r2, r3
 4485 0074 07D0     		beq	.L270
 4486              		.loc 1 3309 89 discriminator 1
 4487 0076 7B68     		ldr	r3, [r7, #4]
 4488 0078 5B68     		ldr	r3, [r3, #4]
 4489              		.loc 1 3309 56 discriminator 1
 4490 007a BA69     		ldr	r2, [r7, #24]
 4491 007c 9A42     		cmp	r2, r3
 4492 007e 02D3     		bcc	.L270
3310:./freertos/src/tasks.c **** 		{
3311:./freertos/src/tasks.c **** 			/* The tick count is greater than the time at which
3312:./freertos/src/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:./freertos/src/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:./freertos/src/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:./freertos/src/tasks.c **** 			was called. */
3316:./freertos/src/tasks.c **** 			xReturn = pdTRUE;
 4493              		.loc 1 3316 12
 4494 0080 0123     		movs	r3, #1
 4495 0082 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 142


 4496 0084 15E0     		b	.L269
 4497              	.L270:
3317:./freertos/src/tasks.c **** 		}
3318:./freertos/src/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4498              		.loc 1 3318 27
 4499 0086 3B68     		ldr	r3, [r7]
 4500 0088 1B68     		ldr	r3, [r3]
 4501              		.loc 1 3318 10
 4502 008a 7A69     		ldr	r2, [r7, #20]
 4503 008c 9A42     		cmp	r2, r3
 4504 008e 0BD2     		bcs	.L271
3319:./freertos/src/tasks.c **** 		{
3320:./freertos/src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:./freertos/src/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4505              		.loc 1 3321 4
 4506 0090 3B68     		ldr	r3, [r7]
 4507 0092 1A68     		ldr	r2, [r3]
 4508              		.loc 1 3321 19
 4509 0094 7B69     		ldr	r3, [r7, #20]
 4510 0096 D21A     		subs	r2, r2, r3
 4511 0098 3B68     		ldr	r3, [r7]
 4512 009a 1A60     		str	r2, [r3]
3322:./freertos/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4513              		.loc 1 3322 4
 4514 009c 7868     		ldr	r0, [r7, #4]
 4515 009e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:./freertos/src/tasks.c **** 			xReturn = pdFALSE;
 4516              		.loc 1 3323 12
 4517 00a2 0023     		movs	r3, #0
 4518 00a4 FB61     		str	r3, [r7, #28]
 4519 00a6 04E0     		b	.L269
 4520              	.L271:
3324:./freertos/src/tasks.c **** 		}
3325:./freertos/src/tasks.c **** 		else
3326:./freertos/src/tasks.c **** 		{
3327:./freertos/src/tasks.c **** 			*pxTicksToWait = 0;
 4521              		.loc 1 3327 19
 4522 00a8 3B68     		ldr	r3, [r7]
 4523 00aa 0022     		movs	r2, #0
 4524 00ac 1A60     		str	r2, [r3]
3328:./freertos/src/tasks.c **** 			xReturn = pdTRUE;
 4525              		.loc 1 3328 12
 4526 00ae 0123     		movs	r3, #1
 4527 00b0 FB61     		str	r3, [r7, #28]
 4528              	.L269:
 4529              	.LBE174:
3329:./freertos/src/tasks.c **** 		}
3330:./freertos/src/tasks.c **** 	}
3331:./freertos/src/tasks.c **** 	taskEXIT_CRITICAL();
 4530              		.loc 1 3331 2
 4531 00b2 FFF7FEFF 		bl	vPortExitCritical
3332:./freertos/src/tasks.c **** 
3333:./freertos/src/tasks.c **** 	return xReturn;
 4532              		.loc 1 3333 9
 4533 00b6 FB69     		ldr	r3, [r7, #28]
3334:./freertos/src/tasks.c **** }
 4534              		.loc 1 3334 1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 143


 4535 00b8 1846     		mov	r0, r3
 4536 00ba 2037     		adds	r7, r7, #32
 4537              	.LCFI166:
 4538              		.cfi_def_cfa_offset 8
 4539 00bc BD46     		mov	sp, r7
 4540              	.LCFI167:
 4541              		.cfi_def_cfa_register 13
 4542              		@ sp needed
 4543 00be 80BD     		pop	{r7, pc}
 4544              	.L274:
 4545              		.align	2
 4546              	.L273:
 4547 00c0 00000000 		.word	xTickCount
 4548 00c4 00000000 		.word	xNumOfOverflows
 4549              		.cfi_endproc
 4550              	.LFE93:
 4552              		.section	.text.vTaskMissedYield,"ax",%progbits
 4553              		.align	1
 4554              		.global	vTaskMissedYield
 4555              		.syntax unified
 4556              		.thumb
 4557              		.thumb_func
 4559              	vTaskMissedYield:
 4560              	.LFB94:
3335:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3336:./freertos/src/tasks.c **** 
3337:./freertos/src/tasks.c **** void vTaskMissedYield( void )
3338:./freertos/src/tasks.c **** {
 4561              		.loc 1 3338 1
 4562              		.cfi_startproc
 4563              		@ args = 0, pretend = 0, frame = 0
 4564              		@ frame_needed = 1, uses_anonymous_args = 0
 4565              		@ link register save eliminated.
 4566 0000 80B4     		push	{r7}
 4567              	.LCFI168:
 4568              		.cfi_def_cfa_offset 4
 4569              		.cfi_offset 7, -4
 4570 0002 00AF     		add	r7, sp, #0
 4571              	.LCFI169:
 4572              		.cfi_def_cfa_register 7
3339:./freertos/src/tasks.c **** 	xYieldPending = pdTRUE;
 4573              		.loc 1 3339 16
 4574 0004 034B     		ldr	r3, .L276
 4575 0006 0122     		movs	r2, #1
 4576 0008 1A60     		str	r2, [r3]
3340:./freertos/src/tasks.c **** }
 4577              		.loc 1 3340 1
 4578 000a 00BF     		nop
 4579 000c BD46     		mov	sp, r7
 4580              	.LCFI170:
 4581              		.cfi_def_cfa_register 13
 4582              		@ sp needed
 4583 000e 80BC     		pop	{r7}
 4584              	.LCFI171:
 4585              		.cfi_restore 7
 4586              		.cfi_def_cfa_offset 0
 4587 0010 7047     		bx	lr
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 144


 4588              	.L277:
 4589 0012 00BF     		.align	2
 4590              	.L276:
 4591 0014 00000000 		.word	xYieldPending
 4592              		.cfi_endproc
 4593              	.LFE94:
 4595              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4596              		.align	1
 4597              		.global	uxTaskGetTaskNumber
 4598              		.syntax unified
 4599              		.thumb
 4600              		.thumb_func
 4602              	uxTaskGetTaskNumber:
 4603              	.LFB95:
3341:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3342:./freertos/src/tasks.c **** 
3343:./freertos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:./freertos/src/tasks.c **** 
3345:./freertos/src/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:./freertos/src/tasks.c **** 	{
 4604              		.loc 1 3346 2
 4605              		.cfi_startproc
 4606              		@ args = 0, pretend = 0, frame = 16
 4607              		@ frame_needed = 1, uses_anonymous_args = 0
 4608              		@ link register save eliminated.
 4609 0000 80B4     		push	{r7}
 4610              	.LCFI172:
 4611              		.cfi_def_cfa_offset 4
 4612              		.cfi_offset 7, -4
 4613 0002 85B0     		sub	sp, sp, #20
 4614              	.LCFI173:
 4615              		.cfi_def_cfa_offset 24
 4616 0004 00AF     		add	r7, sp, #0
 4617              	.LCFI174:
 4618              		.cfi_def_cfa_register 7
 4619 0006 7860     		str	r0, [r7, #4]
3347:./freertos/src/tasks.c **** 	UBaseType_t uxReturn;
3348:./freertos/src/tasks.c **** 	TCB_t const *pxTCB;
3349:./freertos/src/tasks.c **** 
3350:./freertos/src/tasks.c **** 		if( xTask != NULL )
 4620              		.loc 1 3350 5
 4621 0008 7B68     		ldr	r3, [r7, #4]
 4622 000a 002B     		cmp	r3, #0
 4623 000c 05D0     		beq	.L279
3351:./freertos/src/tasks.c **** 		{
3352:./freertos/src/tasks.c **** 			pxTCB = xTask;
 4624              		.loc 1 3352 10
 4625 000e 7B68     		ldr	r3, [r7, #4]
 4626 0010 BB60     		str	r3, [r7, #8]
3353:./freertos/src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4627              		.loc 1 3353 13
 4628 0012 BB68     		ldr	r3, [r7, #8]
 4629 0014 9B6C     		ldr	r3, [r3, #72]
 4630 0016 FB60     		str	r3, [r7, #12]
 4631 0018 01E0     		b	.L280
 4632              	.L279:
3354:./freertos/src/tasks.c **** 		}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 145


3355:./freertos/src/tasks.c **** 		else
3356:./freertos/src/tasks.c **** 		{
3357:./freertos/src/tasks.c **** 			uxReturn = 0U;
 4633              		.loc 1 3357 13
 4634 001a 0023     		movs	r3, #0
 4635 001c FB60     		str	r3, [r7, #12]
 4636              	.L280:
3358:./freertos/src/tasks.c **** 		}
3359:./freertos/src/tasks.c **** 
3360:./freertos/src/tasks.c **** 		return uxReturn;
 4637              		.loc 1 3360 10
 4638 001e FB68     		ldr	r3, [r7, #12]
3361:./freertos/src/tasks.c **** 	}
 4639              		.loc 1 3361 2
 4640 0020 1846     		mov	r0, r3
 4641 0022 1437     		adds	r7, r7, #20
 4642              	.LCFI175:
 4643              		.cfi_def_cfa_offset 4
 4644 0024 BD46     		mov	sp, r7
 4645              	.LCFI176:
 4646              		.cfi_def_cfa_register 13
 4647              		@ sp needed
 4648 0026 80BC     		pop	{r7}
 4649              	.LCFI177:
 4650              		.cfi_restore 7
 4651              		.cfi_def_cfa_offset 0
 4652 0028 7047     		bx	lr
 4653              		.cfi_endproc
 4654              	.LFE95:
 4656              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4657              		.align	1
 4658              		.global	vTaskSetTaskNumber
 4659              		.syntax unified
 4660              		.thumb
 4661              		.thumb_func
 4663              	vTaskSetTaskNumber:
 4664              	.LFB96:
3362:./freertos/src/tasks.c **** 
3363:./freertos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3365:./freertos/src/tasks.c **** 
3366:./freertos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:./freertos/src/tasks.c **** 
3368:./freertos/src/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:./freertos/src/tasks.c **** 	{
 4665              		.loc 1 3369 2
 4666              		.cfi_startproc
 4667              		@ args = 0, pretend = 0, frame = 16
 4668              		@ frame_needed = 1, uses_anonymous_args = 0
 4669              		@ link register save eliminated.
 4670 0000 80B4     		push	{r7}
 4671              	.LCFI178:
 4672              		.cfi_def_cfa_offset 4
 4673              		.cfi_offset 7, -4
 4674 0002 85B0     		sub	sp, sp, #20
 4675              	.LCFI179:
 4676              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 146


 4677 0004 00AF     		add	r7, sp, #0
 4678              	.LCFI180:
 4679              		.cfi_def_cfa_register 7
 4680 0006 7860     		str	r0, [r7, #4]
 4681 0008 3960     		str	r1, [r7]
3370:./freertos/src/tasks.c **** 	TCB_t * pxTCB;
3371:./freertos/src/tasks.c **** 
3372:./freertos/src/tasks.c **** 		if( xTask != NULL )
 4682              		.loc 1 3372 5
 4683 000a 7B68     		ldr	r3, [r7, #4]
 4684 000c 002B     		cmp	r3, #0
 4685 000e 04D0     		beq	.L284
3373:./freertos/src/tasks.c **** 		{
3374:./freertos/src/tasks.c **** 			pxTCB = xTask;
 4686              		.loc 1 3374 10
 4687 0010 7B68     		ldr	r3, [r7, #4]
 4688 0012 FB60     		str	r3, [r7, #12]
3375:./freertos/src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4689              		.loc 1 3375 24
 4690 0014 FB68     		ldr	r3, [r7, #12]
 4691 0016 3A68     		ldr	r2, [r7]
 4692 0018 9A64     		str	r2, [r3, #72]
 4693              	.L284:
3376:./freertos/src/tasks.c **** 		}
3377:./freertos/src/tasks.c **** 	}
 4694              		.loc 1 3377 2
 4695 001a 00BF     		nop
 4696 001c 1437     		adds	r7, r7, #20
 4697              	.LCFI181:
 4698              		.cfi_def_cfa_offset 4
 4699 001e BD46     		mov	sp, r7
 4700              	.LCFI182:
 4701              		.cfi_def_cfa_register 13
 4702              		@ sp needed
 4703 0020 80BC     		pop	{r7}
 4704              	.LCFI183:
 4705              		.cfi_restore 7
 4706              		.cfi_def_cfa_offset 0
 4707 0022 7047     		bx	lr
 4708              		.cfi_endproc
 4709              	.LFE96:
 4711              		.section	.text.prvIdleTask,"ax",%progbits
 4712              		.align	1
 4713              		.syntax unified
 4714              		.thumb
 4715              		.thumb_func
 4717              	prvIdleTask:
 4718              	.LFB97:
3378:./freertos/src/tasks.c **** 
3379:./freertos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:./freertos/src/tasks.c **** 
3381:./freertos/src/tasks.c **** /*
3382:./freertos/src/tasks.c ****  * -----------------------------------------------------------
3383:./freertos/src/tasks.c ****  * The Idle task.
3384:./freertos/src/tasks.c ****  * ----------------------------------------------------------
3385:./freertos/src/tasks.c ****  *
3386:./freertos/src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 147


3387:./freertos/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:./freertos/src/tasks.c ****  *
3389:./freertos/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:./freertos/src/tasks.c ****  *
3391:./freertos/src/tasks.c ****  */
3392:./freertos/src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:./freertos/src/tasks.c **** {
 4719              		.loc 1 3393 1
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 8
 4722              		@ frame_needed = 1, uses_anonymous_args = 0
 4723 0000 80B5     		push	{r7, lr}
 4724              	.LCFI184:
 4725              		.cfi_def_cfa_offset 8
 4726              		.cfi_offset 7, -8
 4727              		.cfi_offset 14, -4
 4728 0002 82B0     		sub	sp, sp, #8
 4729              	.LCFI185:
 4730              		.cfi_def_cfa_offset 16
 4731 0004 00AF     		add	r7, sp, #0
 4732              	.LCFI186:
 4733              		.cfi_def_cfa_register 7
 4734 0006 7860     		str	r0, [r7, #4]
 4735              	.L287:
3394:./freertos/src/tasks.c **** 	/* Stop warnings. */
3395:./freertos/src/tasks.c **** 	( void ) pvParameters;
3396:./freertos/src/tasks.c **** 
3397:./freertos/src/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:./freertos/src/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:./freertos/src/tasks.c **** 
3400:./freertos/src/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:./freertos/src/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:./freertos/src/tasks.c **** 	any. */
3403:./freertos/src/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:./freertos/src/tasks.c **** 
3405:./freertos/src/tasks.c **** 	for( ;; )
3406:./freertos/src/tasks.c **** 	{
3407:./freertos/src/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:./freertos/src/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:./freertos/src/tasks.c **** 		prvCheckTasksWaitingTermination();
 4736              		.loc 1 3409 3
 4737 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:./freertos/src/tasks.c **** 
3411:./freertos/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:./freertos/src/tasks.c **** 		{
3413:./freertos/src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:./freertos/src/tasks.c **** 			see if any other task has become available.  If we are using
3415:./freertos/src/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:./freertos/src/tasks.c **** 			will automatically get the processor anyway. */
3417:./freertos/src/tasks.c **** 			taskYIELD();
3418:./freertos/src/tasks.c **** 		}
3419:./freertos/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:./freertos/src/tasks.c **** 
3421:./freertos/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:./freertos/src/tasks.c **** 		{
3423:./freertos/src/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:./freertos/src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 148


3425:./freertos/src/tasks.c **** 			to run then the idle task should yield before the end of the
3426:./freertos/src/tasks.c **** 			timeslice.
3427:./freertos/src/tasks.c **** 
3428:./freertos/src/tasks.c **** 			A critical region is not required here as we are just reading from
3429:./freertos/src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:./freertos/src/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:./freertos/src/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:./freertos/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4738              		.loc 1 3432 8
 4739 000c 064B     		ldr	r3, .L288
 4740 000e 1B68     		ldr	r3, [r3]
 4741              		.loc 1 3432 6
 4742 0010 012B     		cmp	r3, #1
 4743 0012 F9D9     		bls	.L287
3433:./freertos/src/tasks.c **** 			{
3434:./freertos/src/tasks.c **** 				taskYIELD();
 4744              		.loc 1 3434 5
 4745 0014 054B     		ldr	r3, .L288+4
 4746 0016 4FF08052 		mov	r2, #268435456
 4747 001a 1A60     		str	r2, [r3]
 4748              		.syntax unified
 4749              	@ 3434 "./freertos/src/tasks.c" 1
 4750 001c BFF34F8F 		dsb
 4751              	@ 0 "" 2
 4752              	@ 3434 "./freertos/src/tasks.c" 1
 4753 0020 BFF36F8F 		isb
 4754              	@ 0 "" 2
3409:./freertos/src/tasks.c **** 
 4755              		.loc 1 3409 3
 4756              		.thumb
 4757              		.syntax unified
 4758 0024 F0E7     		b	.L287
 4759              	.L289:
 4760 0026 00BF     		.align	2
 4761              	.L288:
 4762 0028 00000000 		.word	pxReadyTasksLists
 4763 002c 04ED00E0 		.word	-536810236
 4764              		.cfi_endproc
 4765              	.LFE97:
 4767              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4768              		.align	1
 4769              		.syntax unified
 4770              		.thumb
 4771              		.thumb_func
 4773              	prvInitialiseTaskLists:
 4774              	.LFB98:
3435:./freertos/src/tasks.c **** 			}
3436:./freertos/src/tasks.c **** 			else
3437:./freertos/src/tasks.c **** 			{
3438:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:./freertos/src/tasks.c **** 			}
3440:./freertos/src/tasks.c **** 		}
3441:./freertos/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:./freertos/src/tasks.c **** 
3443:./freertos/src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:./freertos/src/tasks.c **** 		{
3445:./freertos/src/tasks.c **** 			extern void vApplicationIdleHook( void );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 149


3446:./freertos/src/tasks.c **** 
3447:./freertos/src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:./freertos/src/tasks.c **** 			allows the application designer to add background functionality
3449:./freertos/src/tasks.c **** 			without the overhead of a separate task.
3450:./freertos/src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:./freertos/src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:./freertos/src/tasks.c **** 			vApplicationIdleHook();
3453:./freertos/src/tasks.c **** 		}
3454:./freertos/src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:./freertos/src/tasks.c **** 
3456:./freertos/src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:./freertos/src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:./freertos/src/tasks.c **** 		user defined low power mode	implementations require
3459:./freertos/src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:./freertos/src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:./freertos/src/tasks.c **** 		{
3462:./freertos/src/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:./freertos/src/tasks.c **** 
3464:./freertos/src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:./freertos/src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:./freertos/src/tasks.c **** 			test of the expected idle time is performed without the
3467:./freertos/src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:./freertos/src/tasks.c **** 			valid. */
3469:./freertos/src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:./freertos/src/tasks.c **** 
3471:./freertos/src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:./freertos/src/tasks.c **** 			{
3473:./freertos/src/tasks.c **** 				vTaskSuspendAll();
3474:./freertos/src/tasks.c **** 				{
3475:./freertos/src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:./freertos/src/tasks.c **** 					time can be sampled again, and this time its value can
3477:./freertos/src/tasks.c **** 					be used. */
3478:./freertos/src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:./freertos/src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:./freertos/src/tasks.c **** 
3481:./freertos/src/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:./freertos/src/tasks.c **** 					if the application does not want
3483:./freertos/src/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:./freertos/src/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:./freertos/src/tasks.c **** 
3486:./freertos/src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:./freertos/src/tasks.c **** 					{
3488:./freertos/src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:./freertos/src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:./freertos/src/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:./freertos/src/tasks.c **** 					}
3492:./freertos/src/tasks.c **** 					else
3493:./freertos/src/tasks.c **** 					{
3494:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:./freertos/src/tasks.c **** 					}
3496:./freertos/src/tasks.c **** 				}
3497:./freertos/src/tasks.c **** 				( void ) xTaskResumeAll();
3498:./freertos/src/tasks.c **** 			}
3499:./freertos/src/tasks.c **** 			else
3500:./freertos/src/tasks.c **** 			{
3501:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:./freertos/src/tasks.c **** 			}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 150


3503:./freertos/src/tasks.c **** 		}
3504:./freertos/src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:./freertos/src/tasks.c **** 	}
3506:./freertos/src/tasks.c **** }
3507:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3508:./freertos/src/tasks.c **** 
3509:./freertos/src/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:./freertos/src/tasks.c **** 
3511:./freertos/src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:./freertos/src/tasks.c **** 	{
3513:./freertos/src/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:./freertos/src/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:./freertos/src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:./freertos/src/tasks.c **** 
3517:./freertos/src/tasks.c **** 		/* This function must be called from a critical section. */
3518:./freertos/src/tasks.c **** 
3519:./freertos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:./freertos/src/tasks.c **** 		{
3521:./freertos/src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:./freertos/src/tasks.c **** 			eReturn = eAbortSleep;
3523:./freertos/src/tasks.c **** 		}
3524:./freertos/src/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:./freertos/src/tasks.c **** 		{
3526:./freertos/src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:./freertos/src/tasks.c **** 			eReturn = eAbortSleep;
3528:./freertos/src/tasks.c **** 		}
3529:./freertos/src/tasks.c **** 		else
3530:./freertos/src/tasks.c **** 		{
3531:./freertos/src/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:./freertos/src/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:./freertos/src/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:./freertos/src/tasks.c **** 			interrupts. */
3535:./freertos/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:./freertos/src/tasks.c **** 			{
3537:./freertos/src/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:./freertos/src/tasks.c **** 			}
3539:./freertos/src/tasks.c **** 			else
3540:./freertos/src/tasks.c **** 			{
3541:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:./freertos/src/tasks.c **** 			}
3543:./freertos/src/tasks.c **** 		}
3544:./freertos/src/tasks.c **** 
3545:./freertos/src/tasks.c **** 		return eReturn;
3546:./freertos/src/tasks.c **** 	}
3547:./freertos/src/tasks.c **** 
3548:./freertos/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3550:./freertos/src/tasks.c **** 
3551:./freertos/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:./freertos/src/tasks.c **** 
3553:./freertos/src/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:./freertos/src/tasks.c **** 	{
3555:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
3556:./freertos/src/tasks.c **** 
3557:./freertos/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:./freertos/src/tasks.c **** 		{
3559:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 151


3560:./freertos/src/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:./freertos/src/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:./freertos/src/tasks.c **** 		}
3563:./freertos/src/tasks.c **** 	}
3564:./freertos/src/tasks.c **** 
3565:./freertos/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3567:./freertos/src/tasks.c **** 
3568:./freertos/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:./freertos/src/tasks.c **** 
3570:./freertos/src/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:./freertos/src/tasks.c **** 	{
3572:./freertos/src/tasks.c **** 	void *pvReturn = NULL;
3573:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
3574:./freertos/src/tasks.c **** 
3575:./freertos/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:./freertos/src/tasks.c **** 		{
3577:./freertos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:./freertos/src/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:./freertos/src/tasks.c **** 		}
3580:./freertos/src/tasks.c **** 		else
3581:./freertos/src/tasks.c **** 		{
3582:./freertos/src/tasks.c **** 			pvReturn = NULL;
3583:./freertos/src/tasks.c **** 		}
3584:./freertos/src/tasks.c **** 
3585:./freertos/src/tasks.c **** 		return pvReturn;
3586:./freertos/src/tasks.c **** 	}
3587:./freertos/src/tasks.c **** 
3588:./freertos/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3590:./freertos/src/tasks.c **** 
3591:./freertos/src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:./freertos/src/tasks.c **** 
3593:./freertos/src/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:./freertos/src/tasks.c **** 	{
3595:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
3596:./freertos/src/tasks.c **** 
3597:./freertos/src/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:./freertos/src/tasks.c **** 		the calling task. */
3599:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:./freertos/src/tasks.c **** 
3601:./freertos/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:./freertos/src/tasks.c **** 	}
3603:./freertos/src/tasks.c **** 
3604:./freertos/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3606:./freertos/src/tasks.c **** 
3607:./freertos/src/tasks.c **** static void prvInitialiseTaskLists( void )
3608:./freertos/src/tasks.c **** {
 4775              		.loc 1 3608 1
 4776              		.cfi_startproc
 4777              		@ args = 0, pretend = 0, frame = 8
 4778              		@ frame_needed = 1, uses_anonymous_args = 0
 4779 0000 80B5     		push	{r7, lr}
 4780              	.LCFI187:
 4781              		.cfi_def_cfa_offset 8
 4782              		.cfi_offset 7, -8
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 152


 4783              		.cfi_offset 14, -4
 4784 0002 82B0     		sub	sp, sp, #8
 4785              	.LCFI188:
 4786              		.cfi_def_cfa_offset 16
 4787 0004 00AF     		add	r7, sp, #0
 4788              	.LCFI189:
 4789              		.cfi_def_cfa_register 7
3609:./freertos/src/tasks.c **** UBaseType_t uxPriority;
3610:./freertos/src/tasks.c **** 
3611:./freertos/src/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4790              		.loc 1 3611 18
 4791 0006 0023     		movs	r3, #0
 4792 0008 7B60     		str	r3, [r7, #4]
 4793              		.loc 1 3611 2
 4794 000a 0CE0     		b	.L291
 4795              	.L292:
3612:./freertos/src/tasks.c **** 	{
3613:./freertos/src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4796              		.loc 1 3613 3
 4797 000c 7A68     		ldr	r2, [r7, #4]
 4798 000e 1346     		mov	r3, r2
 4799 0010 9B00     		lsls	r3, r3, #2
 4800 0012 1344     		add	r3, r3, r2
 4801 0014 9B00     		lsls	r3, r3, #2
 4802 0016 124A     		ldr	r2, .L293
 4803 0018 1344     		add	r3, r3, r2
 4804 001a 1846     		mov	r0, r3
 4805 001c FFF7FEFF 		bl	vListInitialise
3611:./freertos/src/tasks.c **** 	{
 4806              		.loc 1 3611 101 discriminator 3
 4807 0020 7B68     		ldr	r3, [r7, #4]
 4808 0022 0133     		adds	r3, r3, #1
 4809 0024 7B60     		str	r3, [r7, #4]
 4810              	.L291:
3611:./freertos/src/tasks.c **** 	{
 4811              		.loc 1 3611 51 discriminator 1
 4812 0026 7B68     		ldr	r3, [r7, #4]
 4813 0028 042B     		cmp	r3, #4
 4814 002a EFD9     		bls	.L292
3614:./freertos/src/tasks.c **** 	}
3615:./freertos/src/tasks.c **** 
3616:./freertos/src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4815              		.loc 1 3616 2
 4816 002c 0D48     		ldr	r0, .L293+4
 4817 002e FFF7FEFF 		bl	vListInitialise
3617:./freertos/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4818              		.loc 1 3617 2
 4819 0032 0D48     		ldr	r0, .L293+8
 4820 0034 FFF7FEFF 		bl	vListInitialise
3618:./freertos/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4821              		.loc 1 3618 2
 4822 0038 0C48     		ldr	r0, .L293+12
 4823 003a FFF7FEFF 		bl	vListInitialise
3619:./freertos/src/tasks.c **** 
3620:./freertos/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:./freertos/src/tasks.c **** 	{
3622:./freertos/src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 153


 4824              		.loc 1 3622 3
 4825 003e 0C48     		ldr	r0, .L293+16
 4826 0040 FFF7FEFF 		bl	vListInitialise
3623:./freertos/src/tasks.c **** 	}
3624:./freertos/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:./freertos/src/tasks.c **** 
3626:./freertos/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:./freertos/src/tasks.c **** 	{
3628:./freertos/src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4827              		.loc 1 3628 3
 4828 0044 0B48     		ldr	r0, .L293+20
 4829 0046 FFF7FEFF 		bl	vListInitialise
3629:./freertos/src/tasks.c **** 	}
3630:./freertos/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:./freertos/src/tasks.c **** 
3632:./freertos/src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:./freertos/src/tasks.c **** 	using list2. */
3634:./freertos/src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4830              		.loc 1 3634 20
 4831 004a 0B4B     		ldr	r3, .L293+24
 4832 004c 054A     		ldr	r2, .L293+4
 4833 004e 1A60     		str	r2, [r3]
3635:./freertos/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4834              		.loc 1 3635 28
 4835 0050 0A4B     		ldr	r3, .L293+28
 4836 0052 054A     		ldr	r2, .L293+8
 4837 0054 1A60     		str	r2, [r3]
3636:./freertos/src/tasks.c **** }
 4838              		.loc 1 3636 1
 4839 0056 00BF     		nop
 4840 0058 0837     		adds	r7, r7, #8
 4841              	.LCFI190:
 4842              		.cfi_def_cfa_offset 8
 4843 005a BD46     		mov	sp, r7
 4844              	.LCFI191:
 4845              		.cfi_def_cfa_register 13
 4846              		@ sp needed
 4847 005c 80BD     		pop	{r7, pc}
 4848              	.L294:
 4849 005e 00BF     		.align	2
 4850              	.L293:
 4851 0060 00000000 		.word	pxReadyTasksLists
 4852 0064 00000000 		.word	xDelayedTaskList1
 4853 0068 00000000 		.word	xDelayedTaskList2
 4854 006c 00000000 		.word	xPendingReadyList
 4855 0070 00000000 		.word	xTasksWaitingTermination
 4856 0074 00000000 		.word	xSuspendedTaskList
 4857 0078 00000000 		.word	pxDelayedTaskList
 4858 007c 00000000 		.word	pxOverflowDelayedTaskList
 4859              		.cfi_endproc
 4860              	.LFE98:
 4862              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4863              		.align	1
 4864              		.syntax unified
 4865              		.thumb
 4866              		.thumb_func
 4868              	prvCheckTasksWaitingTermination:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 154


 4869              	.LFB99:
3637:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3638:./freertos/src/tasks.c **** 
3639:./freertos/src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:./freertos/src/tasks.c **** {
 4870              		.loc 1 3640 1
 4871              		.cfi_startproc
 4872              		@ args = 0, pretend = 0, frame = 8
 4873              		@ frame_needed = 1, uses_anonymous_args = 0
 4874 0000 80B5     		push	{r7, lr}
 4875              	.LCFI192:
 4876              		.cfi_def_cfa_offset 8
 4877              		.cfi_offset 7, -8
 4878              		.cfi_offset 14, -4
 4879 0002 82B0     		sub	sp, sp, #8
 4880              	.LCFI193:
 4881              		.cfi_def_cfa_offset 16
 4882 0004 00AF     		add	r7, sp, #0
 4883              	.LCFI194:
 4884              		.cfi_def_cfa_register 7
 4885              	.LBB175:
3641:./freertos/src/tasks.c **** 
3642:./freertos/src/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:./freertos/src/tasks.c **** 
3644:./freertos/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:./freertos/src/tasks.c **** 	{
3646:./freertos/src/tasks.c **** 		TCB_t *pxTCB;
3647:./freertos/src/tasks.c **** 
3648:./freertos/src/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:./freertos/src/tasks.c **** 		being called too often in the idle task. */
3650:./freertos/src/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4886              		.loc 1 3650 8
 4887 0006 19E0     		b	.L296
 4888              	.L297:
3651:./freertos/src/tasks.c **** 		{
3652:./freertos/src/tasks.c **** 			taskENTER_CRITICAL();
 4889              		.loc 1 3652 4
 4890 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:./freertos/src/tasks.c **** 			{
3654:./freertos/src/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 4891              		.loc 1 3654 13
 4892 000c 104B     		ldr	r3, .L298
 4893 000e DB68     		ldr	r3, [r3, #12]
 4894              		.loc 1 3654 11
 4895 0010 DB68     		ldr	r3, [r3, #12]
 4896 0012 7B60     		str	r3, [r7, #4]
3655:./freertos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4897              		.loc 1 3655 14
 4898 0014 7B68     		ldr	r3, [r7, #4]
 4899 0016 0433     		adds	r3, r3, #4
 4900 0018 1846     		mov	r0, r3
 4901 001a FFF7FEFF 		bl	uxListRemove
3656:./freertos/src/tasks.c **** 				--uxCurrentNumberOfTasks;
 4902              		.loc 1 3656 5
 4903 001e 0D4B     		ldr	r3, .L298+4
 4904 0020 1B68     		ldr	r3, [r3]
 4905 0022 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 155


 4906 0024 0B4A     		ldr	r2, .L298+4
 4907 0026 1360     		str	r3, [r2]
3657:./freertos/src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 4908              		.loc 1 3657 5
 4909 0028 0B4B     		ldr	r3, .L298+8
 4910 002a 1B68     		ldr	r3, [r3]
 4911 002c 013B     		subs	r3, r3, #1
 4912 002e 0A4A     		ldr	r2, .L298+8
 4913 0030 1360     		str	r3, [r2]
3658:./freertos/src/tasks.c **** 			}
3659:./freertos/src/tasks.c **** 			taskEXIT_CRITICAL();
 4914              		.loc 1 3659 4
 4915 0032 FFF7FEFF 		bl	vPortExitCritical
3660:./freertos/src/tasks.c **** 
3661:./freertos/src/tasks.c **** 			prvDeleteTCB( pxTCB );
 4916              		.loc 1 3661 4
 4917 0036 7868     		ldr	r0, [r7, #4]
 4918 0038 FFF7FEFF 		bl	prvDeleteTCB
 4919              	.L296:
3650:./freertos/src/tasks.c **** 		{
 4920              		.loc 1 3650 39
 4921 003c 064B     		ldr	r3, .L298+8
 4922 003e 1B68     		ldr	r3, [r3]
 4923 0040 002B     		cmp	r3, #0
 4924 0042 E1D1     		bne	.L297
 4925              	.LBE175:
3662:./freertos/src/tasks.c **** 		}
3663:./freertos/src/tasks.c **** 	}
3664:./freertos/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:./freertos/src/tasks.c **** }
 4926              		.loc 1 3665 1
 4927 0044 00BF     		nop
 4928 0046 00BF     		nop
 4929 0048 0837     		adds	r7, r7, #8
 4930              	.LCFI195:
 4931              		.cfi_def_cfa_offset 8
 4932 004a BD46     		mov	sp, r7
 4933              	.LCFI196:
 4934              		.cfi_def_cfa_register 13
 4935              		@ sp needed
 4936 004c 80BD     		pop	{r7, pc}
 4937              	.L299:
 4938 004e 00BF     		.align	2
 4939              	.L298:
 4940 0050 00000000 		.word	xTasksWaitingTermination
 4941 0054 00000000 		.word	uxCurrentNumberOfTasks
 4942 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4943              		.cfi_endproc
 4944              	.LFE99:
 4946              		.section	.text.vTaskGetInfo,"ax",%progbits
 4947              		.align	1
 4948              		.global	vTaskGetInfo
 4949              		.syntax unified
 4950              		.thumb
 4951              		.thumb_func
 4953              	vTaskGetInfo:
 4954              	.LFB100:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 156


3666:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3667:./freertos/src/tasks.c **** 
3668:./freertos/src/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:./freertos/src/tasks.c **** 
3670:./freertos/src/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:./freertos/src/tasks.c **** 	{
 4955              		.loc 1 3671 2
 4956              		.cfi_startproc
 4957              		@ args = 0, pretend = 0, frame = 24
 4958              		@ frame_needed = 1, uses_anonymous_args = 0
 4959 0000 80B5     		push	{r7, lr}
 4960              	.LCFI197:
 4961              		.cfi_def_cfa_offset 8
 4962              		.cfi_offset 7, -8
 4963              		.cfi_offset 14, -4
 4964 0002 86B0     		sub	sp, sp, #24
 4965              	.LCFI198:
 4966              		.cfi_def_cfa_offset 32
 4967 0004 00AF     		add	r7, sp, #0
 4968              	.LCFI199:
 4969              		.cfi_def_cfa_register 7
 4970 0006 F860     		str	r0, [r7, #12]
 4971 0008 B960     		str	r1, [r7, #8]
 4972 000a 7A60     		str	r2, [r7, #4]
 4973 000c FB70     		strb	r3, [r7, #3]
3672:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
3673:./freertos/src/tasks.c **** 
3674:./freertos/src/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4974              		.loc 1 3675 11
 4975 000e FB68     		ldr	r3, [r7, #12]
 4976 0010 002B     		cmp	r3, #0
 4977 0012 02D1     		bne	.L301
 4978              		.loc 1 3675 11 is_stmt 0 discriminator 1
 4979 0014 2C4B     		ldr	r3, .L310
 4980 0016 1B68     		ldr	r3, [r3]
 4981 0018 00E0     		b	.L302
 4982              	.L301:
 4983              		.loc 1 3675 11 discriminator 2
 4984 001a FB68     		ldr	r3, [r7, #12]
 4985              	.L302:
 4986              		.loc 1 3675 9 is_stmt 1 discriminator 4
 4987 001c 7B61     		str	r3, [r7, #20]
3676:./freertos/src/tasks.c **** 
3677:./freertos/src/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4988              		.loc 1 3677 25
 4989 001e BB68     		ldr	r3, [r7, #8]
 4990 0020 7A69     		ldr	r2, [r7, #20]
 4991 0022 1A60     		str	r2, [r3]
3678:./freertos/src/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4992              		.loc 1 3678 47
 4993 0024 7B69     		ldr	r3, [r7, #20]
 4994 0026 03F13402 		add	r2, r3, #52
 4995              		.loc 1 3678 28
 4996 002a BB68     		ldr	r3, [r7, #8]
 4997 002c 5A60     		str	r2, [r3, #4]
3679:./freertos/src/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 157


 4998              		.loc 1 3679 42
 4999 002e 7B69     		ldr	r3, [r7, #20]
 5000 0030 DA6A     		ldr	r2, [r3, #44]
 5001              		.loc 1 3679 35
 5002 0032 BB68     		ldr	r3, [r7, #8]
 5003 0034 1A61     		str	r2, [r3, #16]
3680:./freertos/src/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5004              		.loc 1 3680 36
 5005 0036 7B69     		ldr	r3, [r7, #20]
 5006 0038 1A6B     		ldr	r2, [r3, #48]
 5007              		.loc 1 3680 29
 5008 003a BB68     		ldr	r3, [r7, #8]
 5009 003c DA61     		str	r2, [r3, #28]
3681:./freertos/src/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5010              		.loc 1 3681 36
 5011 003e 7B69     		ldr	r3, [r7, #20]
 5012 0040 5A6C     		ldr	r2, [r3, #68]
 5013              		.loc 1 3681 29
 5014 0042 BB68     		ldr	r3, [r7, #8]
 5015 0044 9A60     		str	r2, [r3, #8]
3682:./freertos/src/tasks.c **** 
3683:./freertos/src/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:./freertos/src/tasks.c **** 		{
3685:./freertos/src/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5016              		.loc 1 3685 40
 5017 0046 7B69     		ldr	r3, [r7, #20]
 5018 0048 DA6C     		ldr	r2, [r3, #76]
 5019              		.loc 1 3685 33
 5020 004a BB68     		ldr	r3, [r7, #8]
 5021 004c 5A61     		str	r2, [r3, #20]
3686:./freertos/src/tasks.c **** 		}
3687:./freertos/src/tasks.c **** 		#else
3688:./freertos/src/tasks.c **** 		{
3689:./freertos/src/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:./freertos/src/tasks.c **** 		}
3691:./freertos/src/tasks.c **** 		#endif
3692:./freertos/src/tasks.c **** 
3693:./freertos/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:./freertos/src/tasks.c **** 		{
3695:./freertos/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:./freertos/src/tasks.c **** 		}
3697:./freertos/src/tasks.c **** 		#else
3698:./freertos/src/tasks.c **** 		{
3699:./freertos/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5022              		.loc 1 3699 35
 5023 004e BB68     		ldr	r3, [r7, #8]
 5024 0050 0022     		movs	r2, #0
 5025 0052 9A61     		str	r2, [r3, #24]
3700:./freertos/src/tasks.c **** 		}
3701:./freertos/src/tasks.c **** 		#endif
3702:./freertos/src/tasks.c **** 
3703:./freertos/src/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:./freertos/src/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:./freertos/src/tasks.c **** 		state is just set to whatever is passed in. */
3706:./freertos/src/tasks.c **** 		if( eState != eInvalid )
 5026              		.loc 1 3706 5
 5027 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 158


 5028 0056 052B     		cmp	r3, #5
 5029 0058 1AD0     		beq	.L303
3707:./freertos/src/tasks.c **** 		{
3708:./freertos/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5030              		.loc 1 3708 14
 5031 005a 1B4B     		ldr	r3, .L310
 5032 005c 1B68     		ldr	r3, [r3]
 5033              		.loc 1 3708 6
 5034 005e 7A69     		ldr	r2, [r7, #20]
 5035 0060 9A42     		cmp	r2, r3
 5036 0062 03D1     		bne	.L304
3709:./freertos/src/tasks.c **** 			{
3710:./freertos/src/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5037              		.loc 1 3710 33
 5038 0064 BB68     		ldr	r3, [r7, #8]
 5039 0066 0022     		movs	r2, #0
 5040 0068 1A73     		strb	r2, [r3, #12]
 5041 006a 18E0     		b	.L305
 5042              	.L304:
3711:./freertos/src/tasks.c **** 			}
3712:./freertos/src/tasks.c **** 			else
3713:./freertos/src/tasks.c **** 			{
3714:./freertos/src/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5043              		.loc 1 3714 33
 5044 006c BB68     		ldr	r3, [r7, #8]
 5045 006e FA78     		ldrb	r2, [r7, #3]
 5046 0070 1A73     		strb	r2, [r3, #12]
3715:./freertos/src/tasks.c **** 
3716:./freertos/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:./freertos/src/tasks.c **** 				{
3718:./freertos/src/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:./freertos/src/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:./freertos/src/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:./freertos/src/tasks.c **** 					if( eState == eSuspended )
 5047              		.loc 1 3721 8
 5048 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5049 0074 032B     		cmp	r3, #3
 5050 0076 12D1     		bne	.L305
3722:./freertos/src/tasks.c **** 					{
3723:./freertos/src/tasks.c **** 						vTaskSuspendAll();
 5051              		.loc 1 3723 7
 5052 0078 FFF7FEFF 		bl	vTaskSuspendAll
3724:./freertos/src/tasks.c **** 						{
3725:./freertos/src/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5053              		.loc 1 3725 12
 5054 007c 7B69     		ldr	r3, [r7, #20]
 5055 007e 9B6A     		ldr	r3, [r3, #40]
 5056              		.loc 1 3725 10
 5057 0080 002B     		cmp	r3, #0
 5058 0082 02D0     		beq	.L306
3726:./freertos/src/tasks.c **** 							{
3727:./freertos/src/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5059              		.loc 1 3727 37
 5060 0084 BB68     		ldr	r3, [r7, #8]
 5061 0086 0222     		movs	r2, #2
 5062 0088 1A73     		strb	r2, [r3, #12]
 5063              	.L306:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 159


3728:./freertos/src/tasks.c **** 							}
3729:./freertos/src/tasks.c **** 						}
3730:./freertos/src/tasks.c **** 						( void ) xTaskResumeAll();
 5064              		.loc 1 3730 16
 5065 008a FFF7FEFF 		bl	xTaskResumeAll
 5066 008e 06E0     		b	.L305
 5067              	.L303:
3731:./freertos/src/tasks.c **** 					}
3732:./freertos/src/tasks.c **** 				}
3733:./freertos/src/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:./freertos/src/tasks.c **** 			}
3735:./freertos/src/tasks.c **** 		}
3736:./freertos/src/tasks.c **** 		else
3737:./freertos/src/tasks.c **** 		{
3738:./freertos/src/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5068              		.loc 1 3738 34
 5069 0090 7869     		ldr	r0, [r7, #20]
 5070 0092 FFF7FEFF 		bl	eTaskGetState
 5071 0096 0346     		mov	r3, r0
 5072 0098 1A46     		mov	r2, r3
 5073              		.loc 1 3738 32 discriminator 1
 5074 009a BB68     		ldr	r3, [r7, #8]
 5075 009c 1A73     		strb	r2, [r3, #12]
 5076              	.L305:
3739:./freertos/src/tasks.c **** 		}
3740:./freertos/src/tasks.c **** 
3741:./freertos/src/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:./freertos/src/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:./freertos/src/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5077              		.loc 1 3743 5
 5078 009e 7B68     		ldr	r3, [r7, #4]
 5079 00a0 002B     		cmp	r3, #0
 5080 00a2 09D0     		beq	.L307
3744:./freertos/src/tasks.c **** 		{
3745:./freertos/src/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:./freertos/src/tasks.c **** 			{
3747:./freertos/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:./freertos/src/tasks.c **** 			}
3749:./freertos/src/tasks.c **** 			#else
3750:./freertos/src/tasks.c **** 			{
3751:./freertos/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5081              		.loc 1 3751 89
 5082 00a4 7B69     		ldr	r3, [r7, #20]
 5083 00a6 1B6B     		ldr	r3, [r3, #48]
 5084              		.loc 1 3751 42
 5085 00a8 1846     		mov	r0, r3
 5086 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5087 00ae 0346     		mov	r3, r0
 5088 00b0 1A46     		mov	r2, r3
 5089              		.loc 1 3751 40 discriminator 1
 5090 00b2 BB68     		ldr	r3, [r7, #8]
 5091 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:./freertos/src/tasks.c **** 			}
3753:./freertos/src/tasks.c **** 			#endif
3754:./freertos/src/tasks.c **** 		}
3755:./freertos/src/tasks.c **** 		else
3756:./freertos/src/tasks.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 160


3757:./freertos/src/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:./freertos/src/tasks.c **** 		}
3759:./freertos/src/tasks.c **** 	}
 5092              		.loc 1 3759 2
 5093 00b6 02E0     		b	.L309
 5094              	.L307:
3757:./freertos/src/tasks.c **** 		}
 5095              		.loc 1 3757 39
 5096 00b8 BB68     		ldr	r3, [r7, #8]
 5097 00ba 0022     		movs	r2, #0
 5098 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5099              	.L309:
 5100              		.loc 1 3759 2
 5101 00be 00BF     		nop
 5102 00c0 1837     		adds	r7, r7, #24
 5103              	.LCFI200:
 5104              		.cfi_def_cfa_offset 8
 5105 00c2 BD46     		mov	sp, r7
 5106              	.LCFI201:
 5107              		.cfi_def_cfa_register 13
 5108              		@ sp needed
 5109 00c4 80BD     		pop	{r7, pc}
 5110              	.L311:
 5111 00c6 00BF     		.align	2
 5112              	.L310:
 5113 00c8 00000000 		.word	pxCurrentTCB
 5114              		.cfi_endproc
 5115              	.LFE100:
 5117              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5118              		.align	1
 5119              		.syntax unified
 5120              		.thumb
 5121              		.thumb_func
 5123              	prvListTasksWithinSingleList:
 5124              	.LFB101:
3760:./freertos/src/tasks.c **** 
3761:./freertos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3763:./freertos/src/tasks.c **** 
3764:./freertos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:./freertos/src/tasks.c **** 
3766:./freertos/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:./freertos/src/tasks.c **** 	{
 5125              		.loc 1 3767 2
 5126              		.cfi_startproc
 5127              		@ args = 0, pretend = 0, frame = 40
 5128              		@ frame_needed = 1, uses_anonymous_args = 0
 5129 0000 80B5     		push	{r7, lr}
 5130              	.LCFI202:
 5131              		.cfi_def_cfa_offset 8
 5132              		.cfi_offset 7, -8
 5133              		.cfi_offset 14, -4
 5134 0002 8AB0     		sub	sp, sp, #40
 5135              	.LCFI203:
 5136              		.cfi_def_cfa_offset 48
 5137 0004 00AF     		add	r7, sp, #0
 5138              	.LCFI204:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 161


 5139              		.cfi_def_cfa_register 7
 5140 0006 F860     		str	r0, [r7, #12]
 5141 0008 B960     		str	r1, [r7, #8]
 5142 000a 1346     		mov	r3, r2
 5143 000c FB71     		strb	r3, [r7, #7]
3768:./freertos/src/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:./freertos/src/tasks.c **** 	UBaseType_t uxTask = 0;
 5144              		.loc 1 3769 14
 5145 000e 0023     		movs	r3, #0
 5146 0010 7B62     		str	r3, [r7, #36]
3770:./freertos/src/tasks.c **** 
3771:./freertos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5147              		.loc 1 3771 7
 5148 0012 BB68     		ldr	r3, [r7, #8]
 5149 0014 1B68     		ldr	r3, [r3]
 5150              		.loc 1 3771 5
 5151 0016 002B     		cmp	r3, #0
 5152 0018 3FD0     		beq	.L313
 5153              	.LBB176:
3772:./freertos/src/tasks.c **** 		{
3773:./freertos/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5154              		.loc 1 3773 4
 5155 001a BB68     		ldr	r3, [r7, #8]
 5156 001c 3B62     		str	r3, [r7, #32]
 5157 001e 3B6A     		ldr	r3, [r7, #32]
 5158 0020 5B68     		ldr	r3, [r3, #4]
 5159 0022 5A68     		ldr	r2, [r3, #4]
 5160 0024 3B6A     		ldr	r3, [r7, #32]
 5161 0026 5A60     		str	r2, [r3, #4]
 5162 0028 3B6A     		ldr	r3, [r7, #32]
 5163 002a 5A68     		ldr	r2, [r3, #4]
 5164 002c 3B6A     		ldr	r3, [r7, #32]
 5165 002e 0833     		adds	r3, r3, #8
 5166 0030 9A42     		cmp	r2, r3
 5167 0032 04D1     		bne	.L314
 5168              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5169 0034 3B6A     		ldr	r3, [r7, #32]
 5170 0036 5B68     		ldr	r3, [r3, #4]
 5171 0038 5A68     		ldr	r2, [r3, #4]
 5172 003a 3B6A     		ldr	r3, [r7, #32]
 5173 003c 5A60     		str	r2, [r3, #4]
 5174              	.L314:
 5175              		.loc 1 3773 4 discriminator 3
 5176 003e 3B6A     		ldr	r3, [r7, #32]
 5177 0040 5B68     		ldr	r3, [r3, #4]
 5178 0042 DB68     		ldr	r3, [r3, #12]
 5179 0044 FB61     		str	r3, [r7, #28]
 5180              	.L316:
 5181              	.LBE176:
 5182              	.LBB177:
3774:./freertos/src/tasks.c **** 
3775:./freertos/src/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:./freertos/src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:./freertos/src/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:./freertos/src/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:./freertos/src/tasks.c **** 			do
3780:./freertos/src/tasks.c **** 			{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 162


3781:./freertos/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5183              		.loc 1 3781 5 is_stmt 1
 5184 0046 BB68     		ldr	r3, [r7, #8]
 5185 0048 BB61     		str	r3, [r7, #24]
 5186 004a BB69     		ldr	r3, [r7, #24]
 5187 004c 5B68     		ldr	r3, [r3, #4]
 5188 004e 5A68     		ldr	r2, [r3, #4]
 5189 0050 BB69     		ldr	r3, [r7, #24]
 5190 0052 5A60     		str	r2, [r3, #4]
 5191 0054 BB69     		ldr	r3, [r7, #24]
 5192 0056 5A68     		ldr	r2, [r3, #4]
 5193 0058 BB69     		ldr	r3, [r7, #24]
 5194 005a 0833     		adds	r3, r3, #8
 5195 005c 9A42     		cmp	r2, r3
 5196 005e 04D1     		bne	.L315
 5197              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5198 0060 BB69     		ldr	r3, [r7, #24]
 5199 0062 5B68     		ldr	r3, [r3, #4]
 5200 0064 5A68     		ldr	r2, [r3, #4]
 5201 0066 BB69     		ldr	r3, [r7, #24]
 5202 0068 5A60     		str	r2, [r3, #4]
 5203              	.L315:
 5204              		.loc 1 3781 5 discriminator 3
 5205 006a BB69     		ldr	r3, [r7, #24]
 5206 006c 5B68     		ldr	r3, [r3, #4]
 5207 006e DB68     		ldr	r3, [r3, #12]
 5208 0070 7B61     		str	r3, [r7, #20]
 5209              	.LBE177:
3782:./freertos/src/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5210              		.loc 1 3782 67 is_stmt 1
 5211 0072 7A6A     		ldr	r2, [r7, #36]
 5212 0074 1346     		mov	r3, r2
 5213 0076 DB00     		lsls	r3, r3, #3
 5214 0078 1344     		add	r3, r3, r2
 5215 007a 9B00     		lsls	r3, r3, #2
 5216 007c 1A46     		mov	r2, r3
 5217              		.loc 1 3782 5
 5218 007e FB68     		ldr	r3, [r7, #12]
 5219 0080 9918     		adds	r1, r3, r2
 5220 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5221 0084 0122     		movs	r2, #1
 5222 0086 7869     		ldr	r0, [r7, #20]
 5223 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:./freertos/src/tasks.c **** 				uxTask++;
 5224              		.loc 1 3783 11
 5225 008c 7B6A     		ldr	r3, [r7, #36]
 5226 008e 0133     		adds	r3, r3, #1
 5227 0090 7B62     		str	r3, [r7, #36]
3784:./freertos/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5228              		.loc 1 3784 23
 5229 0092 7A69     		ldr	r2, [r7, #20]
 5230 0094 FB69     		ldr	r3, [r7, #28]
 5231 0096 9A42     		cmp	r2, r3
 5232 0098 D5D1     		bne	.L316
 5233              	.L313:
3785:./freertos/src/tasks.c **** 		}
3786:./freertos/src/tasks.c **** 		else
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 163


3787:./freertos/src/tasks.c **** 		{
3788:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:./freertos/src/tasks.c **** 		}
3790:./freertos/src/tasks.c **** 
3791:./freertos/src/tasks.c **** 		return uxTask;
 5234              		.loc 1 3791 10
 5235 009a 7B6A     		ldr	r3, [r7, #36]
3792:./freertos/src/tasks.c **** 	}
 5236              		.loc 1 3792 2
 5237 009c 1846     		mov	r0, r3
 5238 009e 2837     		adds	r7, r7, #40
 5239              	.LCFI205:
 5240              		.cfi_def_cfa_offset 8
 5241 00a0 BD46     		mov	sp, r7
 5242              	.LCFI206:
 5243              		.cfi_def_cfa_register 13
 5244              		@ sp needed
 5245 00a2 80BD     		pop	{r7, pc}
 5246              		.cfi_endproc
 5247              	.LFE101:
 5249              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5250              		.align	1
 5251              		.syntax unified
 5252              		.thumb
 5253              		.thumb_func
 5255              	prvTaskCheckFreeStackSpace:
 5256              	.LFB102:
3793:./freertos/src/tasks.c **** 
3794:./freertos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3796:./freertos/src/tasks.c **** 
3797:./freertos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:./freertos/src/tasks.c **** 
3799:./freertos/src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:./freertos/src/tasks.c **** 	{
 5257              		.loc 1 3800 2
 5258              		.cfi_startproc
 5259              		@ args = 0, pretend = 0, frame = 16
 5260              		@ frame_needed = 1, uses_anonymous_args = 0
 5261              		@ link register save eliminated.
 5262 0000 80B4     		push	{r7}
 5263              	.LCFI207:
 5264              		.cfi_def_cfa_offset 4
 5265              		.cfi_offset 7, -4
 5266 0002 85B0     		sub	sp, sp, #20
 5267              	.LCFI208:
 5268              		.cfi_def_cfa_offset 24
 5269 0004 00AF     		add	r7, sp, #0
 5270              	.LCFI209:
 5271              		.cfi_def_cfa_register 7
 5272 0006 7860     		str	r0, [r7, #4]
3801:./freertos/src/tasks.c **** 	uint32_t ulCount = 0U;
 5273              		.loc 1 3801 11
 5274 0008 0023     		movs	r3, #0
 5275 000a FB60     		str	r3, [r7, #12]
3802:./freertos/src/tasks.c **** 
3803:./freertos/src/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 164


 5276              		.loc 1 3803 8
 5277 000c 05E0     		b	.L319
 5278              	.L320:
3804:./freertos/src/tasks.c **** 		{
3805:./freertos/src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5279              		.loc 1 3805 17
 5280 000e 7B68     		ldr	r3, [r7, #4]
 5281 0010 0133     		adds	r3, r3, #1
 5282 0012 7B60     		str	r3, [r7, #4]
3806:./freertos/src/tasks.c **** 			ulCount++;
 5283              		.loc 1 3806 11
 5284 0014 FB68     		ldr	r3, [r7, #12]
 5285 0016 0133     		adds	r3, r3, #1
 5286 0018 FB60     		str	r3, [r7, #12]
 5287              	.L319:
3803:./freertos/src/tasks.c **** 		{
 5288              		.loc 1 3803 10
 5289 001a 7B68     		ldr	r3, [r7, #4]
 5290 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:./freertos/src/tasks.c **** 		{
 5291              		.loc 1 3803 24
 5292 001e A52B     		cmp	r3, #165
 5293 0020 F5D0     		beq	.L320
3807:./freertos/src/tasks.c **** 		}
3808:./freertos/src/tasks.c **** 
3809:./freertos/src/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5294              		.loc 1 3809 11
 5295 0022 FB68     		ldr	r3, [r7, #12]
 5296 0024 9B08     		lsrs	r3, r3, #2
 5297 0026 FB60     		str	r3, [r7, #12]
3810:./freertos/src/tasks.c **** 
3811:./freertos/src/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5298              		.loc 1 3811 10
 5299 0028 FB68     		ldr	r3, [r7, #12]
 5300 002a 9BB2     		uxth	r3, r3
3812:./freertos/src/tasks.c **** 	}
 5301              		.loc 1 3812 2
 5302 002c 1846     		mov	r0, r3
 5303 002e 1437     		adds	r7, r7, #20
 5304              	.LCFI210:
 5305              		.cfi_def_cfa_offset 4
 5306 0030 BD46     		mov	sp, r7
 5307              	.LCFI211:
 5308              		.cfi_def_cfa_register 13
 5309              		@ sp needed
 5310 0032 80BC     		pop	{r7}
 5311              	.LCFI212:
 5312              		.cfi_restore 7
 5313              		.cfi_def_cfa_offset 0
 5314 0034 7047     		bx	lr
 5315              		.cfi_endproc
 5316              	.LFE102:
 5318              		.section	.text.prvDeleteTCB,"ax",%progbits
 5319              		.align	1
 5320              		.syntax unified
 5321              		.thumb
 5322              		.thumb_func
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 165


 5324              	prvDeleteTCB:
 5325              	.LFB103:
3813:./freertos/src/tasks.c **** 
3814:./freertos/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3816:./freertos/src/tasks.c **** 
3817:./freertos/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:./freertos/src/tasks.c **** 
3819:./freertos/src/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:./freertos/src/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:./freertos/src/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:./freertos/src/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:./freertos/src/tasks.c **** 	applications that expect an 8-bit return type. */
3824:./freertos/src/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:./freertos/src/tasks.c **** 	{
3826:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
3827:./freertos/src/tasks.c **** 	uint8_t *pucEndOfStack;
3828:./freertos/src/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:./freertos/src/tasks.c **** 
3830:./freertos/src/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:./freertos/src/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:./freertos/src/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:./freertos/src/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:./freertos/src/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:./freertos/src/tasks.c **** 		type. */
3836:./freertos/src/tasks.c **** 
3837:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:./freertos/src/tasks.c **** 
3839:./freertos/src/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:./freertos/src/tasks.c **** 		{
3841:./freertos/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:./freertos/src/tasks.c **** 		}
3843:./freertos/src/tasks.c **** 		#else
3844:./freertos/src/tasks.c **** 		{
3845:./freertos/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:./freertos/src/tasks.c **** 		}
3847:./freertos/src/tasks.c **** 		#endif
3848:./freertos/src/tasks.c **** 
3849:./freertos/src/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:./freertos/src/tasks.c **** 
3851:./freertos/src/tasks.c **** 		return uxReturn;
3852:./freertos/src/tasks.c **** 	}
3853:./freertos/src/tasks.c **** 
3854:./freertos/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3856:./freertos/src/tasks.c **** 
3857:./freertos/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:./freertos/src/tasks.c **** 
3859:./freertos/src/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:./freertos/src/tasks.c **** 	{
3861:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
3862:./freertos/src/tasks.c **** 	uint8_t *pucEndOfStack;
3863:./freertos/src/tasks.c **** 	UBaseType_t uxReturn;
3864:./freertos/src/tasks.c **** 
3865:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:./freertos/src/tasks.c **** 
3867:./freertos/src/tasks.c **** 		#if portSTACK_GROWTH < 0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 166


3868:./freertos/src/tasks.c **** 		{
3869:./freertos/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:./freertos/src/tasks.c **** 		}
3871:./freertos/src/tasks.c **** 		#else
3872:./freertos/src/tasks.c **** 		{
3873:./freertos/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:./freertos/src/tasks.c **** 		}
3875:./freertos/src/tasks.c **** 		#endif
3876:./freertos/src/tasks.c **** 
3877:./freertos/src/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:./freertos/src/tasks.c **** 
3879:./freertos/src/tasks.c **** 		return uxReturn;
3880:./freertos/src/tasks.c **** 	}
3881:./freertos/src/tasks.c **** 
3882:./freertos/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3884:./freertos/src/tasks.c **** 
3885:./freertos/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:./freertos/src/tasks.c **** 
3887:./freertos/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:./freertos/src/tasks.c **** 	{
 5326              		.loc 1 3888 2
 5327              		.cfi_startproc
 5328              		@ args = 0, pretend = 0, frame = 8
 5329              		@ frame_needed = 1, uses_anonymous_args = 0
 5330 0000 80B5     		push	{r7, lr}
 5331              	.LCFI213:
 5332              		.cfi_def_cfa_offset 8
 5333              		.cfi_offset 7, -8
 5334              		.cfi_offset 14, -4
 5335 0002 82B0     		sub	sp, sp, #8
 5336              	.LCFI214:
 5337              		.cfi_def_cfa_offset 16
 5338 0004 00AF     		add	r7, sp, #0
 5339              	.LCFI215:
 5340              		.cfi_def_cfa_register 7
 5341 0006 7860     		str	r0, [r7, #4]
3889:./freertos/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:./freertos/src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:./freertos/src/tasks.c **** 		want to allocate and clean RAM statically. */
3892:./freertos/src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:./freertos/src/tasks.c **** 
3894:./freertos/src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:./freertos/src/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:./freertos/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:./freertos/src/tasks.c **** 		for additional information. */
3898:./freertos/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:./freertos/src/tasks.c **** 		{
3900:./freertos/src/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:./freertos/src/tasks.c **** 		}
3902:./freertos/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:./freertos/src/tasks.c **** 
3904:./freertos/src/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:./freertos/src/tasks.c **** 		{
3906:./freertos/src/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:./freertos/src/tasks.c **** 			the stack and TCB. */
3908:./freertos/src/tasks.c **** 			vPortFree( pxTCB->pxStack );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 167


 5342              		.loc 1 3908 20
 5343 0008 7B68     		ldr	r3, [r7, #4]
 5344 000a 1B6B     		ldr	r3, [r3, #48]
 5345              		.loc 1 3908 4
 5346 000c 1846     		mov	r0, r3
 5347 000e FFF7FEFF 		bl	vPortFree
3909:./freertos/src/tasks.c **** 			vPortFree( pxTCB );
 5348              		.loc 1 3909 4
 5349 0012 7868     		ldr	r0, [r7, #4]
 5350 0014 FFF7FEFF 		bl	vPortFree
3910:./freertos/src/tasks.c **** 		}
3911:./freertos/src/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:./freertos/src/tasks.c **** 		{
3913:./freertos/src/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:./freertos/src/tasks.c **** 			check what was statically allocated before trying to free the
3915:./freertos/src/tasks.c **** 			memory. */
3916:./freertos/src/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:./freertos/src/tasks.c **** 			{
3918:./freertos/src/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:./freertos/src/tasks.c **** 				must be freed. */
3920:./freertos/src/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:./freertos/src/tasks.c **** 				vPortFree( pxTCB );
3922:./freertos/src/tasks.c **** 			}
3923:./freertos/src/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:./freertos/src/tasks.c **** 			{
3925:./freertos/src/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:./freertos/src/tasks.c **** 				only memory that must be freed. */
3927:./freertos/src/tasks.c **** 				vPortFree( pxTCB );
3928:./freertos/src/tasks.c **** 			}
3929:./freertos/src/tasks.c **** 			else
3930:./freertos/src/tasks.c **** 			{
3931:./freertos/src/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:./freertos/src/tasks.c **** 				nothing needs to be freed. */
3933:./freertos/src/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:./freertos/src/tasks.c **** 			}
3936:./freertos/src/tasks.c **** 		}
3937:./freertos/src/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:./freertos/src/tasks.c **** 	}
 5351              		.loc 1 3938 2
 5352 0018 00BF     		nop
 5353 001a 0837     		adds	r7, r7, #8
 5354              	.LCFI216:
 5355              		.cfi_def_cfa_offset 8
 5356 001c BD46     		mov	sp, r7
 5357              	.LCFI217:
 5358              		.cfi_def_cfa_register 13
 5359              		@ sp needed
 5360 001e 80BD     		pop	{r7, pc}
 5361              		.cfi_endproc
 5362              	.LFE103:
 5364              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5365              		.align	1
 5366              		.syntax unified
 5367              		.thumb
 5368              		.thumb_func
 5370              	prvResetNextTaskUnblockTime:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 168


 5371              	.LFB104:
3939:./freertos/src/tasks.c **** 
3940:./freertos/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3942:./freertos/src/tasks.c **** 
3943:./freertos/src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:./freertos/src/tasks.c **** {
 5372              		.loc 1 3944 1
 5373              		.cfi_startproc
 5374              		@ args = 0, pretend = 0, frame = 8
 5375              		@ frame_needed = 1, uses_anonymous_args = 0
 5376              		@ link register save eliminated.
 5377 0000 80B4     		push	{r7}
 5378              	.LCFI218:
 5379              		.cfi_def_cfa_offset 4
 5380              		.cfi_offset 7, -4
 5381 0002 83B0     		sub	sp, sp, #12
 5382              	.LCFI219:
 5383              		.cfi_def_cfa_offset 16
 5384 0004 00AF     		add	r7, sp, #0
 5385              	.LCFI220:
 5386              		.cfi_def_cfa_register 7
3945:./freertos/src/tasks.c **** TCB_t *pxTCB;
3946:./freertos/src/tasks.c **** 
3947:./freertos/src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5387              		.loc 1 3947 6
 5388 0006 0C4B     		ldr	r3, .L327
 5389 0008 1B68     		ldr	r3, [r3]
 5390 000a 1B68     		ldr	r3, [r3]
 5391              		.loc 1 3947 4
 5392 000c 002B     		cmp	r3, #0
 5393 000e 04D1     		bne	.L324
3948:./freertos/src/tasks.c **** 	{
3949:./freertos/src/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:./freertos/src/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:./freertos/src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:./freertos/src/tasks.c **** 		there is an item in the delayed list. */
3953:./freertos/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5394              		.loc 1 3953 24
 5395 0010 0A4B     		ldr	r3, .L327+4
 5396 0012 4FF0FF32 		mov	r2, #-1
 5397 0016 1A60     		str	r2, [r3]
3954:./freertos/src/tasks.c **** 	}
3955:./freertos/src/tasks.c **** 	else
3956:./freertos/src/tasks.c **** 	{
3957:./freertos/src/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:./freertos/src/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:./freertos/src/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:./freertos/src/tasks.c **** 		from the Blocked state. */
3961:./freertos/src/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:./freertos/src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:./freertos/src/tasks.c **** 	}
3964:./freertos/src/tasks.c **** }
 5398              		.loc 1 3964 1
 5399 0018 08E0     		b	.L326
 5400              	.L324:
3961:./freertos/src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 169


 5401              		.loc 1 3961 15
 5402 001a 074B     		ldr	r3, .L327
 5403 001c 1B68     		ldr	r3, [r3]
 5404 001e DB68     		ldr	r3, [r3, #12]
3961:./freertos/src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5405              		.loc 1 3961 13
 5406 0020 DB68     		ldr	r3, [r3, #12]
 5407 0022 7B60     		str	r3, [r7, #4]
3962:./freertos/src/tasks.c **** 	}
 5408              		.loc 1 3962 26
 5409 0024 7B68     		ldr	r3, [r7, #4]
 5410 0026 5B68     		ldr	r3, [r3, #4]
3962:./freertos/src/tasks.c **** 	}
 5411              		.loc 1 3962 24
 5412 0028 044A     		ldr	r2, .L327+4
 5413 002a 1360     		str	r3, [r2]
 5414              	.L326:
 5415              		.loc 1 3964 1
 5416 002c 00BF     		nop
 5417 002e 0C37     		adds	r7, r7, #12
 5418              	.LCFI221:
 5419              		.cfi_def_cfa_offset 4
 5420 0030 BD46     		mov	sp, r7
 5421              	.LCFI222:
 5422              		.cfi_def_cfa_register 13
 5423              		@ sp needed
 5424 0032 80BC     		pop	{r7}
 5425              	.LCFI223:
 5426              		.cfi_restore 7
 5427              		.cfi_def_cfa_offset 0
 5428 0034 7047     		bx	lr
 5429              	.L328:
 5430 0036 00BF     		.align	2
 5431              	.L327:
 5432 0038 00000000 		.word	pxDelayedTaskList
 5433 003c 00000000 		.word	xNextTaskUnblockTime
 5434              		.cfi_endproc
 5435              	.LFE104:
 5437              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5438              		.align	1
 5439              		.global	xTaskGetCurrentTaskHandle
 5440              		.syntax unified
 5441              		.thumb
 5442              		.thumb_func
 5444              	xTaskGetCurrentTaskHandle:
 5445              	.LFB105:
3965:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3966:./freertos/src/tasks.c **** 
3967:./freertos/src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:./freertos/src/tasks.c **** 
3969:./freertos/src/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:./freertos/src/tasks.c **** 	{
 5446              		.loc 1 3970 2
 5447              		.cfi_startproc
 5448              		@ args = 0, pretend = 0, frame = 8
 5449              		@ frame_needed = 1, uses_anonymous_args = 0
 5450              		@ link register save eliminated.
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 170


 5451 0000 80B4     		push	{r7}
 5452              	.LCFI224:
 5453              		.cfi_def_cfa_offset 4
 5454              		.cfi_offset 7, -4
 5455 0002 83B0     		sub	sp, sp, #12
 5456              	.LCFI225:
 5457              		.cfi_def_cfa_offset 16
 5458 0004 00AF     		add	r7, sp, #0
 5459              	.LCFI226:
 5460              		.cfi_def_cfa_register 7
3971:./freertos/src/tasks.c **** 	TaskHandle_t xReturn;
3972:./freertos/src/tasks.c **** 
3973:./freertos/src/tasks.c **** 		/* A critical section is not required as this is not called from
3974:./freertos/src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:./freertos/src/tasks.c **** 		individual execution thread. */
3976:./freertos/src/tasks.c **** 		xReturn = pxCurrentTCB;
 5461              		.loc 1 3976 11
 5462 0006 044B     		ldr	r3, .L331
 5463 0008 1B68     		ldr	r3, [r3]
 5464 000a 7B60     		str	r3, [r7, #4]
3977:./freertos/src/tasks.c **** 
3978:./freertos/src/tasks.c **** 		return xReturn;
 5465              		.loc 1 3978 10
 5466 000c 7B68     		ldr	r3, [r7, #4]
3979:./freertos/src/tasks.c **** 	}
 5467              		.loc 1 3979 2
 5468 000e 1846     		mov	r0, r3
 5469 0010 0C37     		adds	r7, r7, #12
 5470              	.LCFI227:
 5471              		.cfi_def_cfa_offset 4
 5472 0012 BD46     		mov	sp, r7
 5473              	.LCFI228:
 5474              		.cfi_def_cfa_register 13
 5475              		@ sp needed
 5476 0014 80BC     		pop	{r7}
 5477              	.LCFI229:
 5478              		.cfi_restore 7
 5479              		.cfi_def_cfa_offset 0
 5480 0016 7047     		bx	lr
 5481              	.L332:
 5482              		.align	2
 5483              	.L331:
 5484 0018 00000000 		.word	pxCurrentTCB
 5485              		.cfi_endproc
 5486              	.LFE105:
 5488              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5489              		.align	1
 5490              		.global	xTaskGetSchedulerState
 5491              		.syntax unified
 5492              		.thumb
 5493              		.thumb_func
 5495              	xTaskGetSchedulerState:
 5496              	.LFB106:
3980:./freertos/src/tasks.c **** 
3981:./freertos/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
3983:./freertos/src/tasks.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 171


3984:./freertos/src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:./freertos/src/tasks.c **** 
3986:./freertos/src/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:./freertos/src/tasks.c **** 	{
 5497              		.loc 1 3987 2
 5498              		.cfi_startproc
 5499              		@ args = 0, pretend = 0, frame = 8
 5500              		@ frame_needed = 1, uses_anonymous_args = 0
 5501              		@ link register save eliminated.
 5502 0000 80B4     		push	{r7}
 5503              	.LCFI230:
 5504              		.cfi_def_cfa_offset 4
 5505              		.cfi_offset 7, -4
 5506 0002 83B0     		sub	sp, sp, #12
 5507              	.LCFI231:
 5508              		.cfi_def_cfa_offset 16
 5509 0004 00AF     		add	r7, sp, #0
 5510              	.LCFI232:
 5511              		.cfi_def_cfa_register 7
3988:./freertos/src/tasks.c **** 	BaseType_t xReturn;
3989:./freertos/src/tasks.c **** 
3990:./freertos/src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5512              		.loc 1 3990 25
 5513 0006 0B4B     		ldr	r3, .L338
 5514 0008 1B68     		ldr	r3, [r3]
 5515              		.loc 1 3990 5
 5516 000a 002B     		cmp	r3, #0
 5517 000c 02D1     		bne	.L334
3991:./freertos/src/tasks.c **** 		{
3992:./freertos/src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5518              		.loc 1 3992 12
 5519 000e 0123     		movs	r3, #1
 5520 0010 7B60     		str	r3, [r7, #4]
 5521 0012 08E0     		b	.L335
 5522              	.L334:
3993:./freertos/src/tasks.c **** 		}
3994:./freertos/src/tasks.c **** 		else
3995:./freertos/src/tasks.c **** 		{
3996:./freertos/src/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5523              		.loc 1 3996 29
 5524 0014 084B     		ldr	r3, .L338+4
 5525 0016 1B68     		ldr	r3, [r3]
 5526              		.loc 1 3996 6
 5527 0018 002B     		cmp	r3, #0
 5528 001a 02D1     		bne	.L336
3997:./freertos/src/tasks.c **** 			{
3998:./freertos/src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5529              		.loc 1 3998 13
 5530 001c 0223     		movs	r3, #2
 5531 001e 7B60     		str	r3, [r7, #4]
 5532 0020 01E0     		b	.L335
 5533              	.L336:
3999:./freertos/src/tasks.c **** 			}
4000:./freertos/src/tasks.c **** 			else
4001:./freertos/src/tasks.c **** 			{
4002:./freertos/src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5534              		.loc 1 4002 13
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 172


 5535 0022 0023     		movs	r3, #0
 5536 0024 7B60     		str	r3, [r7, #4]
 5537              	.L335:
4003:./freertos/src/tasks.c **** 			}
4004:./freertos/src/tasks.c **** 		}
4005:./freertos/src/tasks.c **** 
4006:./freertos/src/tasks.c **** 		return xReturn;
 5538              		.loc 1 4006 10
 5539 0026 7B68     		ldr	r3, [r7, #4]
4007:./freertos/src/tasks.c **** 	}
 5540              		.loc 1 4007 2
 5541 0028 1846     		mov	r0, r3
 5542 002a 0C37     		adds	r7, r7, #12
 5543              	.LCFI233:
 5544              		.cfi_def_cfa_offset 4
 5545 002c BD46     		mov	sp, r7
 5546              	.LCFI234:
 5547              		.cfi_def_cfa_register 13
 5548              		@ sp needed
 5549 002e 80BC     		pop	{r7}
 5550              	.LCFI235:
 5551              		.cfi_restore 7
 5552              		.cfi_def_cfa_offset 0
 5553 0030 7047     		bx	lr
 5554              	.L339:
 5555 0032 00BF     		.align	2
 5556              	.L338:
 5557 0034 00000000 		.word	xSchedulerRunning
 5558 0038 00000000 		.word	uxSchedulerSuspended
 5559              		.cfi_endproc
 5560              	.LFE106:
 5562              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5563              		.align	1
 5564              		.global	xTaskPriorityInherit
 5565              		.syntax unified
 5566              		.thumb
 5567              		.thumb_func
 5569              	xTaskPriorityInherit:
 5570              	.LFB107:
4008:./freertos/src/tasks.c **** 
4009:./freertos/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4011:./freertos/src/tasks.c **** 
4012:./freertos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:./freertos/src/tasks.c **** 
4014:./freertos/src/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:./freertos/src/tasks.c **** 	{
 5571              		.loc 1 4015 2
 5572              		.cfi_startproc
 5573              		@ args = 0, pretend = 0, frame = 16
 5574              		@ frame_needed = 1, uses_anonymous_args = 0
 5575 0000 80B5     		push	{r7, lr}
 5576              	.LCFI236:
 5577              		.cfi_def_cfa_offset 8
 5578              		.cfi_offset 7, -8
 5579              		.cfi_offset 14, -4
 5580 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 173


 5581              	.LCFI237:
 5582              		.cfi_def_cfa_offset 24
 5583 0004 00AF     		add	r7, sp, #0
 5584              	.LCFI238:
 5585              		.cfi_def_cfa_register 7
 5586 0006 7860     		str	r0, [r7, #4]
4016:./freertos/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5587              		.loc 1 4016 16
 5588 0008 7B68     		ldr	r3, [r7, #4]
 5589 000a BB60     		str	r3, [r7, #8]
4017:./freertos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5590              		.loc 1 4017 13
 5591 000c 0023     		movs	r3, #0
 5592 000e FB60     		str	r3, [r7, #12]
4018:./freertos/src/tasks.c **** 
4019:./freertos/src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:./freertos/src/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:./freertos/src/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:./freertos/src/tasks.c **** 		if( pxMutexHolder != NULL )
 5593              		.loc 1 4022 5
 5594 0010 7B68     		ldr	r3, [r7, #4]
 5595 0012 002B     		cmp	r3, #0
 5596 0014 5ED0     		beq	.L341
4023:./freertos/src/tasks.c **** 		{
4024:./freertos/src/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:./freertos/src/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:./freertos/src/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:./freertos/src/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 5597              		.loc 1 4027 24
 5598 0016 BB68     		ldr	r3, [r7, #8]
 5599 0018 DA6A     		ldr	r2, [r3, #44]
 5600              		.loc 1 4027 51
 5601 001a 314B     		ldr	r3, .L348
 5602 001c 1B68     		ldr	r3, [r3]
 5603 001e DB6A     		ldr	r3, [r3, #44]
 5604              		.loc 1 4027 6
 5605 0020 9A42     		cmp	r2, r3
 5606 0022 4ED2     		bcs	.L342
4028:./freertos/src/tasks.c **** 			{
4029:./freertos/src/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:./freertos/src/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:./freertos/src/tasks.c **** 				not being used for anything else. */
4032:./freertos/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 5607              		.loc 1 4032 11
 5608 0024 BB68     		ldr	r3, [r7, #8]
 5609 0026 9B69     		ldr	r3, [r3, #24]
 5610              		.loc 1 4032 7
 5611 0028 002B     		cmp	r3, #0
 5612 002a 06DB     		blt	.L343
4033:./freertos/src/tasks.c **** 				{
4034:./freertos/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 5613              		.loc 1 4034 6
 5614 002c 2C4B     		ldr	r3, .L348
 5615 002e 1B68     		ldr	r3, [r3]
 5616 0030 DB6A     		ldr	r3, [r3, #44]
 5617 0032 C3F10502 		rsb	r2, r3, #5
 5618 0036 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 174


 5619 0038 9A61     		str	r2, [r3, #24]
 5620              	.L343:
4035:./freertos/src/tasks.c **** 				}
4036:./freertos/src/tasks.c **** 				else
4037:./freertos/src/tasks.c **** 				{
4038:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:./freertos/src/tasks.c **** 				}
4040:./freertos/src/tasks.c **** 
4041:./freertos/src/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:./freertos/src/tasks.c **** 				to be moved into a new list. */
4043:./freertos/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 5621              		.loc 1 4043 9
 5622 003a BB68     		ldr	r3, [r7, #8]
 5623 003c 5969     		ldr	r1, [r3, #20]
 5624 003e BB68     		ldr	r3, [r7, #8]
 5625 0040 DA6A     		ldr	r2, [r3, #44]
 5626 0042 1346     		mov	r3, r2
 5627 0044 9B00     		lsls	r3, r3, #2
 5628 0046 1344     		add	r3, r3, r2
 5629 0048 9B00     		lsls	r3, r3, #2
 5630 004a 264A     		ldr	r2, .L348+4
 5631 004c 1344     		add	r3, r3, r2
 5632              		.loc 1 4043 7
 5633 004e 9942     		cmp	r1, r3
 5634 0050 2FD1     		bne	.L344
4044:./freertos/src/tasks.c **** 				{
4045:./freertos/src/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5635              		.loc 1 4045 10
 5636 0052 BB68     		ldr	r3, [r7, #8]
 5637 0054 0433     		adds	r3, r3, #4
 5638 0056 1846     		mov	r0, r3
 5639 0058 FFF7FEFF 		bl	uxListRemove
 5640 005c 0346     		mov	r3, r0
 5641              		.loc 1 4045 8 discriminator 1
 5642 005e 002B     		cmp	r3, #0
 5643 0060 0AD1     		bne	.L345
4046:./freertos/src/tasks.c **** 					{
4047:./freertos/src/tasks.c **** 						/* It is known that the task is in its ready list so
4048:./freertos/src/tasks.c **** 						there is no need to check again and the port level
4049:./freertos/src/tasks.c **** 						reset macro can be called directly. */
4050:./freertos/src/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 5644              		.loc 1 4050 7
 5645 0062 BB68     		ldr	r3, [r7, #8]
 5646 0064 DB6A     		ldr	r3, [r3, #44]
 5647 0066 0122     		movs	r2, #1
 5648 0068 02FA03F3 		lsl	r3, r2, r3
 5649 006c DA43     		mvns	r2, r3
 5650 006e 1E4B     		ldr	r3, .L348+8
 5651 0070 1B68     		ldr	r3, [r3]
 5652 0072 1340     		ands	r3, r3, r2
 5653 0074 1C4A     		ldr	r2, .L348+8
 5654 0076 1360     		str	r3, [r2]
 5655              	.L345:
4051:./freertos/src/tasks.c **** 					}
4052:./freertos/src/tasks.c **** 					else
4053:./freertos/src/tasks.c **** 					{
4054:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 175


4055:./freertos/src/tasks.c **** 					}
4056:./freertos/src/tasks.c **** 
4057:./freertos/src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:./freertos/src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5656              		.loc 1 4058 49
 5657 0078 194B     		ldr	r3, .L348
 5658 007a 1B68     		ldr	r3, [r3]
 5659 007c DA6A     		ldr	r2, [r3, #44]
 5660              		.loc 1 4058 35
 5661 007e BB68     		ldr	r3, [r7, #8]
 5662 0080 DA62     		str	r2, [r3, #44]
4059:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5663              		.loc 1 4059 6
 5664 0082 BB68     		ldr	r3, [r7, #8]
 5665 0084 DB6A     		ldr	r3, [r3, #44]
 5666 0086 0122     		movs	r2, #1
 5667 0088 9A40     		lsls	r2, r2, r3
 5668 008a 174B     		ldr	r3, .L348+8
 5669 008c 1B68     		ldr	r3, [r3]
 5670 008e 1343     		orrs	r3, r3, r2
 5671 0090 154A     		ldr	r2, .L348+8
 5672 0092 1360     		str	r3, [r2]
 5673 0094 BB68     		ldr	r3, [r7, #8]
 5674 0096 DA6A     		ldr	r2, [r3, #44]
 5675 0098 1346     		mov	r3, r2
 5676 009a 9B00     		lsls	r3, r3, #2
 5677 009c 1344     		add	r3, r3, r2
 5678 009e 9B00     		lsls	r3, r3, #2
 5679 00a0 104A     		ldr	r2, .L348+4
 5680 00a2 1A44     		add	r2, r2, r3
 5681 00a4 BB68     		ldr	r3, [r7, #8]
 5682 00a6 0433     		adds	r3, r3, #4
 5683 00a8 1946     		mov	r1, r3
 5684 00aa 1046     		mov	r0, r2
 5685 00ac FFF7FEFF 		bl	vListInsertEnd
 5686 00b0 04E0     		b	.L346
 5687              	.L344:
4060:./freertos/src/tasks.c **** 				}
4061:./freertos/src/tasks.c **** 				else
4062:./freertos/src/tasks.c **** 				{
4063:./freertos/src/tasks.c **** 					/* Just inherit the priority. */
4064:./freertos/src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5688              		.loc 1 4064 49
 5689 00b2 0B4B     		ldr	r3, .L348
 5690 00b4 1B68     		ldr	r3, [r3]
 5691 00b6 DA6A     		ldr	r2, [r3, #44]
 5692              		.loc 1 4064 35
 5693 00b8 BB68     		ldr	r3, [r7, #8]
 5694 00ba DA62     		str	r2, [r3, #44]
 5695              	.L346:
4065:./freertos/src/tasks.c **** 				}
4066:./freertos/src/tasks.c **** 
4067:./freertos/src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:./freertos/src/tasks.c **** 
4069:./freertos/src/tasks.c **** 				/* Inheritance occurred. */
4070:./freertos/src/tasks.c **** 				xReturn = pdTRUE;
 5696              		.loc 1 4070 13
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 176


 5697 00bc 0123     		movs	r3, #1
 5698 00be FB60     		str	r3, [r7, #12]
 5699 00c0 08E0     		b	.L341
 5700              	.L342:
4071:./freertos/src/tasks.c **** 			}
4072:./freertos/src/tasks.c **** 			else
4073:./freertos/src/tasks.c **** 			{
4074:./freertos/src/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 5701              		.loc 1 4074 25
 5702 00c2 BB68     		ldr	r3, [r7, #8]
 5703 00c4 DA6C     		ldr	r2, [r3, #76]
 5704              		.loc 1 4074 56
 5705 00c6 064B     		ldr	r3, .L348
 5706 00c8 1B68     		ldr	r3, [r3]
 5707 00ca DB6A     		ldr	r3, [r3, #44]
 5708              		.loc 1 4074 7
 5709 00cc 9A42     		cmp	r2, r3
 5710 00ce 01D2     		bcs	.L341
4075:./freertos/src/tasks.c **** 				{
4076:./freertos/src/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:./freertos/src/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:./freertos/src/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:./freertos/src/tasks.c **** 					priority of the task attempting to take the mutex.
4080:./freertos/src/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:./freertos/src/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:./freertos/src/tasks.c **** 					not been the case. */
4083:./freertos/src/tasks.c **** 					xReturn = pdTRUE;
 5711              		.loc 1 4083 14
 5712 00d0 0123     		movs	r3, #1
 5713 00d2 FB60     		str	r3, [r7, #12]
 5714              	.L341:
4084:./freertos/src/tasks.c **** 				}
4085:./freertos/src/tasks.c **** 				else
4086:./freertos/src/tasks.c **** 				{
4087:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:./freertos/src/tasks.c **** 				}
4089:./freertos/src/tasks.c **** 			}
4090:./freertos/src/tasks.c **** 		}
4091:./freertos/src/tasks.c **** 		else
4092:./freertos/src/tasks.c **** 		{
4093:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:./freertos/src/tasks.c **** 		}
4095:./freertos/src/tasks.c **** 
4096:./freertos/src/tasks.c **** 		return xReturn;
 5715              		.loc 1 4096 10
 5716 00d4 FB68     		ldr	r3, [r7, #12]
4097:./freertos/src/tasks.c **** 	}
 5717              		.loc 1 4097 2
 5718 00d6 1846     		mov	r0, r3
 5719 00d8 1037     		adds	r7, r7, #16
 5720              	.LCFI239:
 5721              		.cfi_def_cfa_offset 8
 5722 00da BD46     		mov	sp, r7
 5723              	.LCFI240:
 5724              		.cfi_def_cfa_register 13
 5725              		@ sp needed
 5726 00dc 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 177


 5727              	.L349:
 5728 00de 00BF     		.align	2
 5729              	.L348:
 5730 00e0 00000000 		.word	pxCurrentTCB
 5731 00e4 00000000 		.word	pxReadyTasksLists
 5732 00e8 00000000 		.word	uxTopReadyPriority
 5733              		.cfi_endproc
 5734              	.LFE107:
 5736              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5737              		.align	1
 5738              		.global	xTaskPriorityDisinherit
 5739              		.syntax unified
 5740              		.thumb
 5741              		.thumb_func
 5743              	xTaskPriorityDisinherit:
 5744              	.LFB108:
4098:./freertos/src/tasks.c **** 
4099:./freertos/src/tasks.c **** #endif /* configUSE_MUTEXES */
4100:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4101:./freertos/src/tasks.c **** 
4102:./freertos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:./freertos/src/tasks.c **** 
4104:./freertos/src/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:./freertos/src/tasks.c **** 	{
 5745              		.loc 1 4105 2
 5746              		.cfi_startproc
 5747              		@ args = 0, pretend = 0, frame = 24
 5748              		@ frame_needed = 1, uses_anonymous_args = 0
 5749 0000 80B5     		push	{r7, lr}
 5750              	.LCFI241:
 5751              		.cfi_def_cfa_offset 8
 5752              		.cfi_offset 7, -8
 5753              		.cfi_offset 14, -4
 5754 0002 86B0     		sub	sp, sp, #24
 5755              	.LCFI242:
 5756              		.cfi_def_cfa_offset 32
 5757 0004 00AF     		add	r7, sp, #0
 5758              	.LCFI243:
 5759              		.cfi_def_cfa_register 7
 5760 0006 7860     		str	r0, [r7, #4]
4106:./freertos/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5761              		.loc 1 4106 16
 5762 0008 7B68     		ldr	r3, [r7, #4]
 5763 000a 3B61     		str	r3, [r7, #16]
4107:./freertos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5764              		.loc 1 4107 13
 5765 000c 0023     		movs	r3, #0
 5766 000e 7B61     		str	r3, [r7, #20]
4108:./freertos/src/tasks.c **** 
4109:./freertos/src/tasks.c **** 		if( pxMutexHolder != NULL )
 5767              		.loc 1 4109 5
 5768 0010 7B68     		ldr	r3, [r7, #4]
 5769 0012 002B     		cmp	r3, #0
 5770 0014 70D0     		beq	.L351
4110:./freertos/src/tasks.c **** 		{
4111:./freertos/src/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:./freertos/src/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 178


4113:./freertos/src/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:./freertos/src/tasks.c **** 			be the running state task. */
4115:./freertos/src/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5771              		.loc 1 4115 4
 5772 0016 3B4B     		ldr	r3, .L358
 5773 0018 1B68     		ldr	r3, [r3]
 5774 001a 3A69     		ldr	r2, [r7, #16]
 5775 001c 9A42     		cmp	r2, r3
 5776 001e 0BD0     		beq	.L352
 5777              	.LBB178:
 5778              	.LBB179:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5779              		.loc 2 197 2
 5780              		.syntax unified
 5781              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 5782 0020 4FF05003 			mov r3, #80												
 5783 0024 83F31188 		msr basepri, r3											
 5784 0028 BFF36F8F 		isb														
 5785 002c BFF34F8F 		dsb														
 5786              	
 5787              	@ 0 "" 2
 5788              		.thumb
 5789              		.syntax unified
 5790 0030 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 5791              		.loc 2 205 1
 5792 0032 00BF     		nop
 5793              	.L353:
 5794              	.LBE179:
 5795              	.LBE178:
 5796              		.loc 1 4115 4
 5797 0034 00BF     		nop
 5798 0036 FDE7     		b	.L353
 5799              	.L352:
4116:./freertos/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5800              		.loc 1 4116 4
 5801 0038 3B69     		ldr	r3, [r7, #16]
 5802 003a 1B6D     		ldr	r3, [r3, #80]
 5803 003c 002B     		cmp	r3, #0
 5804 003e 0BD1     		bne	.L354
 5805              	.LBB180:
 5806              	.LBB181:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5807              		.loc 2 197 2
 5808              		.syntax unified
 5809              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 5810 0040 4FF05003 			mov r3, #80												
 5811 0044 83F31188 		msr basepri, r3											
 5812 0048 BFF36F8F 		isb														
 5813 004c BFF34F8F 		dsb														
 5814              	
 5815              	@ 0 "" 2
 5816              		.thumb
 5817              		.syntax unified
 5818 0050 BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 5819              		.loc 2 205 1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 179


 5820 0052 00BF     		nop
 5821              	.L355:
 5822              	.LBE181:
 5823              	.LBE180:
 5824              		.loc 1 4116 4
 5825 0054 00BF     		nop
 5826 0056 FDE7     		b	.L355
 5827              	.L354:
4117:./freertos/src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5828              		.loc 1 4117 11
 5829 0058 3B69     		ldr	r3, [r7, #16]
 5830 005a 1B6D     		ldr	r3, [r3, #80]
 5831              		.loc 1 4117 28
 5832 005c 5A1E     		subs	r2, r3, #1
 5833 005e 3B69     		ldr	r3, [r7, #16]
 5834 0060 1A65     		str	r2, [r3, #80]
4118:./freertos/src/tasks.c **** 
4119:./freertos/src/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:./freertos/src/tasks.c **** 			task? */
4121:./freertos/src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5835              		.loc 1 4121 13
 5836 0062 3B69     		ldr	r3, [r7, #16]
 5837 0064 DA6A     		ldr	r2, [r3, #44]
 5838              		.loc 1 4121 34
 5839 0066 3B69     		ldr	r3, [r7, #16]
 5840 0068 DB6C     		ldr	r3, [r3, #76]
 5841              		.loc 1 4121 6
 5842 006a 9A42     		cmp	r2, r3
 5843 006c 44D0     		beq	.L351
4122:./freertos/src/tasks.c **** 			{
4123:./freertos/src/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:./freertos/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5844              		.loc 1 4124 14
 5845 006e 3B69     		ldr	r3, [r7, #16]
 5846 0070 1B6D     		ldr	r3, [r3, #80]
 5847              		.loc 1 4124 7
 5848 0072 002B     		cmp	r3, #0
 5849 0074 40D1     		bne	.L351
4125:./freertos/src/tasks.c **** 				{
4126:./freertos/src/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:./freertos/src/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:./freertos/src/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:./freertos/src/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:./freertos/src/tasks.c **** 					the holding task from the ready/delayed list. */
4131:./freertos/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5850              		.loc 1 4131 10
 5851 0076 3B69     		ldr	r3, [r7, #16]
 5852 0078 0433     		adds	r3, r3, #4
 5853 007a 1846     		mov	r0, r3
 5854 007c FFF7FEFF 		bl	uxListRemove
 5855 0080 0346     		mov	r3, r0
 5856              		.loc 1 4131 8 discriminator 1
 5857 0082 002B     		cmp	r3, #0
 5858 0084 15D1     		bne	.L356
4132:./freertos/src/tasks.c **** 					{
4133:./freertos/src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5859              		.loc 1 4133 7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 180


 5860 0086 3B69     		ldr	r3, [r7, #16]
 5861 0088 DA6A     		ldr	r2, [r3, #44]
 5862 008a 1F49     		ldr	r1, .L358+4
 5863 008c 1346     		mov	r3, r2
 5864 008e 9B00     		lsls	r3, r3, #2
 5865 0090 1344     		add	r3, r3, r2
 5866 0092 9B00     		lsls	r3, r3, #2
 5867 0094 0B44     		add	r3, r3, r1
 5868 0096 1B68     		ldr	r3, [r3]
 5869 0098 002B     		cmp	r3, #0
 5870 009a 0AD1     		bne	.L356
 5871              		.loc 1 4133 7 is_stmt 0 discriminator 1
 5872 009c 3B69     		ldr	r3, [r7, #16]
 5873 009e DB6A     		ldr	r3, [r3, #44]
 5874 00a0 0122     		movs	r2, #1
 5875 00a2 02FA03F3 		lsl	r3, r2, r3
 5876 00a6 DA43     		mvns	r2, r3
 5877 00a8 184B     		ldr	r3, .L358+8
 5878 00aa 1B68     		ldr	r3, [r3]
 5879 00ac 1340     		ands	r3, r3, r2
 5880 00ae 174A     		ldr	r2, .L358+8
 5881 00b0 1360     		str	r3, [r2]
 5882              	.L356:
4134:./freertos/src/tasks.c **** 					}
4135:./freertos/src/tasks.c **** 					else
4136:./freertos/src/tasks.c **** 					{
4137:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:./freertos/src/tasks.c **** 					}
4139:./freertos/src/tasks.c **** 
4140:./freertos/src/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:./freertos/src/tasks.c **** 					new	ready list. */
4142:./freertos/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:./freertos/src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5883              		.loc 1 4143 31 is_stmt 1
 5884 00b2 3B69     		ldr	r3, [r7, #16]
 5885 00b4 DA6C     		ldr	r2, [r3, #76]
 5886              		.loc 1 4143 24
 5887 00b6 3B69     		ldr	r3, [r7, #16]
 5888 00b8 DA62     		str	r2, [r3, #44]
4144:./freertos/src/tasks.c **** 
4145:./freertos/src/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:./freertos/src/tasks.c **** 					any other purpose if this task is running, and it must be
4147:./freertos/src/tasks.c **** 					running to give back the mutex. */
4148:./freertos/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5889              		.loc 1 4148 6
 5890 00ba 3B69     		ldr	r3, [r7, #16]
 5891 00bc DB6A     		ldr	r3, [r3, #44]
 5892 00be C3F10502 		rsb	r2, r3, #5
 5893 00c2 3B69     		ldr	r3, [r7, #16]
 5894 00c4 9A61     		str	r2, [r3, #24]
4149:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5895              		.loc 1 4149 6
 5896 00c6 3B69     		ldr	r3, [r7, #16]
 5897 00c8 DB6A     		ldr	r3, [r3, #44]
 5898 00ca 0122     		movs	r2, #1
 5899 00cc 9A40     		lsls	r2, r2, r3
 5900 00ce 0F4B     		ldr	r3, .L358+8
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 181


 5901 00d0 1B68     		ldr	r3, [r3]
 5902 00d2 1343     		orrs	r3, r3, r2
 5903 00d4 0D4A     		ldr	r2, .L358+8
 5904 00d6 1360     		str	r3, [r2]
 5905 00d8 3B69     		ldr	r3, [r7, #16]
 5906 00da DA6A     		ldr	r2, [r3, #44]
 5907 00dc 1346     		mov	r3, r2
 5908 00de 9B00     		lsls	r3, r3, #2
 5909 00e0 1344     		add	r3, r3, r2
 5910 00e2 9B00     		lsls	r3, r3, #2
 5911 00e4 084A     		ldr	r2, .L358+4
 5912 00e6 1A44     		add	r2, r2, r3
 5913 00e8 3B69     		ldr	r3, [r7, #16]
 5914 00ea 0433     		adds	r3, r3, #4
 5915 00ec 1946     		mov	r1, r3
 5916 00ee 1046     		mov	r0, r2
 5917 00f0 FFF7FEFF 		bl	vListInsertEnd
4150:./freertos/src/tasks.c **** 
4151:./freertos/src/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:./freertos/src/tasks.c **** 					This is only actually required in the corner case whereby
4153:./freertos/src/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:./freertos/src/tasks.c **** 					in an order different to that in which they were taken.
4155:./freertos/src/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:./freertos/src/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:./freertos/src/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:./freertos/src/tasks.c **** 					a task is waiting on it or not. */
4159:./freertos/src/tasks.c **** 					xReturn = pdTRUE;
 5918              		.loc 1 4159 14
 5919 00f4 0123     		movs	r3, #1
 5920 00f6 7B61     		str	r3, [r7, #20]
 5921              	.L351:
4160:./freertos/src/tasks.c **** 				}
4161:./freertos/src/tasks.c **** 				else
4162:./freertos/src/tasks.c **** 				{
4163:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:./freertos/src/tasks.c **** 				}
4165:./freertos/src/tasks.c **** 			}
4166:./freertos/src/tasks.c **** 			else
4167:./freertos/src/tasks.c **** 			{
4168:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:./freertos/src/tasks.c **** 			}
4170:./freertos/src/tasks.c **** 		}
4171:./freertos/src/tasks.c **** 		else
4172:./freertos/src/tasks.c **** 		{
4173:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:./freertos/src/tasks.c **** 		}
4175:./freertos/src/tasks.c **** 
4176:./freertos/src/tasks.c **** 		return xReturn;
 5922              		.loc 1 4176 10
 5923 00f8 7B69     		ldr	r3, [r7, #20]
4177:./freertos/src/tasks.c **** 	}
 5924              		.loc 1 4177 2
 5925 00fa 1846     		mov	r0, r3
 5926 00fc 1837     		adds	r7, r7, #24
 5927              	.LCFI244:
 5928              		.cfi_def_cfa_offset 8
 5929 00fe BD46     		mov	sp, r7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 182


 5930              	.LCFI245:
 5931              		.cfi_def_cfa_register 13
 5932              		@ sp needed
 5933 0100 80BD     		pop	{r7, pc}
 5934              	.L359:
 5935 0102 00BF     		.align	2
 5936              	.L358:
 5937 0104 00000000 		.word	pxCurrentTCB
 5938 0108 00000000 		.word	pxReadyTasksLists
 5939 010c 00000000 		.word	uxTopReadyPriority
 5940              		.cfi_endproc
 5941              	.LFE108:
 5943              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5944              		.align	1
 5945              		.global	vTaskPriorityDisinheritAfterTimeout
 5946              		.syntax unified
 5947              		.thumb
 5948              		.thumb_func
 5950              	vTaskPriorityDisinheritAfterTimeout:
 5951              	.LFB109:
4178:./freertos/src/tasks.c **** 
4179:./freertos/src/tasks.c **** #endif /* configUSE_MUTEXES */
4180:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4181:./freertos/src/tasks.c **** 
4182:./freertos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:./freertos/src/tasks.c **** 
4184:./freertos/src/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:./freertos/src/tasks.c **** 	{
 5952              		.loc 1 4185 2
 5953              		.cfi_startproc
 5954              		@ args = 0, pretend = 0, frame = 32
 5955              		@ frame_needed = 1, uses_anonymous_args = 0
 5956 0000 80B5     		push	{r7, lr}
 5957              	.LCFI246:
 5958              		.cfi_def_cfa_offset 8
 5959              		.cfi_offset 7, -8
 5960              		.cfi_offset 14, -4
 5961 0002 88B0     		sub	sp, sp, #32
 5962              	.LCFI247:
 5963              		.cfi_def_cfa_offset 40
 5964 0004 00AF     		add	r7, sp, #0
 5965              	.LCFI248:
 5966              		.cfi_def_cfa_register 7
 5967 0006 7860     		str	r0, [r7, #4]
 5968 0008 3960     		str	r1, [r7]
4186:./freertos/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5969              		.loc 1 4186 16
 5970 000a 7B68     		ldr	r3, [r7, #4]
 5971 000c BB61     		str	r3, [r7, #24]
4187:./freertos/src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:./freertos/src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5972              		.loc 1 4188 20
 5973 000e 0123     		movs	r3, #1
 5974 0010 7B61     		str	r3, [r7, #20]
4189:./freertos/src/tasks.c **** 
4190:./freertos/src/tasks.c **** 		if( pxMutexHolder != NULL )
 5975              		.loc 1 4190 5
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 183


 5976 0012 7B68     		ldr	r3, [r7, #4]
 5977 0014 002B     		cmp	r3, #0
 5978 0016 79D0     		beq	.L370
4191:./freertos/src/tasks.c **** 		{
4192:./freertos/src/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:./freertos/src/tasks.c **** 			one mutex. */
4194:./freertos/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5979              		.loc 1 4194 4
 5980 0018 BB69     		ldr	r3, [r7, #24]
 5981 001a 1B6D     		ldr	r3, [r3, #80]
 5982 001c 002B     		cmp	r3, #0
 5983 001e 0BD1     		bne	.L362
 5984              	.LBB182:
 5985              	.LBB183:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5986              		.loc 2 197 2
 5987              		.syntax unified
 5988              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 5989 0020 4FF05003 			mov r3, #80												
 5990 0024 83F31188 		msr basepri, r3											
 5991 0028 BFF36F8F 		isb														
 5992 002c BFF34F8F 		dsb														
 5993              	
 5994              	@ 0 "" 2
 5995              		.thumb
 5996              		.syntax unified
 5997 0030 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 5998              		.loc 2 205 1
 5999 0032 00BF     		nop
 6000              	.L363:
 6001              	.LBE183:
 6002              	.LBE182:
 6003              		.loc 1 4194 4
 6004 0034 00BF     		nop
 6005 0036 FDE7     		b	.L363
 6006              	.L362:
4195:./freertos/src/tasks.c **** 
4196:./freertos/src/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:./freertos/src/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:./freertos/src/tasks.c **** 			holding task's base priority and the priority of the highest
4199:./freertos/src/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:./freertos/src/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6007              		.loc 1 4200 13
 6008 0038 BB69     		ldr	r3, [r7, #24]
 6009 003a DB6C     		ldr	r3, [r3, #76]
 6010              		.loc 1 4200 6
 6011 003c 3A68     		ldr	r2, [r7]
 6012 003e 9A42     		cmp	r2, r3
 6013 0040 02D9     		bls	.L364
4201:./freertos/src/tasks.c **** 			{
4202:./freertos/src/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6014              		.loc 1 4202 21
 6015 0042 3B68     		ldr	r3, [r7]
 6016 0044 FB61     		str	r3, [r7, #28]
 6017 0046 02E0     		b	.L365
 6018              	.L364:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 184


4203:./freertos/src/tasks.c **** 			}
4204:./freertos/src/tasks.c **** 			else
4205:./freertos/src/tasks.c **** 			{
4206:./freertos/src/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6019              		.loc 1 4206 21
 6020 0048 BB69     		ldr	r3, [r7, #24]
 6021 004a DB6C     		ldr	r3, [r3, #76]
 6022 004c FB61     		str	r3, [r7, #28]
 6023              	.L365:
4207:./freertos/src/tasks.c **** 			}
4208:./freertos/src/tasks.c **** 
4209:./freertos/src/tasks.c **** 			/* Does the priority need to change? */
4210:./freertos/src/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6024              		.loc 1 4210 13
 6025 004e BB69     		ldr	r3, [r7, #24]
 6026 0050 DB6A     		ldr	r3, [r3, #44]
 6027              		.loc 1 4210 6
 6028 0052 FA69     		ldr	r2, [r7, #28]
 6029 0054 9A42     		cmp	r2, r3
 6030 0056 59D0     		beq	.L370
4211:./freertos/src/tasks.c **** 			{
4212:./freertos/src/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:./freertos/src/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:./freertos/src/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:./freertos/src/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:./freertos/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6031              		.loc 1 4216 14
 6032 0058 BB69     		ldr	r3, [r7, #24]
 6033 005a 1B6D     		ldr	r3, [r3, #80]
 6034              		.loc 1 4216 7
 6035 005c 7A69     		ldr	r2, [r7, #20]
 6036 005e 9A42     		cmp	r2, r3
 6037 0060 54D1     		bne	.L370
4217:./freertos/src/tasks.c **** 				{
4218:./freertos/src/tasks.c **** 					/* If a task has timed out because it already holds the
4219:./freertos/src/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:./freertos/src/tasks.c **** 					its own priority. */
4221:./freertos/src/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6038              		.loc 1 4221 6
 6039 0062 2C4B     		ldr	r3, .L371
 6040 0064 1B68     		ldr	r3, [r3]
 6041 0066 BA69     		ldr	r2, [r7, #24]
 6042 0068 9A42     		cmp	r2, r3
 6043 006a 0BD1     		bne	.L366
 6044              	.LBB184:
 6045              	.LBB185:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6046              		.loc 2 197 2
 6047              		.syntax unified
 6048              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 6049 006c 4FF05003 			mov r3, #80												
 6050 0070 83F31188 		msr basepri, r3											
 6051 0074 BFF36F8F 		isb														
 6052 0078 BFF34F8F 		dsb														
 6053              	
 6054              	@ 0 "" 2
 6055              		.thumb
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 185


 6056              		.syntax unified
 6057 007c BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 6058              		.loc 2 205 1
 6059 007e 00BF     		nop
 6060              	.L367:
 6061              	.LBE185:
 6062              	.LBE184:
 6063              		.loc 1 4221 6
 6064 0080 00BF     		nop
 6065 0082 FDE7     		b	.L367
 6066              	.L366:
4222:./freertos/src/tasks.c **** 
4223:./freertos/src/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:./freertos/src/tasks.c **** 					priority to facilitate determining the subject task's
4225:./freertos/src/tasks.c **** 					state. */
4226:./freertos/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:./freertos/src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6067              		.loc 1 4227 28
 6068 0084 BB69     		ldr	r3, [r7, #24]
 6069 0086 DB6A     		ldr	r3, [r3, #44]
 6070 0088 3B61     		str	r3, [r7, #16]
4228:./freertos/src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6071              		.loc 1 4228 24
 6072 008a BB69     		ldr	r3, [r7, #24]
 6073 008c FA69     		ldr	r2, [r7, #28]
 6074 008e DA62     		str	r2, [r3, #44]
4229:./freertos/src/tasks.c **** 
4230:./freertos/src/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:./freertos/src/tasks.c **** 					being used for anything else. */
4232:./freertos/src/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6075              		.loc 1 4232 12
 6076 0090 BB69     		ldr	r3, [r7, #24]
 6077 0092 9B69     		ldr	r3, [r3, #24]
 6078              		.loc 1 4232 8
 6079 0094 002B     		cmp	r3, #0
 6080 0096 04DB     		blt	.L368
4233:./freertos/src/tasks.c **** 					{
4234:./freertos/src/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6081              		.loc 1 4234 7
 6082 0098 FB69     		ldr	r3, [r7, #28]
 6083 009a C3F10502 		rsb	r2, r3, #5
 6084 009e BB69     		ldr	r3, [r7, #24]
 6085 00a0 9A61     		str	r2, [r3, #24]
 6086              	.L368:
4235:./freertos/src/tasks.c **** 					}
4236:./freertos/src/tasks.c **** 					else
4237:./freertos/src/tasks.c **** 					{
4238:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:./freertos/src/tasks.c **** 					}
4240:./freertos/src/tasks.c **** 
4241:./freertos/src/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:./freertos/src/tasks.c **** 					then the task that holds the mutex could be in either the
4243:./freertos/src/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:./freertos/src/tasks.c **** 					from its current state list if it is in the Ready state as
4245:./freertos/src/tasks.c **** 					the task's priority is going to change and there is one
4246:./freertos/src/tasks.c **** 					Ready list per priority. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 186


4247:./freertos/src/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6087              		.loc 1 4247 10
 6088 00a2 BB69     		ldr	r3, [r7, #24]
 6089 00a4 5969     		ldr	r1, [r3, #20]
 6090 00a6 3A69     		ldr	r2, [r7, #16]
 6091 00a8 1346     		mov	r3, r2
 6092 00aa 9B00     		lsls	r3, r3, #2
 6093 00ac 1344     		add	r3, r3, r2
 6094 00ae 9B00     		lsls	r3, r3, #2
 6095 00b0 194A     		ldr	r2, .L371+4
 6096 00b2 1344     		add	r3, r3, r2
 6097              		.loc 1 4247 8
 6098 00b4 9942     		cmp	r1, r3
 6099 00b6 29D1     		bne	.L370
4248:./freertos/src/tasks.c **** 					{
4249:./freertos/src/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6100              		.loc 1 4249 11
 6101 00b8 BB69     		ldr	r3, [r7, #24]
 6102 00ba 0433     		adds	r3, r3, #4
 6103 00bc 1846     		mov	r0, r3
 6104 00be FFF7FEFF 		bl	uxListRemove
 6105 00c2 0346     		mov	r3, r0
 6106              		.loc 1 4249 9 discriminator 1
 6107 00c4 002B     		cmp	r3, #0
 6108 00c6 0AD1     		bne	.L369
4250:./freertos/src/tasks.c **** 						{
4251:./freertos/src/tasks.c **** 							/* It is known that the task is in its ready list so
4252:./freertos/src/tasks.c **** 							there is no need to check again and the port level
4253:./freertos/src/tasks.c **** 							reset macro can be called directly. */
4254:./freertos/src/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 6109              		.loc 1 4254 8
 6110 00c8 BB69     		ldr	r3, [r7, #24]
 6111 00ca DB6A     		ldr	r3, [r3, #44]
 6112 00cc 0122     		movs	r2, #1
 6113 00ce 02FA03F3 		lsl	r3, r2, r3
 6114 00d2 DA43     		mvns	r2, r3
 6115 00d4 114B     		ldr	r3, .L371+8
 6116 00d6 1B68     		ldr	r3, [r3]
 6117 00d8 1340     		ands	r3, r3, r2
 6118 00da 104A     		ldr	r2, .L371+8
 6119 00dc 1360     		str	r3, [r2]
 6120              	.L369:
4255:./freertos/src/tasks.c **** 						}
4256:./freertos/src/tasks.c **** 						else
4257:./freertos/src/tasks.c **** 						{
4258:./freertos/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:./freertos/src/tasks.c **** 						}
4260:./freertos/src/tasks.c **** 
4261:./freertos/src/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6121              		.loc 1 4261 7
 6122 00de BB69     		ldr	r3, [r7, #24]
 6123 00e0 DB6A     		ldr	r3, [r3, #44]
 6124 00e2 0122     		movs	r2, #1
 6125 00e4 9A40     		lsls	r2, r2, r3
 6126 00e6 0D4B     		ldr	r3, .L371+8
 6127 00e8 1B68     		ldr	r3, [r3]
 6128 00ea 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 187


 6129 00ec 0B4A     		ldr	r2, .L371+8
 6130 00ee 1360     		str	r3, [r2]
 6131 00f0 BB69     		ldr	r3, [r7, #24]
 6132 00f2 DA6A     		ldr	r2, [r3, #44]
 6133 00f4 1346     		mov	r3, r2
 6134 00f6 9B00     		lsls	r3, r3, #2
 6135 00f8 1344     		add	r3, r3, r2
 6136 00fa 9B00     		lsls	r3, r3, #2
 6137 00fc 064A     		ldr	r2, .L371+4
 6138 00fe 1A44     		add	r2, r2, r3
 6139 0100 BB69     		ldr	r3, [r7, #24]
 6140 0102 0433     		adds	r3, r3, #4
 6141 0104 1946     		mov	r1, r3
 6142 0106 1046     		mov	r0, r2
 6143 0108 FFF7FEFF 		bl	vListInsertEnd
 6144              	.L370:
4262:./freertos/src/tasks.c **** 					}
4263:./freertos/src/tasks.c **** 					else
4264:./freertos/src/tasks.c **** 					{
4265:./freertos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:./freertos/src/tasks.c **** 					}
4267:./freertos/src/tasks.c **** 				}
4268:./freertos/src/tasks.c **** 				else
4269:./freertos/src/tasks.c **** 				{
4270:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:./freertos/src/tasks.c **** 				}
4272:./freertos/src/tasks.c **** 			}
4273:./freertos/src/tasks.c **** 			else
4274:./freertos/src/tasks.c **** 			{
4275:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:./freertos/src/tasks.c **** 			}
4277:./freertos/src/tasks.c **** 		}
4278:./freertos/src/tasks.c **** 		else
4279:./freertos/src/tasks.c **** 		{
4280:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:./freertos/src/tasks.c **** 		}
4282:./freertos/src/tasks.c **** 	}
 6145              		.loc 1 4282 2
 6146 010c 00BF     		nop
 6147 010e 2037     		adds	r7, r7, #32
 6148              	.LCFI249:
 6149              		.cfi_def_cfa_offset 8
 6150 0110 BD46     		mov	sp, r7
 6151              	.LCFI250:
 6152              		.cfi_def_cfa_register 13
 6153              		@ sp needed
 6154 0112 80BD     		pop	{r7, pc}
 6155              	.L372:
 6156              		.align	2
 6157              	.L371:
 6158 0114 00000000 		.word	pxCurrentTCB
 6159 0118 00000000 		.word	pxReadyTasksLists
 6160 011c 00000000 		.word	uxTopReadyPriority
 6161              		.cfi_endproc
 6162              	.LFE109:
 6164              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6165              		.align	1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 188


 6166              		.global	uxTaskResetEventItemValue
 6167              		.syntax unified
 6168              		.thumb
 6169              		.thumb_func
 6171              	uxTaskResetEventItemValue:
 6172              	.LFB110:
4283:./freertos/src/tasks.c **** 
4284:./freertos/src/tasks.c **** #endif /* configUSE_MUTEXES */
4285:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4286:./freertos/src/tasks.c **** 
4287:./freertos/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:./freertos/src/tasks.c **** 
4289:./freertos/src/tasks.c **** 	void vTaskEnterCritical( void )
4290:./freertos/src/tasks.c **** 	{
4291:./freertos/src/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:./freertos/src/tasks.c **** 
4293:./freertos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:./freertos/src/tasks.c **** 		{
4295:./freertos/src/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:./freertos/src/tasks.c **** 
4297:./freertos/src/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:./freertos/src/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:./freertos/src/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:./freertos/src/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:./freertos/src/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:./freertos/src/tasks.c **** 			critical section. */
4303:./freertos/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:./freertos/src/tasks.c **** 			{
4305:./freertos/src/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:./freertos/src/tasks.c **** 			}
4307:./freertos/src/tasks.c **** 		}
4308:./freertos/src/tasks.c **** 		else
4309:./freertos/src/tasks.c **** 		{
4310:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:./freertos/src/tasks.c **** 		}
4312:./freertos/src/tasks.c **** 	}
4313:./freertos/src/tasks.c **** 
4314:./freertos/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4316:./freertos/src/tasks.c **** 
4317:./freertos/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:./freertos/src/tasks.c **** 
4319:./freertos/src/tasks.c **** 	void vTaskExitCritical( void )
4320:./freertos/src/tasks.c **** 	{
4321:./freertos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:./freertos/src/tasks.c **** 		{
4323:./freertos/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:./freertos/src/tasks.c **** 			{
4325:./freertos/src/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:./freertos/src/tasks.c **** 
4327:./freertos/src/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:./freertos/src/tasks.c **** 				{
4329:./freertos/src/tasks.c **** 					portENABLE_INTERRUPTS();
4330:./freertos/src/tasks.c **** 				}
4331:./freertos/src/tasks.c **** 				else
4332:./freertos/src/tasks.c **** 				{
4333:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 189


4334:./freertos/src/tasks.c **** 				}
4335:./freertos/src/tasks.c **** 			}
4336:./freertos/src/tasks.c **** 			else
4337:./freertos/src/tasks.c **** 			{
4338:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:./freertos/src/tasks.c **** 			}
4340:./freertos/src/tasks.c **** 		}
4341:./freertos/src/tasks.c **** 		else
4342:./freertos/src/tasks.c **** 		{
4343:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:./freertos/src/tasks.c **** 		}
4345:./freertos/src/tasks.c **** 	}
4346:./freertos/src/tasks.c **** 
4347:./freertos/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4349:./freertos/src/tasks.c **** 
4350:./freertos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:./freertos/src/tasks.c **** 
4352:./freertos/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:./freertos/src/tasks.c **** 	{
4354:./freertos/src/tasks.c **** 	size_t x;
4355:./freertos/src/tasks.c **** 
4356:./freertos/src/tasks.c **** 		/* Start by copying the entire string. */
4357:./freertos/src/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:./freertos/src/tasks.c **** 
4359:./freertos/src/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:./freertos/src/tasks.c **** 		printed out. */
4361:./freertos/src/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:./freertos/src/tasks.c **** 		{
4363:./freertos/src/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:./freertos/src/tasks.c **** 		}
4365:./freertos/src/tasks.c **** 
4366:./freertos/src/tasks.c **** 		/* Terminate. */
4367:./freertos/src/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:./freertos/src/tasks.c **** 
4369:./freertos/src/tasks.c **** 		/* Return the new end of string. */
4370:./freertos/src/tasks.c **** 		return &( pcBuffer[ x ] );
4371:./freertos/src/tasks.c **** 	}
4372:./freertos/src/tasks.c **** 
4373:./freertos/src/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4375:./freertos/src/tasks.c **** 
4376:./freertos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:./freertos/src/tasks.c **** 
4378:./freertos/src/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:./freertos/src/tasks.c **** 	{
4380:./freertos/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:./freertos/src/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:./freertos/src/tasks.c **** 	char cStatus;
4383:./freertos/src/tasks.c **** 
4384:./freertos/src/tasks.c **** 		/*
4385:./freertos/src/tasks.c **** 		 * PLEASE NOTE:
4386:./freertos/src/tasks.c **** 		 *
4387:./freertos/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:./freertos/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:./freertos/src/tasks.c **** 		 * scheduler.
4390:./freertos/src/tasks.c **** 		 *
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 190


4391:./freertos/src/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:./freertos/src/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:./freertos/src/tasks.c **** 		 * displays task names, states and stack usage.
4394:./freertos/src/tasks.c **** 		 *
4395:./freertos/src/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:./freertos/src/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:./freertos/src/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:./freertos/src/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:./freertos/src/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:./freertos/src/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:./freertos/src/tasks.c **** 		 * snprintf() implementation!).
4402:./freertos/src/tasks.c **** 		 *
4403:./freertos/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:./freertos/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:./freertos/src/tasks.c **** 		 * through a call to vTaskList().
4406:./freertos/src/tasks.c **** 		 */
4407:./freertos/src/tasks.c **** 
4408:./freertos/src/tasks.c **** 
4409:./freertos/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:./freertos/src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:./freertos/src/tasks.c **** 
4412:./freertos/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:./freertos/src/tasks.c **** 		function is executing. */
4414:./freertos/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:./freertos/src/tasks.c **** 
4416:./freertos/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:./freertos/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:./freertos/src/tasks.c **** 		equate to NULL. */
4419:./freertos/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:./freertos/src/tasks.c **** 
4421:./freertos/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:./freertos/src/tasks.c **** 		{
4423:./freertos/src/tasks.c **** 			/* Generate the (binary) data. */
4424:./freertos/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:./freertos/src/tasks.c **** 
4426:./freertos/src/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:./freertos/src/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:./freertos/src/tasks.c **** 			{
4429:./freertos/src/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:./freertos/src/tasks.c **** 				{
4431:./freertos/src/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:./freertos/src/tasks.c **** 										break;
4433:./freertos/src/tasks.c **** 
4434:./freertos/src/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:./freertos/src/tasks.c **** 										break;
4436:./freertos/src/tasks.c **** 
4437:./freertos/src/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:./freertos/src/tasks.c **** 										break;
4439:./freertos/src/tasks.c **** 
4440:./freertos/src/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:./freertos/src/tasks.c **** 										break;
4442:./freertos/src/tasks.c **** 
4443:./freertos/src/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:./freertos/src/tasks.c **** 										break;
4445:./freertos/src/tasks.c **** 
4446:./freertos/src/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:./freertos/src/tasks.c **** 					default:			/* Should not get here, but it is included
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 191


4448:./freertos/src/tasks.c **** 										to prevent static checking errors. */
4449:./freertos/src/tasks.c **** 										cStatus = ( char ) 0x00;
4450:./freertos/src/tasks.c **** 										break;
4451:./freertos/src/tasks.c **** 				}
4452:./freertos/src/tasks.c **** 
4453:./freertos/src/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:./freertos/src/tasks.c **** 				can be printed in tabular form more easily. */
4455:./freertos/src/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:./freertos/src/tasks.c **** 
4457:./freertos/src/tasks.c **** 				/* Write the rest of the string. */
4458:./freertos/src/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:./freertos/src/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:./freertos/src/tasks.c **** 			}
4461:./freertos/src/tasks.c **** 
4462:./freertos/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:./freertos/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:./freertos/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:./freertos/src/tasks.c **** 		}
4466:./freertos/src/tasks.c **** 		else
4467:./freertos/src/tasks.c **** 		{
4468:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:./freertos/src/tasks.c **** 		}
4470:./freertos/src/tasks.c **** 	}
4471:./freertos/src/tasks.c **** 
4472:./freertos/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:./freertos/src/tasks.c **** /*----------------------------------------------------------*/
4474:./freertos/src/tasks.c **** 
4475:./freertos/src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:./freertos/src/tasks.c **** 
4477:./freertos/src/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:./freertos/src/tasks.c **** 	{
4479:./freertos/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:./freertos/src/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:./freertos/src/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:./freertos/src/tasks.c **** 
4483:./freertos/src/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:./freertos/src/tasks.c **** 		{
4485:./freertos/src/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:./freertos/src/tasks.c **** 		}
4487:./freertos/src/tasks.c **** 		#endif
4488:./freertos/src/tasks.c **** 
4489:./freertos/src/tasks.c **** 		/*
4490:./freertos/src/tasks.c **** 		 * PLEASE NOTE:
4491:./freertos/src/tasks.c **** 		 *
4492:./freertos/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:./freertos/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:./freertos/src/tasks.c **** 		 * scheduler.
4495:./freertos/src/tasks.c **** 		 *
4496:./freertos/src/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:./freertos/src/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:./freertos/src/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:./freertos/src/tasks.c **** 		 * in both absolute and percentage terms.
4500:./freertos/src/tasks.c **** 		 *
4501:./freertos/src/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:./freertos/src/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:./freertos/src/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:./freertos/src/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 192


4505:./freertos/src/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:./freertos/src/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:./freertos/src/tasks.c **** 		 * a full snprintf() implementation!).
4508:./freertos/src/tasks.c **** 		 *
4509:./freertos/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:./freertos/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:./freertos/src/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:./freertos/src/tasks.c **** 		 */
4513:./freertos/src/tasks.c **** 
4514:./freertos/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:./freertos/src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:./freertos/src/tasks.c **** 
4517:./freertos/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:./freertos/src/tasks.c **** 		function is executing. */
4519:./freertos/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:./freertos/src/tasks.c **** 
4521:./freertos/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:./freertos/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:./freertos/src/tasks.c **** 		equate to NULL. */
4524:./freertos/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:./freertos/src/tasks.c **** 
4526:./freertos/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:./freertos/src/tasks.c **** 		{
4528:./freertos/src/tasks.c **** 			/* Generate the (binary) data. */
4529:./freertos/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:./freertos/src/tasks.c **** 
4531:./freertos/src/tasks.c **** 			/* For percentage calculations. */
4532:./freertos/src/tasks.c **** 			ulTotalTime /= 100UL;
4533:./freertos/src/tasks.c **** 
4534:./freertos/src/tasks.c **** 			/* Avoid divide by zero errors. */
4535:./freertos/src/tasks.c **** 			if( ulTotalTime > 0UL )
4536:./freertos/src/tasks.c **** 			{
4537:./freertos/src/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:./freertos/src/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:./freertos/src/tasks.c **** 				{
4540:./freertos/src/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:./freertos/src/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:./freertos/src/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:./freertos/src/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:./freertos/src/tasks.c **** 
4545:./freertos/src/tasks.c **** 					/* Write the task name to the string, padding with
4546:./freertos/src/tasks.c **** 					spaces so it can be printed in tabular form more
4547:./freertos/src/tasks.c **** 					easily. */
4548:./freertos/src/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:./freertos/src/tasks.c **** 
4550:./freertos/src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:./freertos/src/tasks.c **** 					{
4552:./freertos/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:./freertos/src/tasks.c **** 						{
4554:./freertos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:./freertos/src/tasks.c **** 						}
4556:./freertos/src/tasks.c **** 						#else
4557:./freertos/src/tasks.c **** 						{
4558:./freertos/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:./freertos/src/tasks.c **** 							printf() library can be used. */
4560:./freertos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:./freertos/src/tasks.c **** 						}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 193


4562:./freertos/src/tasks.c **** 						#endif
4563:./freertos/src/tasks.c **** 					}
4564:./freertos/src/tasks.c **** 					else
4565:./freertos/src/tasks.c **** 					{
4566:./freertos/src/tasks.c **** 						/* If the percentage is zero here then the task has
4567:./freertos/src/tasks.c **** 						consumed less than 1% of the total run time. */
4568:./freertos/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:./freertos/src/tasks.c **** 						{
4570:./freertos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:./freertos/src/tasks.c **** 						}
4572:./freertos/src/tasks.c **** 						#else
4573:./freertos/src/tasks.c **** 						{
4574:./freertos/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:./freertos/src/tasks.c **** 							printf() library can be used. */
4576:./freertos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:./freertos/src/tasks.c **** 						}
4578:./freertos/src/tasks.c **** 						#endif
4579:./freertos/src/tasks.c **** 					}
4580:./freertos/src/tasks.c **** 
4581:./freertos/src/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:./freertos/src/tasks.c **** 				}
4583:./freertos/src/tasks.c **** 			}
4584:./freertos/src/tasks.c **** 			else
4585:./freertos/src/tasks.c **** 			{
4586:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:./freertos/src/tasks.c **** 			}
4588:./freertos/src/tasks.c **** 
4589:./freertos/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:./freertos/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:./freertos/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:./freertos/src/tasks.c **** 		}
4593:./freertos/src/tasks.c **** 		else
4594:./freertos/src/tasks.c **** 		{
4595:./freertos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:./freertos/src/tasks.c **** 		}
4597:./freertos/src/tasks.c **** 	}
4598:./freertos/src/tasks.c **** 
4599:./freertos/src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4601:./freertos/src/tasks.c **** 
4602:./freertos/src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:./freertos/src/tasks.c **** {
 6173              		.loc 1 4603 1
 6174              		.cfi_startproc
 6175              		@ args = 0, pretend = 0, frame = 8
 6176              		@ frame_needed = 1, uses_anonymous_args = 0
 6177              		@ link register save eliminated.
 6178 0000 80B4     		push	{r7}
 6179              	.LCFI251:
 6180              		.cfi_def_cfa_offset 4
 6181              		.cfi_offset 7, -4
 6182 0002 83B0     		sub	sp, sp, #12
 6183              	.LCFI252:
 6184              		.cfi_def_cfa_offset 16
 6185 0004 00AF     		add	r7, sp, #0
 6186              	.LCFI253:
 6187              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 194


4604:./freertos/src/tasks.c **** TickType_t uxReturn;
4605:./freertos/src/tasks.c **** 
4606:./freertos/src/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6188              		.loc 1 4606 13
 6189 0006 094B     		ldr	r3, .L375
 6190 0008 1B68     		ldr	r3, [r3]
 6191              		.loc 1 4606 11
 6192 000a 9B69     		ldr	r3, [r3, #24]
 6193 000c 7B60     		str	r3, [r7, #4]
4607:./freertos/src/tasks.c **** 
4608:./freertos/src/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:./freertos/src/tasks.c **** 	queues and semaphores. */
4610:./freertos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6194              		.loc 1 4610 2
 6195 000e 074B     		ldr	r3, .L375
 6196 0010 1B68     		ldr	r3, [r3]
 6197 0012 DA6A     		ldr	r2, [r3, #44]
 6198 0014 054B     		ldr	r3, .L375
 6199 0016 1B68     		ldr	r3, [r3]
 6200 0018 C2F10502 		rsb	r2, r2, #5
 6201 001c 9A61     		str	r2, [r3, #24]
4611:./freertos/src/tasks.c **** 
4612:./freertos/src/tasks.c **** 	return uxReturn;
 6202              		.loc 1 4612 9
 6203 001e 7B68     		ldr	r3, [r7, #4]
4613:./freertos/src/tasks.c **** }
 6204              		.loc 1 4613 1
 6205 0020 1846     		mov	r0, r3
 6206 0022 0C37     		adds	r7, r7, #12
 6207              	.LCFI254:
 6208              		.cfi_def_cfa_offset 4
 6209 0024 BD46     		mov	sp, r7
 6210              	.LCFI255:
 6211              		.cfi_def_cfa_register 13
 6212              		@ sp needed
 6213 0026 80BC     		pop	{r7}
 6214              	.LCFI256:
 6215              		.cfi_restore 7
 6216              		.cfi_def_cfa_offset 0
 6217 0028 7047     		bx	lr
 6218              	.L376:
 6219 002a 00BF     		.align	2
 6220              	.L375:
 6221 002c 00000000 		.word	pxCurrentTCB
 6222              		.cfi_endproc
 6223              	.LFE110:
 6225              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6226              		.align	1
 6227              		.global	pvTaskIncrementMutexHeldCount
 6228              		.syntax unified
 6229              		.thumb
 6230              		.thumb_func
 6232              	pvTaskIncrementMutexHeldCount:
 6233              	.LFB111:
4614:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4615:./freertos/src/tasks.c **** 
4616:./freertos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 195


4617:./freertos/src/tasks.c **** 
4618:./freertos/src/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:./freertos/src/tasks.c **** 	{
 6234              		.loc 1 4619 2
 6235              		.cfi_startproc
 6236              		@ args = 0, pretend = 0, frame = 0
 6237              		@ frame_needed = 1, uses_anonymous_args = 0
 6238              		@ link register save eliminated.
 6239 0000 80B4     		push	{r7}
 6240              	.LCFI257:
 6241              		.cfi_def_cfa_offset 4
 6242              		.cfi_offset 7, -4
 6243 0002 00AF     		add	r7, sp, #0
 6244              	.LCFI258:
 6245              		.cfi_def_cfa_register 7
4620:./freertos/src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:./freertos/src/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:./freertos/src/tasks.c **** 		if( pxCurrentTCB != NULL )
 6246              		.loc 1 4622 20
 6247 0004 074B     		ldr	r3, .L380
 6248 0006 1B68     		ldr	r3, [r3]
 6249              		.loc 1 4622 5
 6250 0008 002B     		cmp	r3, #0
 6251 000a 04D0     		beq	.L378
4623:./freertos/src/tasks.c **** 		{
4624:./freertos/src/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6252              		.loc 1 4624 18
 6253 000c 054B     		ldr	r3, .L380
 6254 000e 1B68     		ldr	r3, [r3]
 6255 0010 1A6D     		ldr	r2, [r3, #80]
 6256              		.loc 1 4624 35
 6257 0012 0132     		adds	r2, r2, #1
 6258 0014 1A65     		str	r2, [r3, #80]
 6259              	.L378:
4625:./freertos/src/tasks.c **** 		}
4626:./freertos/src/tasks.c **** 
4627:./freertos/src/tasks.c **** 		return pxCurrentTCB;
 6260              		.loc 1 4627 10
 6261 0016 034B     		ldr	r3, .L380
 6262 0018 1B68     		ldr	r3, [r3]
4628:./freertos/src/tasks.c **** 	}
 6263              		.loc 1 4628 2
 6264 001a 1846     		mov	r0, r3
 6265 001c BD46     		mov	sp, r7
 6266              	.LCFI259:
 6267              		.cfi_def_cfa_register 13
 6268              		@ sp needed
 6269 001e 80BC     		pop	{r7}
 6270              	.LCFI260:
 6271              		.cfi_restore 7
 6272              		.cfi_def_cfa_offset 0
 6273 0020 7047     		bx	lr
 6274              	.L381:
 6275 0022 00BF     		.align	2
 6276              	.L380:
 6277 0024 00000000 		.word	pxCurrentTCB
 6278              		.cfi_endproc
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 196


 6279              	.LFE111:
 6281              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6282              		.align	1
 6283              		.global	ulTaskNotifyTake
 6284              		.syntax unified
 6285              		.thumb
 6286              		.thumb_func
 6288              	ulTaskNotifyTake:
 6289              	.LFB112:
4629:./freertos/src/tasks.c **** 
4630:./freertos/src/tasks.c **** #endif /* configUSE_MUTEXES */
4631:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4632:./freertos/src/tasks.c **** 
4633:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:./freertos/src/tasks.c **** 
4635:./freertos/src/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:./freertos/src/tasks.c **** 	{
 6290              		.loc 1 4636 2
 6291              		.cfi_startproc
 6292              		@ args = 0, pretend = 0, frame = 16
 6293              		@ frame_needed = 1, uses_anonymous_args = 0
 6294 0000 80B5     		push	{r7, lr}
 6295              	.LCFI261:
 6296              		.cfi_def_cfa_offset 8
 6297              		.cfi_offset 7, -8
 6298              		.cfi_offset 14, -4
 6299 0002 84B0     		sub	sp, sp, #16
 6300              	.LCFI262:
 6301              		.cfi_def_cfa_offset 24
 6302 0004 00AF     		add	r7, sp, #0
 6303              	.LCFI263:
 6304              		.cfi_def_cfa_register 7
 6305 0006 7860     		str	r0, [r7, #4]
 6306 0008 3960     		str	r1, [r7]
4637:./freertos/src/tasks.c **** 	uint32_t ulReturn;
4638:./freertos/src/tasks.c **** 
4639:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 6307              		.loc 1 4639 3
 6308 000a FFF7FEFF 		bl	vPortEnterCritical
4640:./freertos/src/tasks.c **** 		{
4641:./freertos/src/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:./freertos/src/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6309              		.loc 1 4642 20
 6310 000e 1E4B     		ldr	r3, .L387
 6311 0010 1B68     		ldr	r3, [r3]
 6312 0012 5B6D     		ldr	r3, [r3, #84]
 6313              		.loc 1 4642 6
 6314 0014 002B     		cmp	r3, #0
 6315 0016 13D1     		bne	.L383
4643:./freertos/src/tasks.c **** 			{
4644:./freertos/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:./freertos/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6316              		.loc 1 4645 17
 6317 0018 1B4B     		ldr	r3, .L387
 6318 001a 1B68     		ldr	r3, [r3]
 6319              		.loc 1 4645 33
 6320 001c 0122     		movs	r2, #1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 197


 6321 001e 83F85820 		strb	r2, [r3, #88]
4646:./freertos/src/tasks.c **** 
4647:./freertos/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6322              		.loc 1 4647 7
 6323 0022 3B68     		ldr	r3, [r7]
 6324 0024 002B     		cmp	r3, #0
 6325 0026 0BD0     		beq	.L383
4648:./freertos/src/tasks.c **** 				{
4649:./freertos/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6326              		.loc 1 4649 6
 6327 0028 0121     		movs	r1, #1
 6328 002a 3868     		ldr	r0, [r7]
 6329 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:./freertos/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:./freertos/src/tasks.c **** 
4652:./freertos/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:./freertos/src/tasks.c **** 					section (some will yield immediately, others wait until the
4654:./freertos/src/tasks.c **** 					critical section exits) - but it is not something that
4655:./freertos/src/tasks.c **** 					application code should ever do. */
4656:./freertos/src/tasks.c **** 					portYIELD_WITHIN_API();
 6330              		.loc 1 4656 6
 6331 0030 164B     		ldr	r3, .L387+4
 6332 0032 4FF08052 		mov	r2, #268435456
 6333 0036 1A60     		str	r2, [r3]
 6334              		.syntax unified
 6335              	@ 4656 "./freertos/src/tasks.c" 1
 6336 0038 BFF34F8F 		dsb
 6337              	@ 0 "" 2
 6338              	@ 4656 "./freertos/src/tasks.c" 1
 6339 003c BFF36F8F 		isb
 6340              	@ 0 "" 2
 6341              		.thumb
 6342              		.syntax unified
 6343              	.L383:
4657:./freertos/src/tasks.c **** 				}
4658:./freertos/src/tasks.c **** 				else
4659:./freertos/src/tasks.c **** 				{
4660:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:./freertos/src/tasks.c **** 				}
4662:./freertos/src/tasks.c **** 			}
4663:./freertos/src/tasks.c **** 			else
4664:./freertos/src/tasks.c **** 			{
4665:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:./freertos/src/tasks.c **** 			}
4667:./freertos/src/tasks.c **** 		}
4668:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 6344              		.loc 1 4668 3
 6345 0040 FFF7FEFF 		bl	vPortExitCritical
4669:./freertos/src/tasks.c **** 
4670:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 6346              		.loc 1 4670 3
 6347 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:./freertos/src/tasks.c **** 		{
4672:./freertos/src/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:./freertos/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6348              		.loc 1 4673 27
 6349 0048 0F4B     		ldr	r3, .L387
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 198


 6350 004a 1B68     		ldr	r3, [r3]
 6351              		.loc 1 4673 13
 6352 004c 5B6D     		ldr	r3, [r3, #84]
 6353 004e FB60     		str	r3, [r7, #12]
4674:./freertos/src/tasks.c **** 
4675:./freertos/src/tasks.c **** 			if( ulReturn != 0UL )
 6354              		.loc 1 4675 6
 6355 0050 FB68     		ldr	r3, [r7, #12]
 6356 0052 002B     		cmp	r3, #0
 6357 0054 0CD0     		beq	.L384
4676:./freertos/src/tasks.c **** 			{
4677:./freertos/src/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6358              		.loc 1 4677 7
 6359 0056 7B68     		ldr	r3, [r7, #4]
 6360 0058 002B     		cmp	r3, #0
 6361 005a 04D0     		beq	.L385
4678:./freertos/src/tasks.c **** 				{
4679:./freertos/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6362              		.loc 1 4679 18
 6363 005c 0A4B     		ldr	r3, .L387
 6364 005e 1B68     		ldr	r3, [r3]
 6365              		.loc 1 4679 36
 6366 0060 0022     		movs	r2, #0
 6367 0062 5A65     		str	r2, [r3, #84]
 6368 0064 04E0     		b	.L384
 6369              	.L385:
4680:./freertos/src/tasks.c **** 				}
4681:./freertos/src/tasks.c **** 				else
4682:./freertos/src/tasks.c **** 				{
4683:./freertos/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6370              		.loc 1 4683 18
 6371 0066 084B     		ldr	r3, .L387
 6372 0068 1B68     		ldr	r3, [r3]
 6373              		.loc 1 4683 47
 6374 006a FA68     		ldr	r2, [r7, #12]
 6375 006c 013A     		subs	r2, r2, #1
 6376              		.loc 1 4683 36
 6377 006e 5A65     		str	r2, [r3, #84]
 6378              	.L384:
4684:./freertos/src/tasks.c **** 				}
4685:./freertos/src/tasks.c **** 			}
4686:./freertos/src/tasks.c **** 			else
4687:./freertos/src/tasks.c **** 			{
4688:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:./freertos/src/tasks.c **** 			}
4690:./freertos/src/tasks.c **** 
4691:./freertos/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6379              		.loc 1 4691 16
 6380 0070 054B     		ldr	r3, .L387
 6381 0072 1B68     		ldr	r3, [r3]
 6382              		.loc 1 4691 32
 6383 0074 0022     		movs	r2, #0
 6384 0076 83F85820 		strb	r2, [r3, #88]
4692:./freertos/src/tasks.c **** 		}
4693:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 6385              		.loc 1 4693 3
 6386 007a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 199


4694:./freertos/src/tasks.c **** 
4695:./freertos/src/tasks.c **** 		return ulReturn;
 6387              		.loc 1 4695 10
 6388 007e FB68     		ldr	r3, [r7, #12]
4696:./freertos/src/tasks.c **** 	}
 6389              		.loc 1 4696 2
 6390 0080 1846     		mov	r0, r3
 6391 0082 1037     		adds	r7, r7, #16
 6392              	.LCFI264:
 6393              		.cfi_def_cfa_offset 8
 6394 0084 BD46     		mov	sp, r7
 6395              	.LCFI265:
 6396              		.cfi_def_cfa_register 13
 6397              		@ sp needed
 6398 0086 80BD     		pop	{r7, pc}
 6399              	.L388:
 6400              		.align	2
 6401              	.L387:
 6402 0088 00000000 		.word	pxCurrentTCB
 6403 008c 04ED00E0 		.word	-536810236
 6404              		.cfi_endproc
 6405              	.LFE112:
 6407              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6408              		.align	1
 6409              		.global	xTaskNotifyWait
 6410              		.syntax unified
 6411              		.thumb
 6412              		.thumb_func
 6414              	xTaskNotifyWait:
 6415              	.LFB113:
4697:./freertos/src/tasks.c **** 
4698:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4700:./freertos/src/tasks.c **** 
4701:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:./freertos/src/tasks.c **** 
4703:./freertos/src/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:./freertos/src/tasks.c **** 	{
 6416              		.loc 1 4704 2
 6417              		.cfi_startproc
 6418              		@ args = 0, pretend = 0, frame = 24
 6419              		@ frame_needed = 1, uses_anonymous_args = 0
 6420 0000 80B5     		push	{r7, lr}
 6421              	.LCFI266:
 6422              		.cfi_def_cfa_offset 8
 6423              		.cfi_offset 7, -8
 6424              		.cfi_offset 14, -4
 6425 0002 86B0     		sub	sp, sp, #24
 6426              	.LCFI267:
 6427              		.cfi_def_cfa_offset 32
 6428 0004 00AF     		add	r7, sp, #0
 6429              	.LCFI268:
 6430              		.cfi_def_cfa_register 7
 6431 0006 F860     		str	r0, [r7, #12]
 6432 0008 B960     		str	r1, [r7, #8]
 6433 000a 7A60     		str	r2, [r7, #4]
 6434 000c 3B60     		str	r3, [r7]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 200


4705:./freertos/src/tasks.c **** 	BaseType_t xReturn;
4706:./freertos/src/tasks.c **** 
4707:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 6435              		.loc 1 4707 3
 6436 000e FFF7FEFF 		bl	vPortEnterCritical
4708:./freertos/src/tasks.c **** 		{
4709:./freertos/src/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:./freertos/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6437              		.loc 1 4710 20
 6438 0012 264B     		ldr	r3, .L395
 6439 0014 1B68     		ldr	r3, [r3]
 6440 0016 93F85830 		ldrb	r3, [r3, #88]
 6441 001a DBB2     		uxtb	r3, r3
 6442              		.loc 1 4710 6
 6443 001c 022B     		cmp	r3, #2
 6444 001e 1AD0     		beq	.L390
4711:./freertos/src/tasks.c **** 			{
4712:./freertos/src/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:./freertos/src/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:./freertos/src/tasks.c **** 				clear the value to zero. */
4715:./freertos/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6445              		.loc 1 4715 17
 6446 0020 224B     		ldr	r3, .L395
 6447 0022 1B68     		ldr	r3, [r3]
 6448 0024 596D     		ldr	r1, [r3, #84]
 6449              		.loc 1 4715 38
 6450 0026 FA68     		ldr	r2, [r7, #12]
 6451 0028 D243     		mvns	r2, r2
 6452              		.loc 1 4715 35
 6453 002a 0A40     		ands	r2, r2, r1
 6454 002c 5A65     		str	r2, [r3, #84]
4716:./freertos/src/tasks.c **** 
4717:./freertos/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:./freertos/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6455              		.loc 1 4718 17
 6456 002e 1F4B     		ldr	r3, .L395
 6457 0030 1B68     		ldr	r3, [r3]
 6458              		.loc 1 4718 33
 6459 0032 0122     		movs	r2, #1
 6460 0034 83F85820 		strb	r2, [r3, #88]
4719:./freertos/src/tasks.c **** 
4720:./freertos/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6461              		.loc 1 4720 7
 6462 0038 3B68     		ldr	r3, [r7]
 6463 003a 002B     		cmp	r3, #0
 6464 003c 0BD0     		beq	.L390
4721:./freertos/src/tasks.c **** 				{
4722:./freertos/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6465              		.loc 1 4722 6
 6466 003e 0121     		movs	r1, #1
 6467 0040 3868     		ldr	r0, [r7]
 6468 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:./freertos/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:./freertos/src/tasks.c **** 
4725:./freertos/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:./freertos/src/tasks.c **** 					section (some will yield immediately, others wait until the
4727:./freertos/src/tasks.c **** 					critical section exits) - but it is not something that
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 201


4728:./freertos/src/tasks.c **** 					application code should ever do. */
4729:./freertos/src/tasks.c **** 					portYIELD_WITHIN_API();
 6469              		.loc 1 4729 6
 6470 0046 1A4B     		ldr	r3, .L395+4
 6471 0048 4FF08052 		mov	r2, #268435456
 6472 004c 1A60     		str	r2, [r3]
 6473              		.syntax unified
 6474              	@ 4729 "./freertos/src/tasks.c" 1
 6475 004e BFF34F8F 		dsb
 6476              	@ 0 "" 2
 6477              	@ 4729 "./freertos/src/tasks.c" 1
 6478 0052 BFF36F8F 		isb
 6479              	@ 0 "" 2
 6480              		.thumb
 6481              		.syntax unified
 6482              	.L390:
4730:./freertos/src/tasks.c **** 				}
4731:./freertos/src/tasks.c **** 				else
4732:./freertos/src/tasks.c **** 				{
4733:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:./freertos/src/tasks.c **** 				}
4735:./freertos/src/tasks.c **** 			}
4736:./freertos/src/tasks.c **** 			else
4737:./freertos/src/tasks.c **** 			{
4738:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:./freertos/src/tasks.c **** 			}
4740:./freertos/src/tasks.c **** 		}
4741:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 6483              		.loc 1 4741 3
 6484 0056 FFF7FEFF 		bl	vPortExitCritical
4742:./freertos/src/tasks.c **** 
4743:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 6485              		.loc 1 4743 3
 6486 005a FFF7FEFF 		bl	vPortEnterCritical
4744:./freertos/src/tasks.c **** 		{
4745:./freertos/src/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:./freertos/src/tasks.c **** 
4747:./freertos/src/tasks.c **** 			if( pulNotificationValue != NULL )
 6487              		.loc 1 4747 6
 6488 005e 7B68     		ldr	r3, [r7, #4]
 6489 0060 002B     		cmp	r3, #0
 6490 0062 04D0     		beq	.L391
4748:./freertos/src/tasks.c **** 			{
4749:./freertos/src/tasks.c **** 				/* Output the current notification value, which may or may not
4750:./freertos/src/tasks.c **** 				have changed. */
4751:./freertos/src/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6491              		.loc 1 4751 41
 6492 0064 114B     		ldr	r3, .L395
 6493 0066 1B68     		ldr	r3, [r3]
 6494 0068 5A6D     		ldr	r2, [r3, #84]
 6495              		.loc 1 4751 27
 6496 006a 7B68     		ldr	r3, [r7, #4]
 6497 006c 1A60     		str	r2, [r3]
 6498              	.L391:
4752:./freertos/src/tasks.c **** 			}
4753:./freertos/src/tasks.c **** 
4754:./freertos/src/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 202


4755:./freertos/src/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:./freertos/src/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:./freertos/src/tasks.c **** 			unblocked because of a timeout. */
4758:./freertos/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6499              		.loc 1 4758 20
 6500 006e 0F4B     		ldr	r3, .L395
 6501 0070 1B68     		ldr	r3, [r3]
 6502 0072 93F85830 		ldrb	r3, [r3, #88]
 6503 0076 DBB2     		uxtb	r3, r3
 6504              		.loc 1 4758 6
 6505 0078 022B     		cmp	r3, #2
 6506 007a 02D0     		beq	.L392
4759:./freertos/src/tasks.c **** 			{
4760:./freertos/src/tasks.c **** 				/* A notification was not received. */
4761:./freertos/src/tasks.c **** 				xReturn = pdFALSE;
 6507              		.loc 1 4761 13
 6508 007c 0023     		movs	r3, #0
 6509 007e 7B61     		str	r3, [r7, #20]
 6510 0080 08E0     		b	.L393
 6511              	.L392:
4762:./freertos/src/tasks.c **** 			}
4763:./freertos/src/tasks.c **** 			else
4764:./freertos/src/tasks.c **** 			{
4765:./freertos/src/tasks.c **** 				/* A notification was already pending or a notification was
4766:./freertos/src/tasks.c **** 				received while the task was waiting. */
4767:./freertos/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6512              		.loc 1 4767 17
 6513 0082 0A4B     		ldr	r3, .L395
 6514 0084 1B68     		ldr	r3, [r3]
 6515 0086 596D     		ldr	r1, [r3, #84]
 6516              		.loc 1 4767 38
 6517 0088 BA68     		ldr	r2, [r7, #8]
 6518 008a D243     		mvns	r2, r2
 6519              		.loc 1 4767 35
 6520 008c 0A40     		ands	r2, r2, r1
 6521 008e 5A65     		str	r2, [r3, #84]
4768:./freertos/src/tasks.c **** 				xReturn = pdTRUE;
 6522              		.loc 1 4768 13
 6523 0090 0123     		movs	r3, #1
 6524 0092 7B61     		str	r3, [r7, #20]
 6525              	.L393:
4769:./freertos/src/tasks.c **** 			}
4770:./freertos/src/tasks.c **** 
4771:./freertos/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6526              		.loc 1 4771 16
 6527 0094 054B     		ldr	r3, .L395
 6528 0096 1B68     		ldr	r3, [r3]
 6529              		.loc 1 4771 32
 6530 0098 0022     		movs	r2, #0
 6531 009a 83F85820 		strb	r2, [r3, #88]
4772:./freertos/src/tasks.c **** 		}
4773:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 6532              		.loc 1 4773 3
 6533 009e FFF7FEFF 		bl	vPortExitCritical
4774:./freertos/src/tasks.c **** 
4775:./freertos/src/tasks.c **** 		return xReturn;
 6534              		.loc 1 4775 10
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 203


 6535 00a2 7B69     		ldr	r3, [r7, #20]
4776:./freertos/src/tasks.c **** 	}
 6536              		.loc 1 4776 2
 6537 00a4 1846     		mov	r0, r3
 6538 00a6 1837     		adds	r7, r7, #24
 6539              	.LCFI269:
 6540              		.cfi_def_cfa_offset 8
 6541 00a8 BD46     		mov	sp, r7
 6542              	.LCFI270:
 6543              		.cfi_def_cfa_register 13
 6544              		@ sp needed
 6545 00aa 80BD     		pop	{r7, pc}
 6546              	.L396:
 6547              		.align	2
 6548              	.L395:
 6549 00ac 00000000 		.word	pxCurrentTCB
 6550 00b0 04ED00E0 		.word	-536810236
 6551              		.cfi_endproc
 6552              	.LFE113:
 6554              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6555              		.align	1
 6556              		.global	xTaskGenericNotify
 6557              		.syntax unified
 6558              		.thumb
 6559              		.thumb_func
 6561              	xTaskGenericNotify:
 6562              	.LFB114:
4777:./freertos/src/tasks.c **** 
4778:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4780:./freertos/src/tasks.c **** 
4781:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:./freertos/src/tasks.c **** 
4783:./freertos/src/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:./freertos/src/tasks.c **** 	{
 6563              		.loc 1 4784 2
 6564              		.cfi_startproc
 6565              		@ args = 0, pretend = 0, frame = 40
 6566              		@ frame_needed = 1, uses_anonymous_args = 0
 6567 0000 80B5     		push	{r7, lr}
 6568              	.LCFI271:
 6569              		.cfi_def_cfa_offset 8
 6570              		.cfi_offset 7, -8
 6571              		.cfi_offset 14, -4
 6572 0002 8AB0     		sub	sp, sp, #40
 6573              	.LCFI272:
 6574              		.cfi_def_cfa_offset 48
 6575 0004 00AF     		add	r7, sp, #0
 6576              	.LCFI273:
 6577              		.cfi_def_cfa_register 7
 6578 0006 F860     		str	r0, [r7, #12]
 6579 0008 B960     		str	r1, [r7, #8]
 6580 000a 3B60     		str	r3, [r7]
 6581 000c 1346     		mov	r3, r2
 6582 000e FB71     		strb	r3, [r7, #7]
4785:./freertos/src/tasks.c **** 	TCB_t * pxTCB;
4786:./freertos/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 204


 6583              		.loc 1 4786 13
 6584 0010 0123     		movs	r3, #1
 6585 0012 7B62     		str	r3, [r7, #36]
4787:./freertos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:./freertos/src/tasks.c **** 
4789:./freertos/src/tasks.c **** 		configASSERT( xTaskToNotify );
 6586              		.loc 1 4789 3
 6587 0014 FB68     		ldr	r3, [r7, #12]
 6588 0016 002B     		cmp	r3, #0
 6589 0018 0BD1     		bne	.L398
 6590              	.LBB186:
 6591              	.LBB187:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6592              		.loc 2 197 2
 6593              		.syntax unified
 6594              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 6595 001a 4FF05003 			mov r3, #80												
 6596 001e 83F31188 		msr basepri, r3											
 6597 0022 BFF36F8F 		isb														
 6598 0026 BFF34F8F 		dsb														
 6599              	
 6600              	@ 0 "" 2
 6601              		.thumb
 6602              		.syntax unified
 6603 002a BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 6604              		.loc 2 205 1
 6605 002c 00BF     		nop
 6606              	.L399:
 6607              	.LBE187:
 6608              	.LBE186:
 6609              		.loc 1 4789 3
 6610 002e 00BF     		nop
 6611 0030 FDE7     		b	.L399
 6612              	.L398:
4790:./freertos/src/tasks.c **** 		pxTCB = xTaskToNotify;
 6613              		.loc 1 4790 9
 6614 0032 FB68     		ldr	r3, [r7, #12]
 6615 0034 3B62     		str	r3, [r7, #32]
4791:./freertos/src/tasks.c **** 
4792:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 6616              		.loc 1 4792 3
 6617 0036 FFF7FEFF 		bl	vPortEnterCritical
4793:./freertos/src/tasks.c **** 		{
4794:./freertos/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6618              		.loc 1 4794 6
 6619 003a 3B68     		ldr	r3, [r7]
 6620 003c 002B     		cmp	r3, #0
 6621 003e 03D0     		beq	.L400
4795:./freertos/src/tasks.c **** 			{
4796:./freertos/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6622              		.loc 1 4796 42
 6623 0040 3B6A     		ldr	r3, [r7, #32]
 6624 0042 5A6D     		ldr	r2, [r3, #84]
 6625              		.loc 1 4796 35
 6626 0044 3B68     		ldr	r3, [r7]
 6627 0046 1A60     		str	r2, [r3]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 205


 6628              	.L400:
4797:./freertos/src/tasks.c **** 			}
4798:./freertos/src/tasks.c **** 
4799:./freertos/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6629              		.loc 1 4799 26
 6630 0048 3B6A     		ldr	r3, [r7, #32]
 6631 004a 93F85830 		ldrb	r3, [r3, #88]
 6632 004e FB77     		strb	r3, [r7, #31]
4800:./freertos/src/tasks.c **** 
4801:./freertos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6633              		.loc 1 4801 25
 6634 0050 3B6A     		ldr	r3, [r7, #32]
 6635 0052 0222     		movs	r2, #2
 6636 0054 83F85820 		strb	r2, [r3, #88]
4802:./freertos/src/tasks.c **** 
4803:./freertos/src/tasks.c **** 			switch( eAction )
 6637              		.loc 1 4803 4
 6638 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6639 005a 042B     		cmp	r3, #4
 6640 005c 27D8     		bhi	.L401
 6641 005e 01A2     		adr	r2, .L403
 6642 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6643              		.p2align 2
 6644              	.L403:
 6645 0064 D1000000 		.word	.L417+1
 6646 0068 79000000 		.word	.L406+1
 6647 006c 87000000 		.word	.L405+1
 6648 0070 93000000 		.word	.L404+1
 6649 0074 9B000000 		.word	.L402+1
 6650              		.p2align 1
 6651              	.L406:
4804:./freertos/src/tasks.c **** 			{
4805:./freertos/src/tasks.c **** 				case eSetBits	:
4806:./freertos/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6652              		.loc 1 4806 11
 6653 0078 3B6A     		ldr	r3, [r7, #32]
 6654 007a 5A6D     		ldr	r2, [r3, #84]
 6655              		.loc 1 4806 29
 6656 007c BB68     		ldr	r3, [r7, #8]
 6657 007e 1A43     		orrs	r2, r2, r3
 6658 0080 3B6A     		ldr	r3, [r7, #32]
 6659 0082 5A65     		str	r2, [r3, #84]
4807:./freertos/src/tasks.c **** 					break;
 6660              		.loc 1 4807 6
 6661 0084 27E0     		b	.L408
 6662              	.L405:
4808:./freertos/src/tasks.c **** 
4809:./freertos/src/tasks.c **** 				case eIncrement	:
4810:./freertos/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6663              		.loc 1 4810 13
 6664 0086 3B6A     		ldr	r3, [r7, #32]
 6665 0088 5B6D     		ldr	r3, [r3, #84]
 6666              		.loc 1 4810 32
 6667 008a 5A1C     		adds	r2, r3, #1
 6668 008c 3B6A     		ldr	r3, [r7, #32]
 6669 008e 5A65     		str	r2, [r3, #84]
4811:./freertos/src/tasks.c **** 					break;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 206


 6670              		.loc 1 4811 6
 6671 0090 21E0     		b	.L408
 6672              	.L404:
4812:./freertos/src/tasks.c **** 
4813:./freertos/src/tasks.c **** 				case eSetValueWithOverwrite	:
4814:./freertos/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6673              		.loc 1 4814 29
 6674 0092 3B6A     		ldr	r3, [r7, #32]
 6675 0094 BA68     		ldr	r2, [r7, #8]
 6676 0096 5A65     		str	r2, [r3, #84]
4815:./freertos/src/tasks.c **** 					break;
 6677              		.loc 1 4815 6
 6678 0098 1DE0     		b	.L408
 6679              	.L402:
4816:./freertos/src/tasks.c **** 
4817:./freertos/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:./freertos/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6680              		.loc 1 4818 8
 6681 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6682 009c 022B     		cmp	r3, #2
 6683 009e 03D0     		beq	.L409
4819:./freertos/src/tasks.c **** 					{
4820:./freertos/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6684              		.loc 1 4820 30
 6685 00a0 3B6A     		ldr	r3, [r7, #32]
 6686 00a2 BA68     		ldr	r2, [r7, #8]
 6687 00a4 5A65     		str	r2, [r3, #84]
4821:./freertos/src/tasks.c **** 					}
4822:./freertos/src/tasks.c **** 					else
4823:./freertos/src/tasks.c **** 					{
4824:./freertos/src/tasks.c **** 						/* The value could not be written to the task. */
4825:./freertos/src/tasks.c **** 						xReturn = pdFAIL;
4826:./freertos/src/tasks.c **** 					}
4827:./freertos/src/tasks.c **** 					break;
 6688              		.loc 1 4827 6
 6689 00a6 16E0     		b	.L408
 6690              	.L409:
4825:./freertos/src/tasks.c **** 					}
 6691              		.loc 1 4825 15
 6692 00a8 0023     		movs	r3, #0
 6693 00aa 7B62     		str	r3, [r7, #36]
 6694              		.loc 1 4827 6
 6695 00ac 13E0     		b	.L408
 6696              	.L401:
4828:./freertos/src/tasks.c **** 
4829:./freertos/src/tasks.c **** 				case eNoAction:
4830:./freertos/src/tasks.c **** 					/* The task is being notified without its notify value being
4831:./freertos/src/tasks.c **** 					updated. */
4832:./freertos/src/tasks.c **** 					break;
4833:./freertos/src/tasks.c **** 
4834:./freertos/src/tasks.c **** 				default:
4835:./freertos/src/tasks.c **** 					/* Should not get here if all enums are handled.
4836:./freertos/src/tasks.c **** 					Artificially force an assert by testing a value the
4837:./freertos/src/tasks.c **** 					compiler can't assume is const. */
4838:./freertos/src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6697              		.loc 1 4838 6
 6698 00ae 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 207


 6699 00b0 5B6D     		ldr	r3, [r3, #84]
 6700 00b2 B3F1FF3F 		cmp	r3, #-1
 6701 00b6 0DD0     		beq	.L418
 6702              	.LBB188:
 6703              	.LBB189:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6704              		.loc 2 197 2
 6705              		.syntax unified
 6706              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 6707 00b8 4FF05003 			mov r3, #80												
 6708 00bc 83F31188 		msr basepri, r3											
 6709 00c0 BFF36F8F 		isb														
 6710 00c4 BFF34F8F 		dsb														
 6711              	
 6712              	@ 0 "" 2
 6713              		.thumb
 6714              		.syntax unified
 6715 00c8 7B61     		str	r3, [r7, #20]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 6716              		.loc 2 205 1
 6717 00ca 00BF     		nop
 6718              	.L412:
 6719              	.LBE189:
 6720              	.LBE188:
 6721              		.loc 1 4838 6
 6722 00cc 00BF     		nop
 6723 00ce FDE7     		b	.L412
 6724              	.L417:
4832:./freertos/src/tasks.c **** 
 6725              		.loc 1 4832 6
 6726 00d0 00BF     		nop
 6727 00d2 00E0     		b	.L408
 6728              	.L418:
4839:./freertos/src/tasks.c **** 
4840:./freertos/src/tasks.c **** 					break;
 6729              		.loc 1 4840 6
 6730 00d4 00BF     		nop
 6731              	.L408:
4841:./freertos/src/tasks.c **** 			}
4842:./freertos/src/tasks.c **** 
4843:./freertos/src/tasks.c **** 			traceTASK_NOTIFY();
4844:./freertos/src/tasks.c **** 
4845:./freertos/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:./freertos/src/tasks.c **** 			notification then unblock it now. */
4847:./freertos/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6732              		.loc 1 4847 6
 6733 00d6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6734 00d8 012B     		cmp	r3, #1
 6735 00da 3AD1     		bne	.L413
4848:./freertos/src/tasks.c **** 			{
4849:./freertos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6736              		.loc 1 4849 14
 6737 00dc 3B6A     		ldr	r3, [r7, #32]
 6738 00de 0433     		adds	r3, r3, #4
 6739 00e0 1846     		mov	r0, r3
 6740 00e2 FFF7FEFF 		bl	uxListRemove
4850:./freertos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 208


 6741              		.loc 1 4850 5
 6742 00e6 3B6A     		ldr	r3, [r7, #32]
 6743 00e8 DB6A     		ldr	r3, [r3, #44]
 6744 00ea 0122     		movs	r2, #1
 6745 00ec 9A40     		lsls	r2, r2, r3
 6746 00ee 1C4B     		ldr	r3, .L419
 6747 00f0 1B68     		ldr	r3, [r3]
 6748 00f2 1343     		orrs	r3, r3, r2
 6749 00f4 1A4A     		ldr	r2, .L419
 6750 00f6 1360     		str	r3, [r2]
 6751 00f8 3B6A     		ldr	r3, [r7, #32]
 6752 00fa DA6A     		ldr	r2, [r3, #44]
 6753 00fc 1346     		mov	r3, r2
 6754 00fe 9B00     		lsls	r3, r3, #2
 6755 0100 1344     		add	r3, r3, r2
 6756 0102 9B00     		lsls	r3, r3, #2
 6757 0104 174A     		ldr	r2, .L419+4
 6758 0106 1A44     		add	r2, r2, r3
 6759 0108 3B6A     		ldr	r3, [r7, #32]
 6760 010a 0433     		adds	r3, r3, #4
 6761 010c 1946     		mov	r1, r3
 6762 010e 1046     		mov	r0, r2
 6763 0110 FFF7FEFF 		bl	vListInsertEnd
4851:./freertos/src/tasks.c **** 
4852:./freertos/src/tasks.c **** 				/* The task should not have been on an event list. */
4853:./freertos/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6764              		.loc 1 4853 5
 6765 0114 3B6A     		ldr	r3, [r7, #32]
 6766 0116 9B6A     		ldr	r3, [r3, #40]
 6767 0118 002B     		cmp	r3, #0
 6768 011a 0BD0     		beq	.L414
 6769              	.LBB190:
 6770              	.LBB191:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6771              		.loc 2 197 2
 6772              		.syntax unified
 6773              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 6774 011c 4FF05003 			mov r3, #80												
 6775 0120 83F31188 		msr basepri, r3											
 6776 0124 BFF36F8F 		isb														
 6777 0128 BFF34F8F 		dsb														
 6778              	
 6779              	@ 0 "" 2
 6780              		.thumb
 6781              		.syntax unified
 6782 012c 3B61     		str	r3, [r7, #16]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 6783              		.loc 2 205 1
 6784 012e 00BF     		nop
 6785              	.L415:
 6786              	.LBE191:
 6787              	.LBE190:
 6788              		.loc 1 4853 5
 6789 0130 00BF     		nop
 6790 0132 FDE7     		b	.L415
 6791              	.L414:
4854:./freertos/src/tasks.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 209


4855:./freertos/src/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:./freertos/src/tasks.c **** 				{
4857:./freertos/src/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:./freertos/src/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:./freertos/src/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:./freertos/src/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:./freertos/src/tasks.c **** 					because it will automatically get reset to a new value when
4862:./freertos/src/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:./freertos/src/tasks.c **** 					tickless idling is used it might be more important to enter
4864:./freertos/src/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:./freertos/src/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:./freertos/src/tasks.c **** 					earliest possible time. */
4867:./freertos/src/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:./freertos/src/tasks.c **** 				}
4869:./freertos/src/tasks.c **** 				#endif
4870:./freertos/src/tasks.c **** 
4871:./freertos/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6792              		.loc 1 4871 14
 6793 0134 3B6A     		ldr	r3, [r7, #32]
 6794 0136 DA6A     		ldr	r2, [r3, #44]
 6795              		.loc 1 4871 41
 6796 0138 0B4B     		ldr	r3, .L419+8
 6797 013a 1B68     		ldr	r3, [r3]
 6798 013c DB6A     		ldr	r3, [r3, #44]
 6799              		.loc 1 4871 7
 6800 013e 9A42     		cmp	r2, r3
 6801 0140 07D9     		bls	.L413
4872:./freertos/src/tasks.c **** 				{
4873:./freertos/src/tasks.c **** 					/* The notified task has a priority above the currently
4874:./freertos/src/tasks.c **** 					executing task so a yield is required. */
4875:./freertos/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6802              		.loc 1 4875 6
 6803 0142 0A4B     		ldr	r3, .L419+12
 6804 0144 4FF08052 		mov	r2, #268435456
 6805 0148 1A60     		str	r2, [r3]
 6806              		.syntax unified
 6807              	@ 4875 "./freertos/src/tasks.c" 1
 6808 014a BFF34F8F 		dsb
 6809              	@ 0 "" 2
 6810              	@ 4875 "./freertos/src/tasks.c" 1
 6811 014e BFF36F8F 		isb
 6812              	@ 0 "" 2
 6813              		.thumb
 6814              		.syntax unified
 6815              	.L413:
4876:./freertos/src/tasks.c **** 				}
4877:./freertos/src/tasks.c **** 				else
4878:./freertos/src/tasks.c **** 				{
4879:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:./freertos/src/tasks.c **** 				}
4881:./freertos/src/tasks.c **** 			}
4882:./freertos/src/tasks.c **** 			else
4883:./freertos/src/tasks.c **** 			{
4884:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:./freertos/src/tasks.c **** 			}
4886:./freertos/src/tasks.c **** 		}
4887:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 210


 6816              		.loc 1 4887 3
 6817 0152 FFF7FEFF 		bl	vPortExitCritical
4888:./freertos/src/tasks.c **** 
4889:./freertos/src/tasks.c **** 		return xReturn;
 6818              		.loc 1 4889 10
 6819 0156 7B6A     		ldr	r3, [r7, #36]
4890:./freertos/src/tasks.c **** 	}
 6820              		.loc 1 4890 2
 6821 0158 1846     		mov	r0, r3
 6822 015a 2837     		adds	r7, r7, #40
 6823              	.LCFI274:
 6824              		.cfi_def_cfa_offset 8
 6825 015c BD46     		mov	sp, r7
 6826              	.LCFI275:
 6827              		.cfi_def_cfa_register 13
 6828              		@ sp needed
 6829 015e 80BD     		pop	{r7, pc}
 6830              	.L420:
 6831              		.align	2
 6832              	.L419:
 6833 0160 00000000 		.word	uxTopReadyPriority
 6834 0164 00000000 		.word	pxReadyTasksLists
 6835 0168 00000000 		.word	pxCurrentTCB
 6836 016c 04ED00E0 		.word	-536810236
 6837              		.cfi_endproc
 6838              	.LFE114:
 6840              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6841              		.align	1
 6842              		.global	xTaskGenericNotifyFromISR
 6843              		.syntax unified
 6844              		.thumb
 6845              		.thumb_func
 6847              	xTaskGenericNotifyFromISR:
 6848              	.LFB115:
4891:./freertos/src/tasks.c **** 
4892:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
4894:./freertos/src/tasks.c **** 
4895:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:./freertos/src/tasks.c **** 
4897:./freertos/src/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:./freertos/src/tasks.c **** 	{
 6849              		.loc 1 4898 2
 6850              		.cfi_startproc
 6851              		@ args = 4, pretend = 0, frame = 56
 6852              		@ frame_needed = 1, uses_anonymous_args = 0
 6853 0000 80B5     		push	{r7, lr}
 6854              	.LCFI276:
 6855              		.cfi_def_cfa_offset 8
 6856              		.cfi_offset 7, -8
 6857              		.cfi_offset 14, -4
 6858 0002 8EB0     		sub	sp, sp, #56
 6859              	.LCFI277:
 6860              		.cfi_def_cfa_offset 64
 6861 0004 00AF     		add	r7, sp, #0
 6862              	.LCFI278:
 6863              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 211


 6864 0006 F860     		str	r0, [r7, #12]
 6865 0008 B960     		str	r1, [r7, #8]
 6866 000a 3B60     		str	r3, [r7]
 6867 000c 1346     		mov	r3, r2
 6868 000e FB71     		strb	r3, [r7, #7]
4899:./freertos/src/tasks.c **** 	TCB_t * pxTCB;
4900:./freertos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:./freertos/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6869              		.loc 1 4901 13
 6870 0010 0123     		movs	r3, #1
 6871 0012 7B63     		str	r3, [r7, #52]
4902:./freertos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:./freertos/src/tasks.c **** 
4904:./freertos/src/tasks.c **** 		configASSERT( xTaskToNotify );
 6872              		.loc 1 4904 3
 6873 0014 FB68     		ldr	r3, [r7, #12]
 6874 0016 002B     		cmp	r3, #0
 6875 0018 0BD1     		bne	.L422
 6876              	.LBB192:
 6877              	.LBB193:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6878              		.loc 2 197 2
 6879              		.syntax unified
 6880              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 6881 001a 4FF05003 			mov r3, #80												
 6882 001e 83F31188 		msr basepri, r3											
 6883 0022 BFF36F8F 		isb														
 6884 0026 BFF34F8F 		dsb														
 6885              	
 6886              	@ 0 "" 2
 6887              		.thumb
 6888              		.syntax unified
 6889 002a 7B62     		str	r3, [r7, #36]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 6890              		.loc 2 205 1
 6891 002c 00BF     		nop
 6892              	.L423:
 6893              	.LBE193:
 6894              	.LBE192:
 6895              		.loc 1 4904 3
 6896 002e 00BF     		nop
 6897 0030 FDE7     		b	.L423
 6898              	.L422:
4905:./freertos/src/tasks.c **** 
4906:./freertos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:./freertos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:./freertos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:./freertos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:./freertos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:./freertos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:./freertos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:./freertos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:./freertos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:./freertos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:./freertos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:./freertos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 212


4919:./freertos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:./freertos/src/tasks.c **** 		provided on the following link:
4921:./freertos/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6899              		.loc 1 4922 3
 6900 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:./freertos/src/tasks.c **** 
4924:./freertos/src/tasks.c **** 		pxTCB = xTaskToNotify;
 6901              		.loc 1 4924 9
 6902 0036 FB68     		ldr	r3, [r7, #12]
 6903 0038 3B63     		str	r3, [r7, #48]
 6904              	.LBB194:
 6905              	.LBB195:
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6906              		.loc 2 213 2
 6907              		.syntax unified
 6908              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 6909 003a EFF31182 			mrs r2, basepri											
 6910 003e 4FF05003 		mov r3, #80												
 6911 0042 83F31188 		msr basepri, r3											
 6912 0046 BFF36F8F 		isb														
 6913 004a BFF34F8F 		dsb														
 6914              	
 6915              	@ 0 "" 2
 6916              		.thumb
 6917              		.syntax unified
 6918 004e 3A62     		str	r2, [r7, #32]
 6919 0050 FB61     		str	r3, [r7, #28]
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 6920              		.loc 2 225 9
 6921 0052 3B6A     		ldr	r3, [r7, #32]
 6922              	.LBE195:
 6923              	.LBE194:
4925:./freertos/src/tasks.c **** 
4926:./freertos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6924              		.loc 1 4926 28
 6925 0054 FB62     		str	r3, [r7, #44]
4927:./freertos/src/tasks.c **** 		{
4928:./freertos/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6926              		.loc 1 4928 6
 6927 0056 3B68     		ldr	r3, [r7]
 6928 0058 002B     		cmp	r3, #0
 6929 005a 03D0     		beq	.L425
4929:./freertos/src/tasks.c **** 			{
4930:./freertos/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6930              		.loc 1 4930 42
 6931 005c 3B6B     		ldr	r3, [r7, #48]
 6932 005e 5A6D     		ldr	r2, [r3, #84]
 6933              		.loc 1 4930 35
 6934 0060 3B68     		ldr	r3, [r7]
 6935 0062 1A60     		str	r2, [r3]
 6936              	.L425:
4931:./freertos/src/tasks.c **** 			}
4932:./freertos/src/tasks.c **** 
4933:./freertos/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6937              		.loc 1 4933 26
 6938 0064 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 213


 6939 0066 93F85830 		ldrb	r3, [r3, #88]
 6940 006a 87F82B30 		strb	r3, [r7, #43]
4934:./freertos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6941              		.loc 1 4934 25
 6942 006e 3B6B     		ldr	r3, [r7, #48]
 6943 0070 0222     		movs	r2, #2
 6944 0072 83F85820 		strb	r2, [r3, #88]
4935:./freertos/src/tasks.c **** 
4936:./freertos/src/tasks.c **** 			switch( eAction )
 6945              		.loc 1 4936 4
 6946 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6947 0078 042B     		cmp	r3, #4
 6948 007a 29D8     		bhi	.L426
 6949 007c 01A2     		adr	r2, .L428
 6950 007e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6951 0082 00BF     		.p2align 2
 6952              	.L428:
 6953 0084 F3000000 		.word	.L445+1
 6954 0088 99000000 		.word	.L431+1
 6955 008c A7000000 		.word	.L430+1
 6956 0090 B3000000 		.word	.L429+1
 6957 0094 BB000000 		.word	.L427+1
 6958              		.p2align 1
 6959              	.L431:
4937:./freertos/src/tasks.c **** 			{
4938:./freertos/src/tasks.c **** 				case eSetBits	:
4939:./freertos/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6960              		.loc 1 4939 11
 6961 0098 3B6B     		ldr	r3, [r7, #48]
 6962 009a 5A6D     		ldr	r2, [r3, #84]
 6963              		.loc 1 4939 29
 6964 009c BB68     		ldr	r3, [r7, #8]
 6965 009e 1A43     		orrs	r2, r2, r3
 6966 00a0 3B6B     		ldr	r3, [r7, #48]
 6967 00a2 5A65     		str	r2, [r3, #84]
4940:./freertos/src/tasks.c **** 					break;
 6968              		.loc 1 4940 6
 6969 00a4 28E0     		b	.L433
 6970              	.L430:
4941:./freertos/src/tasks.c **** 
4942:./freertos/src/tasks.c **** 				case eIncrement	:
4943:./freertos/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6971              		.loc 1 4943 13
 6972 00a6 3B6B     		ldr	r3, [r7, #48]
 6973 00a8 5B6D     		ldr	r3, [r3, #84]
 6974              		.loc 1 4943 32
 6975 00aa 5A1C     		adds	r2, r3, #1
 6976 00ac 3B6B     		ldr	r3, [r7, #48]
 6977 00ae 5A65     		str	r2, [r3, #84]
4944:./freertos/src/tasks.c **** 					break;
 6978              		.loc 1 4944 6
 6979 00b0 22E0     		b	.L433
 6980              	.L429:
4945:./freertos/src/tasks.c **** 
4946:./freertos/src/tasks.c **** 				case eSetValueWithOverwrite	:
4947:./freertos/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6981              		.loc 1 4947 29
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 214


 6982 00b2 3B6B     		ldr	r3, [r7, #48]
 6983 00b4 BA68     		ldr	r2, [r7, #8]
 6984 00b6 5A65     		str	r2, [r3, #84]
4948:./freertos/src/tasks.c **** 					break;
 6985              		.loc 1 4948 6
 6986 00b8 1EE0     		b	.L433
 6987              	.L427:
4949:./freertos/src/tasks.c **** 
4950:./freertos/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:./freertos/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6988              		.loc 1 4951 8
 6989 00ba 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6990 00be 022B     		cmp	r3, #2
 6991 00c0 03D0     		beq	.L434
4952:./freertos/src/tasks.c **** 					{
4953:./freertos/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6992              		.loc 1 4953 30
 6993 00c2 3B6B     		ldr	r3, [r7, #48]
 6994 00c4 BA68     		ldr	r2, [r7, #8]
 6995 00c6 5A65     		str	r2, [r3, #84]
4954:./freertos/src/tasks.c **** 					}
4955:./freertos/src/tasks.c **** 					else
4956:./freertos/src/tasks.c **** 					{
4957:./freertos/src/tasks.c **** 						/* The value could not be written to the task. */
4958:./freertos/src/tasks.c **** 						xReturn = pdFAIL;
4959:./freertos/src/tasks.c **** 					}
4960:./freertos/src/tasks.c **** 					break;
 6996              		.loc 1 4960 6
 6997 00c8 16E0     		b	.L433
 6998              	.L434:
4958:./freertos/src/tasks.c **** 					}
 6999              		.loc 1 4958 15
 7000 00ca 0023     		movs	r3, #0
 7001 00cc 7B63     		str	r3, [r7, #52]
 7002              		.loc 1 4960 6
 7003 00ce 13E0     		b	.L433
 7004              	.L426:
4961:./freertos/src/tasks.c **** 
4962:./freertos/src/tasks.c **** 				case eNoAction :
4963:./freertos/src/tasks.c **** 					/* The task is being notified without its notify value being
4964:./freertos/src/tasks.c **** 					updated. */
4965:./freertos/src/tasks.c **** 					break;
4966:./freertos/src/tasks.c **** 
4967:./freertos/src/tasks.c **** 				default:
4968:./freertos/src/tasks.c **** 					/* Should not get here if all enums are handled.
4969:./freertos/src/tasks.c **** 					Artificially force an assert by testing a value the
4970:./freertos/src/tasks.c **** 					compiler can't assume is const. */
4971:./freertos/src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7005              		.loc 1 4971 6
 7006 00d0 3B6B     		ldr	r3, [r7, #48]
 7007 00d2 5B6D     		ldr	r3, [r3, #84]
 7008 00d4 B3F1FF3F 		cmp	r3, #-1
 7009 00d8 0DD0     		beq	.L446
 7010              	.LBB196:
 7011              	.LBB197:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7012              		.loc 2 197 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 215


 7013              		.syntax unified
 7014              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7015 00da 4FF05003 			mov r3, #80												
 7016 00de 83F31188 		msr basepri, r3											
 7017 00e2 BFF36F8F 		isb														
 7018 00e6 BFF34F8F 		dsb														
 7019              	
 7020              	@ 0 "" 2
 7021              		.thumb
 7022              		.syntax unified
 7023 00ea BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 7024              		.loc 2 205 1
 7025 00ec 00BF     		nop
 7026              	.L437:
 7027              	.LBE197:
 7028              	.LBE196:
 7029              		.loc 1 4971 6
 7030 00ee 00BF     		nop
 7031 00f0 FDE7     		b	.L437
 7032              	.L445:
4965:./freertos/src/tasks.c **** 
 7033              		.loc 1 4965 6
 7034 00f2 00BF     		nop
 7035 00f4 00E0     		b	.L433
 7036              	.L446:
4972:./freertos/src/tasks.c **** 					break;
 7037              		.loc 1 4972 6
 7038 00f6 00BF     		nop
 7039              	.L433:
4973:./freertos/src/tasks.c **** 			}
4974:./freertos/src/tasks.c **** 
4975:./freertos/src/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:./freertos/src/tasks.c **** 
4977:./freertos/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:./freertos/src/tasks.c **** 			notification then unblock it now. */
4979:./freertos/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7040              		.loc 1 4979 6
 7041 00f8 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7042 00fc 012B     		cmp	r3, #1
 7043 00fe 46D1     		bne	.L438
4980:./freertos/src/tasks.c **** 			{
4981:./freertos/src/tasks.c **** 				/* The task should not have been on an event list. */
4982:./freertos/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7044              		.loc 1 4982 5
 7045 0100 3B6B     		ldr	r3, [r7, #48]
 7046 0102 9B6A     		ldr	r3, [r3, #40]
 7047 0104 002B     		cmp	r3, #0
 7048 0106 0BD0     		beq	.L439
 7049              	.LBB198:
 7050              	.LBB199:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7051              		.loc 2 197 2
 7052              		.syntax unified
 7053              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7054 0108 4FF05003 			mov r3, #80												
 7055 010c 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 216


 7056 0110 BFF36F8F 		isb														
 7057 0114 BFF34F8F 		dsb														
 7058              	
 7059              	@ 0 "" 2
 7060              		.thumb
 7061              		.syntax unified
 7062 0118 7B61     		str	r3, [r7, #20]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 7063              		.loc 2 205 1
 7064 011a 00BF     		nop
 7065              	.L440:
 7066              	.LBE199:
 7067              	.LBE198:
 7068              		.loc 1 4982 5
 7069 011c 00BF     		nop
 7070 011e FDE7     		b	.L440
 7071              	.L439:
4983:./freertos/src/tasks.c **** 
4984:./freertos/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7072              		.loc 1 4984 30
 7073 0120 204B     		ldr	r3, .L447
 7074 0122 1B68     		ldr	r3, [r3]
 7075              		.loc 1 4984 7
 7076 0124 002B     		cmp	r3, #0
 7077 0126 1CD1     		bne	.L441
4985:./freertos/src/tasks.c **** 				{
4986:./freertos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7078              		.loc 1 4986 15
 7079 0128 3B6B     		ldr	r3, [r7, #48]
 7080 012a 0433     		adds	r3, r3, #4
 7081 012c 1846     		mov	r0, r3
 7082 012e FFF7FEFF 		bl	uxListRemove
4987:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7083              		.loc 1 4987 6
 7084 0132 3B6B     		ldr	r3, [r7, #48]
 7085 0134 DB6A     		ldr	r3, [r3, #44]
 7086 0136 0122     		movs	r2, #1
 7087 0138 9A40     		lsls	r2, r2, r3
 7088 013a 1B4B     		ldr	r3, .L447+4
 7089 013c 1B68     		ldr	r3, [r3]
 7090 013e 1343     		orrs	r3, r3, r2
 7091 0140 194A     		ldr	r2, .L447+4
 7092 0142 1360     		str	r3, [r2]
 7093 0144 3B6B     		ldr	r3, [r7, #48]
 7094 0146 DA6A     		ldr	r2, [r3, #44]
 7095 0148 1346     		mov	r3, r2
 7096 014a 9B00     		lsls	r3, r3, #2
 7097 014c 1344     		add	r3, r3, r2
 7098 014e 9B00     		lsls	r3, r3, #2
 7099 0150 164A     		ldr	r2, .L447+8
 7100 0152 1A44     		add	r2, r2, r3
 7101 0154 3B6B     		ldr	r3, [r7, #48]
 7102 0156 0433     		adds	r3, r3, #4
 7103 0158 1946     		mov	r1, r3
 7104 015a 1046     		mov	r0, r2
 7105 015c FFF7FEFF 		bl	vListInsertEnd
 7106 0160 05E0     		b	.L442
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 217


 7107              	.L441:
4988:./freertos/src/tasks.c **** 				}
4989:./freertos/src/tasks.c **** 				else
4990:./freertos/src/tasks.c **** 				{
4991:./freertos/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:./freertos/src/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:./freertos/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7108              		.loc 1 4993 6
 7109 0162 3B6B     		ldr	r3, [r7, #48]
 7110 0164 1833     		adds	r3, r3, #24
 7111 0166 1946     		mov	r1, r3
 7112 0168 1148     		ldr	r0, .L447+12
 7113 016a FFF7FEFF 		bl	vListInsertEnd
 7114              	.L442:
4994:./freertos/src/tasks.c **** 				}
4995:./freertos/src/tasks.c **** 
4996:./freertos/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7115              		.loc 1 4996 14
 7116 016e 3B6B     		ldr	r3, [r7, #48]
 7117 0170 DA6A     		ldr	r2, [r3, #44]
 7118              		.loc 1 4996 41
 7119 0172 104B     		ldr	r3, .L447+16
 7120 0174 1B68     		ldr	r3, [r3]
 7121 0176 DB6A     		ldr	r3, [r3, #44]
 7122              		.loc 1 4996 7
 7123 0178 9A42     		cmp	r2, r3
 7124 017a 08D9     		bls	.L438
4997:./freertos/src/tasks.c **** 				{
4998:./freertos/src/tasks.c **** 					/* The notified task has a priority above the currently
4999:./freertos/src/tasks.c **** 					executing task so a yield is required. */
5000:./freertos/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7125              		.loc 1 5000 8
 7126 017c 3B6C     		ldr	r3, [r7, #64]
 7127 017e 002B     		cmp	r3, #0
 7128 0180 02D0     		beq	.L443
5001:./freertos/src/tasks.c **** 					{
5002:./freertos/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7129              		.loc 1 5002 34
 7130 0182 3B6C     		ldr	r3, [r7, #64]
 7131 0184 0122     		movs	r2, #1
 7132 0186 1A60     		str	r2, [r3]
 7133              	.L443:
5003:./freertos/src/tasks.c **** 					}
5004:./freertos/src/tasks.c **** 
5005:./freertos/src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:./freertos/src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:./freertos/src/tasks.c **** 					safe FreeRTOS function. */
5008:./freertos/src/tasks.c **** 					xYieldPending = pdTRUE;
 7134              		.loc 1 5008 20
 7135 0188 0B4B     		ldr	r3, .L447+20
 7136 018a 0122     		movs	r2, #1
 7137 018c 1A60     		str	r2, [r3]
 7138              	.L438:
 7139 018e FB6A     		ldr	r3, [r7, #44]
 7140 0190 3B61     		str	r3, [r7, #16]
 7141              	.LBB200:
 7142              	.LBB201:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 218


 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7143              		.loc 2 231 2
 7144 0192 3B69     		ldr	r3, [r7, #16]
 7145              		.syntax unified
 7146              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7147 0194 83F31188 			msr basepri, r3	
 7148              	@ 0 "" 2
 7149              		.loc 2 235 1
 7150              		.thumb
 7151              		.syntax unified
 7152 0198 00BF     		nop
 7153              	.LBE201:
 7154              	.LBE200:
5009:./freertos/src/tasks.c **** 				}
5010:./freertos/src/tasks.c **** 				else
5011:./freertos/src/tasks.c **** 				{
5012:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:./freertos/src/tasks.c **** 				}
5014:./freertos/src/tasks.c **** 			}
5015:./freertos/src/tasks.c **** 		}
5016:./freertos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:./freertos/src/tasks.c **** 
5018:./freertos/src/tasks.c **** 		return xReturn;
 7155              		.loc 1 5018 10
 7156 019a 7B6B     		ldr	r3, [r7, #52]
5019:./freertos/src/tasks.c **** 	}
 7157              		.loc 1 5019 2
 7158 019c 1846     		mov	r0, r3
 7159 019e 3837     		adds	r7, r7, #56
 7160              	.LCFI279:
 7161              		.cfi_def_cfa_offset 8
 7162 01a0 BD46     		mov	sp, r7
 7163              	.LCFI280:
 7164              		.cfi_def_cfa_register 13
 7165              		@ sp needed
 7166 01a2 80BD     		pop	{r7, pc}
 7167              	.L448:
 7168              		.align	2
 7169              	.L447:
 7170 01a4 00000000 		.word	uxSchedulerSuspended
 7171 01a8 00000000 		.word	uxTopReadyPriority
 7172 01ac 00000000 		.word	pxReadyTasksLists
 7173 01b0 00000000 		.word	xPendingReadyList
 7174 01b4 00000000 		.word	pxCurrentTCB
 7175 01b8 00000000 		.word	xYieldPending
 7176              		.cfi_endproc
 7177              	.LFE115:
 7179              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7180              		.align	1
 7181              		.global	vTaskNotifyGiveFromISR
 7182              		.syntax unified
 7183              		.thumb
 7184              		.thumb_func
 7186              	vTaskNotifyGiveFromISR:
 7187              	.LFB116:
5020:./freertos/src/tasks.c **** 
5021:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 219


5022:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
5023:./freertos/src/tasks.c **** 
5024:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:./freertos/src/tasks.c **** 
5026:./freertos/src/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:./freertos/src/tasks.c **** 	{
 7188              		.loc 1 5027 2
 7189              		.cfi_startproc
 7190              		@ args = 0, pretend = 0, frame = 40
 7191              		@ frame_needed = 1, uses_anonymous_args = 0
 7192 0000 80B5     		push	{r7, lr}
 7193              	.LCFI281:
 7194              		.cfi_def_cfa_offset 8
 7195              		.cfi_offset 7, -8
 7196              		.cfi_offset 14, -4
 7197 0002 8AB0     		sub	sp, sp, #40
 7198              	.LCFI282:
 7199              		.cfi_def_cfa_offset 48
 7200 0004 00AF     		add	r7, sp, #0
 7201              	.LCFI283:
 7202              		.cfi_def_cfa_register 7
 7203 0006 7860     		str	r0, [r7, #4]
 7204 0008 3960     		str	r1, [r7]
5028:./freertos/src/tasks.c **** 	TCB_t * pxTCB;
5029:./freertos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:./freertos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:./freertos/src/tasks.c **** 
5032:./freertos/src/tasks.c **** 		configASSERT( xTaskToNotify );
 7205              		.loc 1 5032 3
 7206 000a 7B68     		ldr	r3, [r7, #4]
 7207 000c 002B     		cmp	r3, #0
 7208 000e 0BD1     		bne	.L450
 7209              	.LBB202:
 7210              	.LBB203:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7211              		.loc 2 197 2
 7212              		.syntax unified
 7213              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7214 0010 4FF05003 			mov r3, #80												
 7215 0014 83F31188 		msr basepri, r3											
 7216 0018 BFF36F8F 		isb														
 7217 001c BFF34F8F 		dsb														
 7218              	
 7219              	@ 0 "" 2
 7220              		.thumb
 7221              		.syntax unified
 7222 0020 BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 7223              		.loc 2 205 1
 7224 0022 00BF     		nop
 7225              	.L451:
 7226              	.LBE203:
 7227              	.LBE202:
 7228              		.loc 1 5032 3
 7229 0024 00BF     		nop
 7230 0026 FDE7     		b	.L451
 7231              	.L450:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 220


5033:./freertos/src/tasks.c **** 
5034:./freertos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:./freertos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:./freertos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:./freertos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:./freertos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:./freertos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:./freertos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:./freertos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:./freertos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:./freertos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:./freertos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:./freertos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:./freertos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:./freertos/src/tasks.c **** 		provided on the following link:
5049:./freertos/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:./freertos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7232              		.loc 1 5050 3
 7233 0028 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:./freertos/src/tasks.c **** 
5052:./freertos/src/tasks.c **** 		pxTCB = xTaskToNotify;
 7234              		.loc 1 5052 9
 7235 002c 7B68     		ldr	r3, [r7, #4]
 7236 002e 7B62     		str	r3, [r7, #36]
 7237              	.LBB204:
 7238              	.LBB205:
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7239              		.loc 2 213 2
 7240              		.syntax unified
 7241              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7242 0030 EFF31182 			mrs r2, basepri											
 7243 0034 4FF05003 		mov r3, #80												
 7244 0038 83F31188 		msr basepri, r3											
 7245 003c BFF36F8F 		isb														
 7246 0040 BFF34F8F 		dsb														
 7247              	
 7248              	@ 0 "" 2
 7249              		.thumb
 7250              		.syntax unified
 7251 0044 7A61     		str	r2, [r7, #20]
 7252 0046 3B61     		str	r3, [r7, #16]
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 7253              		.loc 2 225 9
 7254 0048 7B69     		ldr	r3, [r7, #20]
 7255              	.LBE205:
 7256              	.LBE204:
5053:./freertos/src/tasks.c **** 
5054:./freertos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7257              		.loc 1 5054 28
 7258 004a 3B62     		str	r3, [r7, #32]
5055:./freertos/src/tasks.c **** 		{
5056:./freertos/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7259              		.loc 1 5056 26
 7260 004c 7B6A     		ldr	r3, [r7, #36]
 7261 004e 93F85830 		ldrb	r3, [r3, #88]
 7262 0052 FB77     		strb	r3, [r7, #31]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 221


5057:./freertos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7263              		.loc 1 5057 25
 7264 0054 7B6A     		ldr	r3, [r7, #36]
 7265 0056 0222     		movs	r2, #2
 7266 0058 83F85820 		strb	r2, [r3, #88]
5058:./freertos/src/tasks.c **** 
5059:./freertos/src/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:./freertos/src/tasks.c **** 			semaphore. */
5061:./freertos/src/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7267              		.loc 1 5061 11
 7268 005c 7B6A     		ldr	r3, [r7, #36]
 7269 005e 5B6D     		ldr	r3, [r3, #84]
 7270              		.loc 1 5061 30
 7271 0060 5A1C     		adds	r2, r3, #1
 7272 0062 7B6A     		ldr	r3, [r7, #36]
 7273 0064 5A65     		str	r2, [r3, #84]
5062:./freertos/src/tasks.c **** 
5063:./freertos/src/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:./freertos/src/tasks.c **** 
5065:./freertos/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:./freertos/src/tasks.c **** 			notification then unblock it now. */
5067:./freertos/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7274              		.loc 1 5067 6
 7275 0066 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7276 0068 012B     		cmp	r3, #1
 7277 006a 46D1     		bne	.L453
5068:./freertos/src/tasks.c **** 			{
5069:./freertos/src/tasks.c **** 				/* The task should not have been on an event list. */
5070:./freertos/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7278              		.loc 1 5070 5
 7279 006c 7B6A     		ldr	r3, [r7, #36]
 7280 006e 9B6A     		ldr	r3, [r3, #40]
 7281 0070 002B     		cmp	r3, #0
 7282 0072 0BD0     		beq	.L454
 7283              	.LBB206:
 7284              	.LBB207:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7285              		.loc 2 197 2
 7286              		.syntax unified
 7287              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7288 0074 4FF05003 			mov r3, #80												
 7289 0078 83F31188 		msr basepri, r3											
 7290 007c BFF36F8F 		isb														
 7291 0080 BFF34F8F 		dsb														
 7292              	
 7293              	@ 0 "" 2
 7294              		.thumb
 7295              		.syntax unified
 7296 0084 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 7297              		.loc 2 205 1
 7298 0086 00BF     		nop
 7299              	.L455:
 7300              	.LBE207:
 7301              	.LBE206:
 7302              		.loc 1 5070 5
 7303 0088 00BF     		nop
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 222


 7304 008a FDE7     		b	.L455
 7305              	.L454:
5071:./freertos/src/tasks.c **** 
5072:./freertos/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7306              		.loc 1 5072 30
 7307 008c 204B     		ldr	r3, .L459
 7308 008e 1B68     		ldr	r3, [r3]
 7309              		.loc 1 5072 7
 7310 0090 002B     		cmp	r3, #0
 7311 0092 1CD1     		bne	.L456
5073:./freertos/src/tasks.c **** 				{
5074:./freertos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7312              		.loc 1 5074 15
 7313 0094 7B6A     		ldr	r3, [r7, #36]
 7314 0096 0433     		adds	r3, r3, #4
 7315 0098 1846     		mov	r0, r3
 7316 009a FFF7FEFF 		bl	uxListRemove
5075:./freertos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7317              		.loc 1 5075 6
 7318 009e 7B6A     		ldr	r3, [r7, #36]
 7319 00a0 DB6A     		ldr	r3, [r3, #44]
 7320 00a2 0122     		movs	r2, #1
 7321 00a4 9A40     		lsls	r2, r2, r3
 7322 00a6 1B4B     		ldr	r3, .L459+4
 7323 00a8 1B68     		ldr	r3, [r3]
 7324 00aa 1343     		orrs	r3, r3, r2
 7325 00ac 194A     		ldr	r2, .L459+4
 7326 00ae 1360     		str	r3, [r2]
 7327 00b0 7B6A     		ldr	r3, [r7, #36]
 7328 00b2 DA6A     		ldr	r2, [r3, #44]
 7329 00b4 1346     		mov	r3, r2
 7330 00b6 9B00     		lsls	r3, r3, #2
 7331 00b8 1344     		add	r3, r3, r2
 7332 00ba 9B00     		lsls	r3, r3, #2
 7333 00bc 164A     		ldr	r2, .L459+8
 7334 00be 1A44     		add	r2, r2, r3
 7335 00c0 7B6A     		ldr	r3, [r7, #36]
 7336 00c2 0433     		adds	r3, r3, #4
 7337 00c4 1946     		mov	r1, r3
 7338 00c6 1046     		mov	r0, r2
 7339 00c8 FFF7FEFF 		bl	vListInsertEnd
 7340 00cc 05E0     		b	.L457
 7341              	.L456:
5076:./freertos/src/tasks.c **** 				}
5077:./freertos/src/tasks.c **** 				else
5078:./freertos/src/tasks.c **** 				{
5079:./freertos/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:./freertos/src/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:./freertos/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7342              		.loc 1 5081 6
 7343 00ce 7B6A     		ldr	r3, [r7, #36]
 7344 00d0 1833     		adds	r3, r3, #24
 7345 00d2 1946     		mov	r1, r3
 7346 00d4 1148     		ldr	r0, .L459+12
 7347 00d6 FFF7FEFF 		bl	vListInsertEnd
 7348              	.L457:
5082:./freertos/src/tasks.c **** 				}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 223


5083:./freertos/src/tasks.c **** 
5084:./freertos/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7349              		.loc 1 5084 14
 7350 00da 7B6A     		ldr	r3, [r7, #36]
 7351 00dc DA6A     		ldr	r2, [r3, #44]
 7352              		.loc 1 5084 41
 7353 00de 104B     		ldr	r3, .L459+16
 7354 00e0 1B68     		ldr	r3, [r3]
 7355 00e2 DB6A     		ldr	r3, [r3, #44]
 7356              		.loc 1 5084 7
 7357 00e4 9A42     		cmp	r2, r3
 7358 00e6 08D9     		bls	.L453
5085:./freertos/src/tasks.c **** 				{
5086:./freertos/src/tasks.c **** 					/* The notified task has a priority above the currently
5087:./freertos/src/tasks.c **** 					executing task so a yield is required. */
5088:./freertos/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7359              		.loc 1 5088 8
 7360 00e8 3B68     		ldr	r3, [r7]
 7361 00ea 002B     		cmp	r3, #0
 7362 00ec 02D0     		beq	.L458
5089:./freertos/src/tasks.c **** 					{
5090:./freertos/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7363              		.loc 1 5090 34
 7364 00ee 3B68     		ldr	r3, [r7]
 7365 00f0 0122     		movs	r2, #1
 7366 00f2 1A60     		str	r2, [r3]
 7367              	.L458:
5091:./freertos/src/tasks.c **** 					}
5092:./freertos/src/tasks.c **** 
5093:./freertos/src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:./freertos/src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:./freertos/src/tasks.c **** 					safe FreeRTOS function. */
5096:./freertos/src/tasks.c **** 					xYieldPending = pdTRUE;
 7368              		.loc 1 5096 20
 7369 00f4 0B4B     		ldr	r3, .L459+20
 7370 00f6 0122     		movs	r2, #1
 7371 00f8 1A60     		str	r2, [r3]
 7372              	.L453:
 7373 00fa 3B6A     		ldr	r3, [r7, #32]
 7374 00fc BB60     		str	r3, [r7, #8]
 7375              	.LBB208:
 7376              	.LBB209:
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7377              		.loc 2 231 2
 7378 00fe BB68     		ldr	r3, [r7, #8]
 7379              		.syntax unified
 7380              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 7381 0100 83F31188 			msr basepri, r3	
 7382              	@ 0 "" 2
 7383              		.loc 2 235 1
 7384              		.thumb
 7385              		.syntax unified
 7386 0104 00BF     		nop
 7387              	.LBE209:
 7388              	.LBE208:
5097:./freertos/src/tasks.c **** 				}
5098:./freertos/src/tasks.c **** 				else
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 224


5099:./freertos/src/tasks.c **** 				{
5100:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:./freertos/src/tasks.c **** 				}
5102:./freertos/src/tasks.c **** 			}
5103:./freertos/src/tasks.c **** 		}
5104:./freertos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:./freertos/src/tasks.c **** 	}
 7389              		.loc 1 5105 2
 7390 0106 00BF     		nop
 7391 0108 2837     		adds	r7, r7, #40
 7392              	.LCFI284:
 7393              		.cfi_def_cfa_offset 8
 7394 010a BD46     		mov	sp, r7
 7395              	.LCFI285:
 7396              		.cfi_def_cfa_register 13
 7397              		@ sp needed
 7398 010c 80BD     		pop	{r7, pc}
 7399              	.L460:
 7400 010e 00BF     		.align	2
 7401              	.L459:
 7402 0110 00000000 		.word	uxSchedulerSuspended
 7403 0114 00000000 		.word	uxTopReadyPriority
 7404 0118 00000000 		.word	pxReadyTasksLists
 7405 011c 00000000 		.word	xPendingReadyList
 7406 0120 00000000 		.word	pxCurrentTCB
 7407 0124 00000000 		.word	xYieldPending
 7408              		.cfi_endproc
 7409              	.LFE116:
 7411              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7412              		.align	1
 7413              		.global	xTaskNotifyStateClear
 7414              		.syntax unified
 7415              		.thumb
 7416              		.thumb_func
 7418              	xTaskNotifyStateClear:
 7419              	.LFB117:
5106:./freertos/src/tasks.c **** 
5107:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
5109:./freertos/src/tasks.c **** 
5110:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:./freertos/src/tasks.c **** 
5112:./freertos/src/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:./freertos/src/tasks.c **** 	{
 7420              		.loc 1 5113 2
 7421              		.cfi_startproc
 7422              		@ args = 0, pretend = 0, frame = 16
 7423              		@ frame_needed = 1, uses_anonymous_args = 0
 7424 0000 80B5     		push	{r7, lr}
 7425              	.LCFI286:
 7426              		.cfi_def_cfa_offset 8
 7427              		.cfi_offset 7, -8
 7428              		.cfi_offset 14, -4
 7429 0002 84B0     		sub	sp, sp, #16
 7430              	.LCFI287:
 7431              		.cfi_def_cfa_offset 24
 7432 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 225


 7433              	.LCFI288:
 7434              		.cfi_def_cfa_register 7
 7435 0006 7860     		str	r0, [r7, #4]
5114:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
5115:./freertos/src/tasks.c **** 	BaseType_t xReturn;
5116:./freertos/src/tasks.c **** 
5117:./freertos/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:./freertos/src/tasks.c **** 		its notification state cleared. */
5119:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7436              		.loc 1 5119 11
 7437 0008 7B68     		ldr	r3, [r7, #4]
 7438 000a 002B     		cmp	r3, #0
 7439 000c 02D1     		bne	.L462
 7440              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7441 000e 0E4B     		ldr	r3, .L467
 7442 0010 1B68     		ldr	r3, [r3]
 7443 0012 00E0     		b	.L463
 7444              	.L462:
 7445              		.loc 1 5119 11 discriminator 2
 7446 0014 7B68     		ldr	r3, [r7, #4]
 7447              	.L463:
 7448              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7449 0016 BB60     		str	r3, [r7, #8]
5120:./freertos/src/tasks.c **** 
5121:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 7450              		.loc 1 5121 3
 7451 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:./freertos/src/tasks.c **** 		{
5123:./freertos/src/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7452              		.loc 1 5123 13
 7453 001c BB68     		ldr	r3, [r7, #8]
 7454 001e 93F85830 		ldrb	r3, [r3, #88]
 7455 0022 DBB2     		uxtb	r3, r3
 7456              		.loc 1 5123 6
 7457 0024 022B     		cmp	r3, #2
 7458 0026 06D1     		bne	.L464
5124:./freertos/src/tasks.c **** 			{
5125:./freertos/src/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7459              		.loc 1 5125 26
 7460 0028 BB68     		ldr	r3, [r7, #8]
 7461 002a 0022     		movs	r2, #0
 7462 002c 83F85820 		strb	r2, [r3, #88]
5126:./freertos/src/tasks.c **** 				xReturn = pdPASS;
 7463              		.loc 1 5126 13
 7464 0030 0123     		movs	r3, #1
 7465 0032 FB60     		str	r3, [r7, #12]
 7466 0034 01E0     		b	.L465
 7467              	.L464:
5127:./freertos/src/tasks.c **** 			}
5128:./freertos/src/tasks.c **** 			else
5129:./freertos/src/tasks.c **** 			{
5130:./freertos/src/tasks.c **** 				xReturn = pdFAIL;
 7468              		.loc 1 5130 13
 7469 0036 0023     		movs	r3, #0
 7470 0038 FB60     		str	r3, [r7, #12]
 7471              	.L465:
5131:./freertos/src/tasks.c **** 			}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 226


5132:./freertos/src/tasks.c **** 		}
5133:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 7472              		.loc 1 5133 3
 7473 003a FFF7FEFF 		bl	vPortExitCritical
5134:./freertos/src/tasks.c **** 
5135:./freertos/src/tasks.c **** 		return xReturn;
 7474              		.loc 1 5135 10
 7475 003e FB68     		ldr	r3, [r7, #12]
5136:./freertos/src/tasks.c **** 	}
 7476              		.loc 1 5136 2
 7477 0040 1846     		mov	r0, r3
 7478 0042 1037     		adds	r7, r7, #16
 7479              	.LCFI289:
 7480              		.cfi_def_cfa_offset 8
 7481 0044 BD46     		mov	sp, r7
 7482              	.LCFI290:
 7483              		.cfi_def_cfa_register 13
 7484              		@ sp needed
 7485 0046 80BD     		pop	{r7, pc}
 7486              	.L468:
 7487              		.align	2
 7488              	.L467:
 7489 0048 00000000 		.word	pxCurrentTCB
 7490              		.cfi_endproc
 7491              	.LFE117:
 7493              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7494              		.align	1
 7495              		.global	ulTaskNotifyValueClear
 7496              		.syntax unified
 7497              		.thumb
 7498              		.thumb_func
 7500              	ulTaskNotifyValueClear:
 7501              	.LFB118:
5137:./freertos/src/tasks.c **** 
5138:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
5140:./freertos/src/tasks.c **** 
5141:./freertos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:./freertos/src/tasks.c **** 
5143:./freertos/src/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:./freertos/src/tasks.c **** 	{
 7502              		.loc 1 5144 2
 7503              		.cfi_startproc
 7504              		@ args = 0, pretend = 0, frame = 16
 7505              		@ frame_needed = 1, uses_anonymous_args = 0
 7506 0000 80B5     		push	{r7, lr}
 7507              	.LCFI291:
 7508              		.cfi_def_cfa_offset 8
 7509              		.cfi_offset 7, -8
 7510              		.cfi_offset 14, -4
 7511 0002 84B0     		sub	sp, sp, #16
 7512              	.LCFI292:
 7513              		.cfi_def_cfa_offset 24
 7514 0004 00AF     		add	r7, sp, #0
 7515              	.LCFI293:
 7516              		.cfi_def_cfa_register 7
 7517 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 227


 7518 0008 3960     		str	r1, [r7]
5145:./freertos/src/tasks.c **** 	TCB_t *pxTCB;
5146:./freertos/src/tasks.c **** 	uint32_t ulReturn;
5147:./freertos/src/tasks.c **** 
5148:./freertos/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:./freertos/src/tasks.c **** 		its notification state cleared. */
5150:./freertos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7519              		.loc 1 5150 11
 7520 000a 7B68     		ldr	r3, [r7, #4]
 7521 000c 002B     		cmp	r3, #0
 7522 000e 02D1     		bne	.L470
 7523              		.loc 1 5150 11 is_stmt 0 discriminator 1
 7524 0010 0C4B     		ldr	r3, .L473
 7525 0012 1B68     		ldr	r3, [r3]
 7526 0014 00E0     		b	.L471
 7527              	.L470:
 7528              		.loc 1 5150 11 discriminator 2
 7529 0016 7B68     		ldr	r3, [r7, #4]
 7530              	.L471:
 7531              		.loc 1 5150 9 is_stmt 1 discriminator 4
 7532 0018 FB60     		str	r3, [r7, #12]
5151:./freertos/src/tasks.c **** 
5152:./freertos/src/tasks.c **** 		taskENTER_CRITICAL();
 7533              		.loc 1 5152 3
 7534 001a FFF7FEFF 		bl	vPortEnterCritical
5153:./freertos/src/tasks.c **** 		{
5154:./freertos/src/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:./freertos/src/tasks.c **** 			then clear the bit mask. */
5156:./freertos/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7535              		.loc 1 5156 27
 7536 001e 094B     		ldr	r3, .L473
 7537 0020 1B68     		ldr	r3, [r3]
 7538              		.loc 1 5156 13
 7539 0022 5B6D     		ldr	r3, [r3, #84]
 7540 0024 BB60     		str	r3, [r7, #8]
5157:./freertos/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 7541              		.loc 1 5157 9
 7542 0026 FB68     		ldr	r3, [r7, #12]
 7543 0028 5A6D     		ldr	r2, [r3, #84]
 7544              		.loc 1 5157 30
 7545 002a 3B68     		ldr	r3, [r7]
 7546 002c DB43     		mvns	r3, r3
 7547              		.loc 1 5157 27
 7548 002e 1A40     		ands	r2, r2, r3
 7549 0030 FB68     		ldr	r3, [r7, #12]
 7550 0032 5A65     		str	r2, [r3, #84]
5158:./freertos/src/tasks.c **** 		}
5159:./freertos/src/tasks.c **** 		taskEXIT_CRITICAL();
 7551              		.loc 1 5159 3
 7552 0034 FFF7FEFF 		bl	vPortExitCritical
5160:./freertos/src/tasks.c **** 
5161:./freertos/src/tasks.c **** 		return ulReturn;
 7553              		.loc 1 5161 10
 7554 0038 BB68     		ldr	r3, [r7, #8]
5162:./freertos/src/tasks.c **** 	}
 7555              		.loc 1 5162 2
 7556 003a 1846     		mov	r0, r3
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 228


 7557 003c 1037     		adds	r7, r7, #16
 7558              	.LCFI294:
 7559              		.cfi_def_cfa_offset 8
 7560 003e BD46     		mov	sp, r7
 7561              	.LCFI295:
 7562              		.cfi_def_cfa_register 13
 7563              		@ sp needed
 7564 0040 80BD     		pop	{r7, pc}
 7565              	.L474:
 7566 0042 00BF     		.align	2
 7567              	.L473:
 7568 0044 00000000 		.word	pxCurrentTCB
 7569              		.cfi_endproc
 7570              	.LFE118:
 7572              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7573              		.align	1
 7574              		.syntax unified
 7575              		.thumb
 7576              		.thumb_func
 7578              	prvAddCurrentTaskToDelayedList:
 7579              	.LFB119:
5163:./freertos/src/tasks.c **** 
5164:./freertos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
5166:./freertos/src/tasks.c **** 
5167:./freertos/src/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:./freertos/src/tasks.c **** 
5169:./freertos/src/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:./freertos/src/tasks.c **** 	{
5171:./freertos/src/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:./freertos/src/tasks.c **** 	}
5173:./freertos/src/tasks.c **** 
5174:./freertos/src/tasks.c **** #endif
5175:./freertos/src/tasks.c **** /*-----------------------------------------------------------*/
5176:./freertos/src/tasks.c **** 
5177:./freertos/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:./freertos/src/tasks.c **** {
 7580              		.loc 1 5178 1
 7581              		.cfi_startproc
 7582              		@ args = 0, pretend = 0, frame = 16
 7583              		@ frame_needed = 1, uses_anonymous_args = 0
 7584 0000 80B5     		push	{r7, lr}
 7585              	.LCFI296:
 7586              		.cfi_def_cfa_offset 8
 7587              		.cfi_offset 7, -8
 7588              		.cfi_offset 14, -4
 7589 0002 84B0     		sub	sp, sp, #16
 7590              	.LCFI297:
 7591              		.cfi_def_cfa_offset 24
 7592 0004 00AF     		add	r7, sp, #0
 7593              	.LCFI298:
 7594              		.cfi_def_cfa_register 7
 7595 0006 7860     		str	r0, [r7, #4]
 7596 0008 3960     		str	r1, [r7]
5179:./freertos/src/tasks.c **** TickType_t xTimeToWake;
5180:./freertos/src/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 7597              		.loc 1 5180 18
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 229


 7598 000a 294B     		ldr	r3, .L481
 7599 000c 1B68     		ldr	r3, [r3]
 7600 000e FB60     		str	r3, [r7, #12]
5181:./freertos/src/tasks.c **** 
5182:./freertos/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:./freertos/src/tasks.c **** 	{
5184:./freertos/src/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:./freertos/src/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:./freertos/src/tasks.c **** 		when the task leaves the Blocked state. */
5187:./freertos/src/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:./freertos/src/tasks.c **** 	}
5189:./freertos/src/tasks.c **** 	#endif
5190:./freertos/src/tasks.c **** 
5191:./freertos/src/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:./freertos/src/tasks.c **** 	as the same list item is used for both lists. */
5193:./freertos/src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7601              		.loc 1 5193 35
 7602 0010 284B     		ldr	r3, .L481+4
 7603 0012 1B68     		ldr	r3, [r3]
 7604              		.loc 1 5193 6
 7605 0014 0433     		adds	r3, r3, #4
 7606 0016 1846     		mov	r0, r3
 7607 0018 FFF7FEFF 		bl	uxListRemove
 7608 001c 0346     		mov	r3, r0
 7609              		.loc 1 5193 4 discriminator 1
 7610 001e 002B     		cmp	r3, #0
 7611 0020 0BD1     		bne	.L476
5194:./freertos/src/tasks.c **** 	{
5195:./freertos/src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:./freertos/src/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:./freertos/src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 7612              		.loc 1 5197 3
 7613 0022 244B     		ldr	r3, .L481+4
 7614 0024 1B68     		ldr	r3, [r3]
 7615 0026 DB6A     		ldr	r3, [r3, #44]
 7616 0028 0122     		movs	r2, #1
 7617 002a 02FA03F3 		lsl	r3, r2, r3
 7618 002e DA43     		mvns	r2, r3
 7619 0030 214B     		ldr	r3, .L481+8
 7620 0032 1B68     		ldr	r3, [r3]
 7621 0034 1340     		ands	r3, r3, r2
 7622 0036 204A     		ldr	r2, .L481+8
 7623 0038 1360     		str	r3, [r2]
 7624              	.L476:
5198:./freertos/src/tasks.c **** 	}
5199:./freertos/src/tasks.c **** 	else
5200:./freertos/src/tasks.c **** 	{
5201:./freertos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:./freertos/src/tasks.c **** 	}
5203:./freertos/src/tasks.c **** 
5204:./freertos/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:./freertos/src/tasks.c **** 	{
5206:./freertos/src/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7625              		.loc 1 5206 5
 7626 003a 7B68     		ldr	r3, [r7, #4]
 7627 003c B3F1FF3F 		cmp	r3, #-1
 7628 0040 0AD1     		bne	.L477
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 230


 7629              		.loc 1 5206 41 discriminator 1
 7630 0042 3B68     		ldr	r3, [r7]
 7631 0044 002B     		cmp	r3, #0
 7632 0046 07D0     		beq	.L477
5207:./freertos/src/tasks.c **** 		{
5208:./freertos/src/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:./freertos/src/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:./freertos/src/tasks.c **** 			indefinitely. */
5211:./freertos/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7633              		.loc 1 5211 56
 7634 0048 1A4B     		ldr	r3, .L481+4
 7635 004a 1B68     		ldr	r3, [r3]
 7636              		.loc 1 5211 4
 7637 004c 0433     		adds	r3, r3, #4
 7638 004e 1946     		mov	r1, r3
 7639 0050 1A48     		ldr	r0, .L481+12
 7640 0052 FFF7FEFF 		bl	vListInsertEnd
5212:./freertos/src/tasks.c **** 		}
5213:./freertos/src/tasks.c **** 		else
5214:./freertos/src/tasks.c **** 		{
5215:./freertos/src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:./freertos/src/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:./freertos/src/tasks.c **** 			kernel will manage it correctly. */
5218:./freertos/src/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:./freertos/src/tasks.c **** 
5220:./freertos/src/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:./freertos/src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:./freertos/src/tasks.c **** 
5223:./freertos/src/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:./freertos/src/tasks.c **** 			{
5225:./freertos/src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:./freertos/src/tasks.c **** 				list. */
5227:./freertos/src/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:./freertos/src/tasks.c **** 			}
5229:./freertos/src/tasks.c **** 			else
5230:./freertos/src/tasks.c **** 			{
5231:./freertos/src/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:./freertos/src/tasks.c **** 				is used. */
5233:./freertos/src/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:./freertos/src/tasks.c **** 
5235:./freertos/src/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:./freertos/src/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:./freertos/src/tasks.c **** 				needs to be updated too. */
5238:./freertos/src/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:./freertos/src/tasks.c **** 				{
5240:./freertos/src/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:./freertos/src/tasks.c **** 				}
5242:./freertos/src/tasks.c **** 				else
5243:./freertos/src/tasks.c **** 				{
5244:./freertos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:./freertos/src/tasks.c **** 				}
5246:./freertos/src/tasks.c **** 			}
5247:./freertos/src/tasks.c **** 		}
5248:./freertos/src/tasks.c **** 	}
5249:./freertos/src/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:./freertos/src/tasks.c **** 	{
5251:./freertos/src/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 231


5252:./freertos/src/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:./freertos/src/tasks.c **** 		will manage it correctly. */
5254:./freertos/src/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:./freertos/src/tasks.c **** 
5256:./freertos/src/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:./freertos/src/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:./freertos/src/tasks.c **** 
5259:./freertos/src/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:./freertos/src/tasks.c **** 		{
5261:./freertos/src/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:./freertos/src/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:./freertos/src/tasks.c **** 		}
5264:./freertos/src/tasks.c **** 		else
5265:./freertos/src/tasks.c **** 		{
5266:./freertos/src/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:./freertos/src/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:./freertos/src/tasks.c **** 
5269:./freertos/src/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:./freertos/src/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:./freertos/src/tasks.c **** 			too. */
5272:./freertos/src/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:./freertos/src/tasks.c **** 			{
5274:./freertos/src/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:./freertos/src/tasks.c **** 			}
5276:./freertos/src/tasks.c **** 			else
5277:./freertos/src/tasks.c **** 			{
5278:./freertos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:./freertos/src/tasks.c **** 			}
5280:./freertos/src/tasks.c **** 		}
5281:./freertos/src/tasks.c **** 
5282:./freertos/src/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:./freertos/src/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:./freertos/src/tasks.c **** 	}
5285:./freertos/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:./freertos/src/tasks.c **** }
 7641              		.loc 1 5286 1
 7642 0056 26E0     		b	.L480
 7643              	.L477:
5218:./freertos/src/tasks.c **** 
 7644              		.loc 1 5218 16
 7645 0058 FA68     		ldr	r2, [r7, #12]
 7646 005a 7B68     		ldr	r3, [r7, #4]
 7647 005c 1344     		add	r3, r3, r2
 7648 005e BB60     		str	r3, [r7, #8]
5221:./freertos/src/tasks.c **** 
 7649              		.loc 1 5221 4
 7650 0060 144B     		ldr	r3, .L481+4
 7651 0062 1B68     		ldr	r3, [r3]
 7652 0064 BA68     		ldr	r2, [r7, #8]
 7653 0066 5A60     		str	r2, [r3, #4]
5223:./freertos/src/tasks.c **** 			{
 7654              		.loc 1 5223 6
 7655 0068 BA68     		ldr	r2, [r7, #8]
 7656 006a FB68     		ldr	r3, [r7, #12]
 7657 006c 9A42     		cmp	r2, r3
 7658 006e 09D2     		bcs	.L479
5227:./freertos/src/tasks.c **** 			}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 232


 7659              		.loc 1 5227 5
 7660 0070 134B     		ldr	r3, .L481+16
 7661 0072 1A68     		ldr	r2, [r3]
5227:./freertos/src/tasks.c **** 			}
 7662              		.loc 1 5227 60
 7663 0074 0F4B     		ldr	r3, .L481+4
 7664 0076 1B68     		ldr	r3, [r3]
5227:./freertos/src/tasks.c **** 			}
 7665              		.loc 1 5227 5
 7666 0078 0433     		adds	r3, r3, #4
 7667 007a 1946     		mov	r1, r3
 7668 007c 1046     		mov	r0, r2
 7669 007e FFF7FEFF 		bl	vListInsert
 7670              		.loc 1 5286 1
 7671 0082 10E0     		b	.L480
 7672              	.L479:
5233:./freertos/src/tasks.c **** 
 7673              		.loc 1 5233 5
 7674 0084 0F4B     		ldr	r3, .L481+20
 7675 0086 1A68     		ldr	r2, [r3]
5233:./freertos/src/tasks.c **** 
 7676              		.loc 1 5233 52
 7677 0088 0A4B     		ldr	r3, .L481+4
 7678 008a 1B68     		ldr	r3, [r3]
5233:./freertos/src/tasks.c **** 
 7679              		.loc 1 5233 5
 7680 008c 0433     		adds	r3, r3, #4
 7681 008e 1946     		mov	r1, r3
 7682 0090 1046     		mov	r0, r2
 7683 0092 FFF7FEFF 		bl	vListInsert
5238:./freertos/src/tasks.c **** 				{
 7684              		.loc 1 5238 21
 7685 0096 0C4B     		ldr	r3, .L481+24
 7686 0098 1B68     		ldr	r3, [r3]
5238:./freertos/src/tasks.c **** 				{
 7687              		.loc 1 5238 7
 7688 009a BA68     		ldr	r2, [r7, #8]
 7689 009c 9A42     		cmp	r2, r3
 7690 009e 02D2     		bcs	.L480
5240:./freertos/src/tasks.c **** 				}
 7691              		.loc 1 5240 27
 7692 00a0 094A     		ldr	r2, .L481+24
 7693 00a2 BB68     		ldr	r3, [r7, #8]
 7694 00a4 1360     		str	r3, [r2]
 7695              	.L480:
 7696              		.loc 1 5286 1
 7697 00a6 00BF     		nop
 7698 00a8 1037     		adds	r7, r7, #16
 7699              	.LCFI299:
 7700              		.cfi_def_cfa_offset 8
 7701 00aa BD46     		mov	sp, r7
 7702              	.LCFI300:
 7703              		.cfi_def_cfa_register 13
 7704              		@ sp needed
 7705 00ac 80BD     		pop	{r7, pc}
 7706              	.L482:
 7707 00ae 00BF     		.align	2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 233


 7708              	.L481:
 7709 00b0 00000000 		.word	xTickCount
 7710 00b4 00000000 		.word	pxCurrentTCB
 7711 00b8 00000000 		.word	uxTopReadyPriority
 7712 00bc 00000000 		.word	xSuspendedTaskList
 7713 00c0 00000000 		.word	pxOverflowDelayedTaskList
 7714 00c4 00000000 		.word	pxDelayedTaskList
 7715 00c8 00000000 		.word	xNextTaskUnblockTime
 7716              		.cfi_endproc
 7717              	.LFE119:
 7719              		.text
 7720              	.Letext0:
 7721              		.file 3 "C:/arm-toolchain/14.3/lib/gcc/arm-none-eabi/14.3.1/include/stddef.h"
 7722              		.file 4 "C:/arm-toolchain/14.3/arm-none-eabi/include/machine/_default_types.h"
 7723              		.file 5 "C:/arm-toolchain/14.3/arm-none-eabi/include/sys/_stdint.h"
 7724              		.file 6 "./freertos/inc/projdefs.h"
 7725              		.file 7 "./freertos/inc/list.h"
 7726              		.file 8 "./freertos/inc/task.h"
 7727              		.file 9 "./freertos/inc/portable.h"
 7728              		.file 10 "./freertos/inc/FreeRTOSConfig.h"
 7729              		.file 11 "./freertos/inc/timers.h"
 7730              		.file 12 "C:/arm-toolchain/14.3/arm-none-eabi/include/string.h"
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 234


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:23     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:20     .bss.pxCurrentTCB:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:26     .bss.pxReadyTasksLists:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:29     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:32     .bss.xDelayedTaskList1:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:35     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:38     .bss.xDelayedTaskList2:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:41     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:44     .bss.pxDelayedTaskList:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:47     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:50     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:53     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:56     .bss.xPendingReadyList:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:59     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:62     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:65     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:68     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:71     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:74     .bss.xSuspendedTaskList:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:77     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:80     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:83     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:86     .bss.xTickCount:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:89     .bss.xTickCount:00000000 xTickCount
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:92     .bss.uxTopReadyPriority:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:95     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:98     .bss.xSchedulerRunning:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:101    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:104    .bss.xPendedTicks:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:107    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:110    .bss.xYieldPending:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:113    .bss.xYieldPending:00000000 xYieldPending
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:116    .bss.xNumOfOverflows:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:119    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:122    .bss.uxTaskNumber:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:125    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:128    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:131    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:134    .bss.xIdleTaskHandle:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:137    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:140    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:143    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:146    .text.xTaskCreate:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:152    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:261    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:480    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:256    .text.prvInitialiseNewTask:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:475    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4773   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:626    .text.prvAddNewTaskToReadyList:000000c0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:637    .text.vTaskDelete:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:643    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5324   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5370   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:831    .text.vTaskDelete:000000f8 $d
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 235


C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:845    .text.vTaskDelay:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:851    .text.vTaskDelay:00000000 vTaskDelay
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2416   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7578   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2462   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:945    .text.vTaskDelay:00000064 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:951    .text.eTaskGetState:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:957    .text.eTaskGetState:00000000 eTaskGetState
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1116   .text.eTaskGetState:000000bc $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1125   .text.uxTaskPriorityGet:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1131   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1186   .text.uxTaskPriorityGet:00000030 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1191   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1197   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1288   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1293   .text.vTaskPrioritySet:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1299   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1541   .text.vTaskPrioritySet:00000144 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1549   .text.vTaskSuspend:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1555   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3478   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1756   .text.vTaskSuspend:00000108 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1768   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1773   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1867   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1873   .text.vTaskResume:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:1879   .text.vTaskResume:00000000 vTaskResume
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2015   .text.vTaskResume:000000ac $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2023   .text.xTaskResumeFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2029   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2199   .text.xTaskResumeFromISR:000000d0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2208   .rodata:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2212   .text.vTaskStartScheduler:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2218   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2335   .text.vTaskStartScheduler:00000088 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4717   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2345   .text.vTaskEndScheduler:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2351   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2405   .text.vTaskEndScheduler:0000002c $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2410   .text.vTaskSuspendAll:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2451   .text.vTaskSuspendAll:00000018 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2456   .text.xTaskResumeAll:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3214   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2678   .text.xTaskResumeAll:00000118 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2691   .text.xTaskGetTickCount:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2697   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2737   .text.xTaskGetTickCount:00000018 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2742   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2748   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2789   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2794   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2800   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2831   .text.uxTaskGetNumberOfTasks:00000010 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2836   .text.pcTaskGetName:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2842   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2921   .text.pcTaskGetName:00000044 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2926   .text.uxTaskGetSystemState:00000000 $t
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 236


C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:2932   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5123   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3110   .text.uxTaskGetSystemState:00000104 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3120   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3126   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3202   .text.xTaskCatchUpTicks:0000004c $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3208   .text.xTaskIncrementTick:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3457   .text.xTaskIncrementTick:00000148 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3472   .text.vTaskSwitchContext:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3622   .text.vTaskSwitchContext:000000a4 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3631   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3637   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3708   .text.vTaskPlaceOnEventList:00000048 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3713   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3719   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3825   .text.vTaskPlaceOnUnorderedEventList:00000074 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3831   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3837   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3917   .text.vTaskPlaceOnEventListRestricted:00000054 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3922   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:3928   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4065   .text.xTaskRemoveFromEventList:000000b0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4075   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4081   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4223   .text.vTaskRemoveFromUnorderedEventList:000000b4 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4232   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4238   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4310   .text.vTaskSetTimeOutState:00000048 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4316   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4322   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4367   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4373   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4379   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4547   .text.xTaskCheckForTimeOut:000000c0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4553   .text.vTaskMissedYield:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4559   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4591   .text.vTaskMissedYield:00000014 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4596   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4602   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4657   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4663   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4712   .text.prvIdleTask:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4868   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4762   .text.prvIdleTask:00000028 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4768   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4851   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4863   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4940   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4947   .text.vTaskGetInfo:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:4953   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5255   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5113   .text.vTaskGetInfo:000000c8 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5118   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5250   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5319   .text.prvDeleteTCB:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5365   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5432   .text.prvResetNextTaskUnblockTime:00000038 $d
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 237


C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5438   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5444   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5484   .text.xTaskGetCurrentTaskHandle:00000018 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5489   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5495   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5557   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5563   .text.xTaskPriorityInherit:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5569   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5730   .text.xTaskPriorityInherit:000000e0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5737   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5743   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5937   .text.xTaskPriorityDisinherit:00000104 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5944   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:5950   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6158   .text.vTaskPriorityDisinheritAfterTimeout:00000114 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6165   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6171   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6221   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6226   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6232   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6277   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6282   .text.ulTaskNotifyTake:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6288   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6402   .text.ulTaskNotifyTake:00000088 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6408   .text.xTaskNotifyWait:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6414   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6549   .text.xTaskNotifyWait:000000ac $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6555   .text.xTaskGenericNotify:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6561   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6645   .text.xTaskGenericNotify:00000064 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6650   .text.xTaskGenericNotify:00000078 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6833   .text.xTaskGenericNotify:00000160 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6841   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6847   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6953   .text.xTaskGenericNotifyFromISR:00000084 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:6958   .text.xTaskGenericNotifyFromISR:00000098 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7170   .text.xTaskGenericNotifyFromISR:000001a4 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7180   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7186   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7402   .text.vTaskNotifyGiveFromISR:00000110 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7412   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7418   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7489   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7494   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7500   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7568   .text.ulTaskNotifyValueClear:00000044 $d
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7573   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s:7709   .text.prvAddCurrentTaskToDelayedList:000000b0 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\cc0hHzxi.s 			page 238


vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xTimerCreateTimerTask
configureTimerForRunTimeStats
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
