ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./freertos/src/queue.c"
  18              		.global	xQueueRegistry
  19              		.section	.bss.xQueueRegistry,"aw",%nobits
  20              		.align	2
  23              	xQueueRegistry:
  24 0000 00000000 		.space	64
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.text.xQueueGenericReset,"ax",%progbits
  26              		.align	1
  27              		.global	xQueueGenericReset
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	xQueueGenericReset:
  33              	.LFB61:
   1:./freertos/src/queue.c **** /*
   2:./freertos/src/queue.c ****  * FreeRTOS Kernel V10.3.1
   3:./freertos/src/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./freertos/src/queue.c ****  *
   5:./freertos/src/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./freertos/src/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./freertos/src/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:./freertos/src/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./freertos/src/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./freertos/src/queue.c ****  * subject to the following conditions:
  11:./freertos/src/queue.c ****  *
  12:./freertos/src/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./freertos/src/queue.c ****  * copies or substantial portions of the Software.
  14:./freertos/src/queue.c ****  *
  15:./freertos/src/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./freertos/src/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./freertos/src/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./freertos/src/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./freertos/src/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./freertos/src/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./freertos/src/queue.c ****  *
  22:./freertos/src/queue.c ****  * http://www.FreeRTOS.org
  23:./freertos/src/queue.c ****  * http://aws.amazon.com/freertos
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 2


  24:./freertos/src/queue.c ****  *
  25:./freertos/src/queue.c ****  * 1 tab == 4 spaces!
  26:./freertos/src/queue.c ****  */
  27:./freertos/src/queue.c **** 
  28:./freertos/src/queue.c **** #include <stdlib.h>
  29:./freertos/src/queue.c **** #include <string.h>
  30:./freertos/src/queue.c **** 
  31:./freertos/src/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:./freertos/src/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:./freertos/src/queue.c **** task.h is included from an application file. */
  34:./freertos/src/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:./freertos/src/queue.c **** 
  36:./freertos/src/queue.c **** #include "FreeRTOS.h"
  37:./freertos/src/queue.c **** #include "task.h"
  38:./freertos/src/queue.c **** #include "queue.h"
  39:./freertos/src/queue.c **** 
  40:./freertos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:./freertos/src/queue.c **** 	#include "croutine.h"
  42:./freertos/src/queue.c **** #endif
  43:./freertos/src/queue.c **** 
  44:./freertos/src/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:./freertos/src/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:./freertos/src/queue.c **** for the header files above, but not in this file, in order to generate the
  47:./freertos/src/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:./freertos/src/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:./freertos/src/queue.c **** 
  50:./freertos/src/queue.c **** 
  51:./freertos/src/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:./freertos/src/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:./freertos/src/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:./freertos/src/queue.c **** 
  55:./freertos/src/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:./freertos/src/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:./freertos/src/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:./freertos/src/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:./freertos/src/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:./freertos/src/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:./freertos/src/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:./freertos/src/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:./freertos/src/queue.c **** being used for. */
  64:./freertos/src/queue.c **** #define uxQueueType						pcHead
  65:./freertos/src/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:./freertos/src/queue.c **** 
  67:./freertos/src/queue.c **** typedef struct QueuePointers
  68:./freertos/src/queue.c **** {
  69:./freertos/src/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:./freertos/src/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:./freertos/src/queue.c **** } QueuePointers_t;
  72:./freertos/src/queue.c **** 
  73:./freertos/src/queue.c **** typedef struct SemaphoreData
  74:./freertos/src/queue.c **** {
  75:./freertos/src/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:./freertos/src/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:./freertos/src/queue.c **** } SemaphoreData_t;
  78:./freertos/src/queue.c **** 
  79:./freertos/src/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:./freertos/src/queue.c **** zero. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 3


  81:./freertos/src/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:./freertos/src/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:./freertos/src/queue.c **** 
  84:./freertos/src/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:./freertos/src/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:./freertos/src/queue.c **** 	performed just because a higher priority task has been woken. */
  87:./freertos/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:./freertos/src/queue.c **** #else
  89:./freertos/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:./freertos/src/queue.c **** #endif
  91:./freertos/src/queue.c **** 
  92:./freertos/src/queue.c **** /*
  93:./freertos/src/queue.c ****  * Definition of the queue used by the scheduler.
  94:./freertos/src/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:./freertos/src/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:./freertos/src/queue.c ****  */
  97:./freertos/src/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:./freertos/src/queue.c **** {
  99:./freertos/src/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:./freertos/src/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:./freertos/src/queue.c **** 
 102:./freertos/src/queue.c **** 	union
 103:./freertos/src/queue.c **** 	{
 104:./freertos/src/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:./freertos/src/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:./freertos/src/queue.c **** 	} u;
 107:./freertos/src/queue.c **** 
 108:./freertos/src/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:./freertos/src/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:./freertos/src/queue.c **** 
 111:./freertos/src/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:./freertos/src/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:./freertos/src/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:./freertos/src/queue.c **** 
 115:./freertos/src/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:./freertos/src/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:./freertos/src/queue.c **** 
 118:./freertos/src/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:./freertos/src/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:./freertos/src/queue.c **** 	#endif
 121:./freertos/src/queue.c **** 
 122:./freertos/src/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:./freertos/src/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:./freertos/src/queue.c **** 	#endif
 125:./freertos/src/queue.c **** 
 126:./freertos/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:./freertos/src/queue.c **** 		UBaseType_t uxQueueNumber;
 128:./freertos/src/queue.c **** 		uint8_t ucQueueType;
 129:./freertos/src/queue.c **** 	#endif
 130:./freertos/src/queue.c **** 
 131:./freertos/src/queue.c **** } xQUEUE;
 132:./freertos/src/queue.c **** 
 133:./freertos/src/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:./freertos/src/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:./freertos/src/queue.c **** typedef xQUEUE Queue_t;
 136:./freertos/src/queue.c **** 
 137:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 4


 138:./freertos/src/queue.c **** 
 139:./freertos/src/queue.c **** /*
 140:./freertos/src/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:./freertos/src/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:./freertos/src/queue.c ****  */
 143:./freertos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:./freertos/src/queue.c **** 
 145:./freertos/src/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:./freertos/src/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:./freertos/src/queue.c **** 	more user friendly. */
 148:./freertos/src/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:./freertos/src/queue.c **** 	{
 150:./freertos/src/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:./freertos/src/queue.c **** 		QueueHandle_t xHandle;
 152:./freertos/src/queue.c **** 	} xQueueRegistryItem;
 153:./freertos/src/queue.c **** 
 154:./freertos/src/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:./freertos/src/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:./freertos/src/queue.c **** 	debuggers. */
 157:./freertos/src/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:./freertos/src/queue.c **** 
 159:./freertos/src/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:./freertos/src/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:./freertos/src/queue.c **** 	array position being vacant. */
 162:./freertos/src/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:./freertos/src/queue.c **** 
 164:./freertos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:./freertos/src/queue.c **** 
 166:./freertos/src/queue.c **** /*
 167:./freertos/src/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:./freertos/src/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:./freertos/src/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:./freertos/src/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:./freertos/src/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:./freertos/src/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:./freertos/src/queue.c ****  */
 174:./freertos/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:./freertos/src/queue.c **** 
 176:./freertos/src/queue.c **** /*
 177:./freertos/src/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:./freertos/src/queue.c ****  *
 179:./freertos/src/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:./freertos/src/queue.c ****  */
 181:./freertos/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:./freertos/src/queue.c **** 
 183:./freertos/src/queue.c **** /*
 184:./freertos/src/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:./freertos/src/queue.c ****  *
 186:./freertos/src/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:./freertos/src/queue.c ****  */
 188:./freertos/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:./freertos/src/queue.c **** 
 190:./freertos/src/queue.c **** /*
 191:./freertos/src/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:./freertos/src/queue.c ****  * back of the queue.
 193:./freertos/src/queue.c ****  */
 194:./freertos/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 5


 195:./freertos/src/queue.c **** 
 196:./freertos/src/queue.c **** /*
 197:./freertos/src/queue.c ****  * Copies an item out of a queue.
 198:./freertos/src/queue.c ****  */
 199:./freertos/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:./freertos/src/queue.c **** 
 201:./freertos/src/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:./freertos/src/queue.c **** 	/*
 203:./freertos/src/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:./freertos/src/queue.c **** 	 * the queue set that the queue contains data.
 205:./freertos/src/queue.c **** 	 */
 206:./freertos/src/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 207:./freertos/src/queue.c **** #endif
 208:./freertos/src/queue.c **** 
 209:./freertos/src/queue.c **** /*
 210:./freertos/src/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:./freertos/src/queue.c ****  * dynamically to fill in the structure's members.
 212:./freertos/src/queue.c ****  */
 213:./freertos/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:./freertos/src/queue.c **** 
 215:./freertos/src/queue.c **** /*
 216:./freertos/src/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:./freertos/src/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:./freertos/src/queue.c ****  * as a mutex.
 219:./freertos/src/queue.c ****  */
 220:./freertos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:./freertos/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:./freertos/src/queue.c **** #endif
 223:./freertos/src/queue.c **** 
 224:./freertos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:./freertos/src/queue.c **** 	/*
 226:./freertos/src/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:./freertos/src/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:./freertos/src/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:./freertos/src/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:./freertos/src/queue.c **** 	 * that priority.
 231:./freertos/src/queue.c **** 	 */
 232:./freertos/src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:./freertos/src/queue.c **** #endif
 234:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 235:./freertos/src/queue.c **** 
 236:./freertos/src/queue.c **** /*
 237:./freertos/src/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:./freertos/src/queue.c ****  * accessing the queue event lists.
 239:./freertos/src/queue.c ****  */
 240:./freertos/src/queue.c **** #define prvLockQueue( pxQueue )								\
 241:./freertos/src/queue.c **** 	taskENTER_CRITICAL();									\
 242:./freertos/src/queue.c **** 	{														\
 243:./freertos/src/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:./freertos/src/queue.c **** 		{													\
 245:./freertos/src/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:./freertos/src/queue.c **** 		}													\
 247:./freertos/src/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:./freertos/src/queue.c **** 		{													\
 249:./freertos/src/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:./freertos/src/queue.c **** 		}													\
 251:./freertos/src/queue.c **** 	}														\
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 6


 252:./freertos/src/queue.c **** 	taskEXIT_CRITICAL()
 253:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 254:./freertos/src/queue.c **** 
 255:./freertos/src/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:./freertos/src/queue.c **** {
  34              		.loc 1 256 1
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 16
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 84B0     		sub	sp, sp, #16
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 24
  46 0004 00AF     		add	r7, sp, #0
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  49 0006 7860     		str	r0, [r7, #4]
  50 0008 3960     		str	r1, [r7]
 257:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
  51              		.loc 1 257 17
  52 000a 7B68     		ldr	r3, [r7, #4]
  53 000c FB60     		str	r3, [r7, #12]
 258:./freertos/src/queue.c **** 
 259:./freertos/src/queue.c **** 	configASSERT( pxQueue );
  54              		.loc 1 259 2
  55 000e FB68     		ldr	r3, [r7, #12]
  56 0010 002B     		cmp	r3, #0
  57 0012 0BD1     		bne	.L2
  58              	.LBB101:
  59              	.LBB102:
  60              		.file 2 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h"
   1:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 7


  23:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  28:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  29:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  32:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  36:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:./freertos/src/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  46:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  55:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  59:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  66:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  72:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  78:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 8


  80:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
  89:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  90:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
  96:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 106:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 108:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 115:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 122:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 127:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 129:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 134:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 9


 137:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 138:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 143:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 147:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 149:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 151:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 153:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 155:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 160:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 163:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 165:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 169:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 171:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 173:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 176:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 179:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	{
 181:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
 183:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	else
 184:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	{
 185:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	}
 187:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 188:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 189:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 190:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 191:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 193:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 10


 194:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 195:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  61              		.loc 2 197 2
  62              		.syntax unified
  63              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
  64 0014 4FF05003 			mov r3, #80												
  65 0018 83F31188 		msr basepri, r3											
  66 001c BFF36F8F 		isb														
  67 0020 BFF34F8F 		dsb														
  68              	
  69              	@ 0 "" 2
  70              		.thumb
  71              		.syntax unified
  72 0024 BB60     		str	r3, [r7, #8]
 198:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 199:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	);
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
  73              		.loc 2 205 1
  74 0026 00BF     		nop
  75              	.L3:
  76              	.LBE102:
  77              	.LBE101:
  78              		.loc 1 259 2
  79 0028 00BF     		nop
  80 002a FDE7     		b	.L3
  81              	.L2:
 260:./freertos/src/queue.c **** 
 261:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
  82              		.loc 1 261 2
  83 002c FFF7FEFF 		bl	vPortEnterCritical
 262:./freertos/src/queue.c **** 	{
 263:./freertos/src/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
  84              		.loc 1 263 37
  85 0030 FB68     		ldr	r3, [r7, #12]
  86 0032 1A68     		ldr	r2, [r3]
  87              		.loc 1 263 57
  88 0034 FB68     		ldr	r3, [r7, #12]
  89 0036 DB6B     		ldr	r3, [r3, #60]
  90              		.loc 1 263 77
  91 0038 F968     		ldr	r1, [r7, #12]
  92 003a 096C     		ldr	r1, [r1, #64]
  93              		.loc 1 263 68
  94 003c 01FB03F3 		mul	r3, r1, r3
  95              		.loc 1 263 46
  96 0040 1A44     		add	r2, r2, r3
  97              		.loc 1 263 28
  98 0042 FB68     		ldr	r3, [r7, #12]
  99 0044 9A60     		str	r2, [r3, #8]
 264:./freertos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 100              		.loc 1 264 30
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 11


 101 0046 FB68     		ldr	r3, [r7, #12]
 102 0048 0022     		movs	r2, #0
 103 004a 9A63     		str	r2, [r3, #56]
 265:./freertos/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 104              		.loc 1 265 31
 105 004c FB68     		ldr	r3, [r7, #12]
 106 004e 1A68     		ldr	r2, [r3]
 107              		.loc 1 265 22
 108 0050 FB68     		ldr	r3, [r7, #12]
 109 0052 5A60     		str	r2, [r3, #4]
 266:./freertos/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 110              		.loc 1 266 41
 111 0054 FB68     		ldr	r3, [r7, #12]
 112 0056 1A68     		ldr	r2, [r3]
 113              		.loc 1 266 63
 114 0058 FB68     		ldr	r3, [r7, #12]
 115 005a DB6B     		ldr	r3, [r3, #60]
 116              		.loc 1 266 74
 117 005c 013B     		subs	r3, r3, #1
 118              		.loc 1 266 90
 119 005e F968     		ldr	r1, [r7, #12]
 120 0060 096C     		ldr	r1, [r1, #64]
 121              		.loc 1 266 81
 122 0062 01FB03F3 		mul	r3, r1, r3
 123              		.loc 1 266 50
 124 0066 1A44     		add	r2, r2, r3
 125              		.loc 1 266 32
 126 0068 FB68     		ldr	r3, [r7, #12]
 127 006a DA60     		str	r2, [r3, #12]
 267:./freertos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 128              		.loc 1 267 20
 129 006c FB68     		ldr	r3, [r7, #12]
 130 006e FF22     		movs	r2, #255
 131 0070 83F84420 		strb	r2, [r3, #68]
 268:./freertos/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 132              		.loc 1 268 20
 133 0074 FB68     		ldr	r3, [r7, #12]
 134 0076 FF22     		movs	r2, #255
 135 0078 83F84520 		strb	r2, [r3, #69]
 269:./freertos/src/queue.c **** 
 270:./freertos/src/queue.c **** 		if( xNewQueue == pdFALSE )
 136              		.loc 1 270 5
 137 007c 3B68     		ldr	r3, [r7]
 138 007e 002B     		cmp	r3, #0
 139 0080 14D1     		bne	.L4
 271:./freertos/src/queue.c **** 		{
 272:./freertos/src/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:./freertos/src/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:./freertos/src/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:./freertos/src/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:./freertos/src/queue.c **** 			it will be possible to write to it. */
 277:./freertos/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 140              		.loc 1 277 8
 141 0082 FB68     		ldr	r3, [r7, #12]
 142 0084 1B69     		ldr	r3, [r3, #16]
 143              		.loc 1 277 6
 144 0086 002B     		cmp	r3, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 12


 145 0088 1AD0     		beq	.L5
 278:./freertos/src/queue.c **** 			{
 279:./freertos/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 146              		.loc 1 279 35
 147 008a FB68     		ldr	r3, [r7, #12]
 148 008c 1033     		adds	r3, r3, #16
 149              		.loc 1 279 9
 150 008e 1846     		mov	r0, r3
 151 0090 FFF7FEFF 		bl	xTaskRemoveFromEventList
 152 0094 0346     		mov	r3, r0
 153              		.loc 1 279 7 discriminator 1
 154 0096 002B     		cmp	r3, #0
 155 0098 12D0     		beq	.L5
 280:./freertos/src/queue.c **** 				{
 281:./freertos/src/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 156              		.loc 1 281 6
 157 009a 0D4B     		ldr	r3, .L7
 158 009c 4FF08052 		mov	r2, #268435456
 159 00a0 1A60     		str	r2, [r3]
 160              		.syntax unified
 161              	@ 281 "./freertos/src/queue.c" 1
 162 00a2 BFF34F8F 		dsb
 163              	@ 0 "" 2
 164              	@ 281 "./freertos/src/queue.c" 1
 165 00a6 BFF36F8F 		isb
 166              	@ 0 "" 2
 167              		.thumb
 168              		.syntax unified
 169 00aa 09E0     		b	.L5
 170              	.L4:
 282:./freertos/src/queue.c **** 				}
 283:./freertos/src/queue.c **** 				else
 284:./freertos/src/queue.c **** 				{
 285:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:./freertos/src/queue.c **** 				}
 287:./freertos/src/queue.c **** 			}
 288:./freertos/src/queue.c **** 			else
 289:./freertos/src/queue.c **** 			{
 290:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:./freertos/src/queue.c **** 			}
 292:./freertos/src/queue.c **** 		}
 293:./freertos/src/queue.c **** 		else
 294:./freertos/src/queue.c **** 		{
 295:./freertos/src/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:./freertos/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 171              		.loc 1 296 4
 172 00ac FB68     		ldr	r3, [r7, #12]
 173 00ae 1033     		adds	r3, r3, #16
 174 00b0 1846     		mov	r0, r3
 175 00b2 FFF7FEFF 		bl	vListInitialise
 297:./freertos/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 176              		.loc 1 297 4
 177 00b6 FB68     		ldr	r3, [r7, #12]
 178 00b8 2433     		adds	r3, r3, #36
 179 00ba 1846     		mov	r0, r3
 180 00bc FFF7FEFF 		bl	vListInitialise
 181              	.L5:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 13


 298:./freertos/src/queue.c **** 		}
 299:./freertos/src/queue.c **** 	}
 300:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 182              		.loc 1 300 2
 183 00c0 FFF7FEFF 		bl	vPortExitCritical
 301:./freertos/src/queue.c **** 
 302:./freertos/src/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:./freertos/src/queue.c **** 	versions. */
 304:./freertos/src/queue.c **** 	return pdPASS;
 184              		.loc 1 304 9
 185 00c4 0123     		movs	r3, #1
 305:./freertos/src/queue.c **** }
 186              		.loc 1 305 1
 187 00c6 1846     		mov	r0, r3
 188 00c8 1037     		adds	r7, r7, #16
 189              	.LCFI3:
 190              		.cfi_def_cfa_offset 8
 191 00ca BD46     		mov	sp, r7
 192              	.LCFI4:
 193              		.cfi_def_cfa_register 13
 194              		@ sp needed
 195 00cc 80BD     		pop	{r7, pc}
 196              	.L8:
 197 00ce 00BF     		.align	2
 198              	.L7:
 199 00d0 04ED00E0 		.word	-536810236
 200              		.cfi_endproc
 201              	.LFE61:
 203              		.section	.text.xQueueGenericCreate,"ax",%progbits
 204              		.align	1
 205              		.global	xQueueGenericCreate
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	xQueueGenericCreate:
 211              	.LFB62:
 306:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 307:./freertos/src/queue.c **** 
 308:./freertos/src/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:./freertos/src/queue.c **** 
 310:./freertos/src/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:./freertos/src/queue.c **** 	{
 312:./freertos/src/queue.c **** 	Queue_t *pxNewQueue;
 313:./freertos/src/queue.c **** 
 314:./freertos/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:./freertos/src/queue.c **** 
 316:./freertos/src/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:./freertos/src/queue.c **** 		supplied. */
 318:./freertos/src/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:./freertos/src/queue.c **** 
 320:./freertos/src/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:./freertos/src/queue.c **** 		should not be provided if the item size is 0. */
 322:./freertos/src/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:./freertos/src/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:./freertos/src/queue.c **** 
 325:./freertos/src/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:./freertos/src/queue.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 14


 327:./freertos/src/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:./freertos/src/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:./freertos/src/queue.c **** 			the real queue and semaphore structures. */
 330:./freertos/src/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:./freertos/src/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:./freertos/src/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:./freertos/src/queue.c **** 		}
 334:./freertos/src/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:./freertos/src/queue.c **** 
 336:./freertos/src/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:./freertos/src/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:./freertos/src/queue.c **** 		but is already set. */
 339:./freertos/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:./freertos/src/queue.c **** 
 341:./freertos/src/queue.c **** 		if( pxNewQueue != NULL )
 342:./freertos/src/queue.c **** 		{
 343:./freertos/src/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:./freertos/src/queue.c **** 			{
 345:./freertos/src/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:./freertos/src/queue.c **** 				note this queue was allocated statically in case the queue is
 347:./freertos/src/queue.c **** 				later deleted. */
 348:./freertos/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:./freertos/src/queue.c **** 			}
 350:./freertos/src/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:./freertos/src/queue.c **** 
 352:./freertos/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:./freertos/src/queue.c **** 		}
 354:./freertos/src/queue.c **** 		else
 355:./freertos/src/queue.c **** 		{
 356:./freertos/src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:./freertos/src/queue.c **** 		}
 359:./freertos/src/queue.c **** 
 360:./freertos/src/queue.c **** 		return pxNewQueue;
 361:./freertos/src/queue.c **** 	}
 362:./freertos/src/queue.c **** 
 363:./freertos/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 365:./freertos/src/queue.c **** 
 366:./freertos/src/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:./freertos/src/queue.c **** 
 368:./freertos/src/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:./freertos/src/queue.c **** 	{
 212              		.loc 1 369 2
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 32
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216 0000 80B5     		push	{r7, lr}
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 8AB0     		sub	sp, sp, #40
 222              	.LCFI6:
 223              		.cfi_def_cfa_offset 48
 224 0004 02AF     		add	r7, sp, #8
 225              	.LCFI7:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 15


 226              		.cfi_def_cfa 7, 40
 227 0006 F860     		str	r0, [r7, #12]
 228 0008 B960     		str	r1, [r7, #8]
 229 000a 1346     		mov	r3, r2
 230 000c FB71     		strb	r3, [r7, #7]
 370:./freertos/src/queue.c **** 	Queue_t *pxNewQueue;
 371:./freertos/src/queue.c **** 	size_t xQueueSizeInBytes;
 372:./freertos/src/queue.c **** 	uint8_t *pucQueueStorage;
 373:./freertos/src/queue.c **** 
 374:./freertos/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 231              		.loc 1 374 3
 232 000e FB68     		ldr	r3, [r7, #12]
 233 0010 002B     		cmp	r3, #0
 234 0012 0BD1     		bne	.L10
 235              	.LBB103:
 236              	.LBB104:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 237              		.loc 2 197 2
 238              		.syntax unified
 239              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 240 0014 4FF05003 			mov r3, #80												
 241 0018 83F31188 		msr basepri, r3											
 242 001c BFF36F8F 		isb														
 243 0020 BFF34F8F 		dsb														
 244              	
 245              	@ 0 "" 2
 246              		.thumb
 247              		.syntax unified
 248 0024 3B61     		str	r3, [r7, #16]
 249              		.loc 2 205 1
 250 0026 00BF     		nop
 251              	.L11:
 252              	.LBE104:
 253              	.LBE103:
 254              		.loc 1 374 3
 255 0028 00BF     		nop
 256 002a FDE7     		b	.L11
 257              	.L10:
 375:./freertos/src/queue.c **** 
 376:./freertos/src/queue.c **** 		/* Allocate enough space to hold the maximum number of items that
 377:./freertos/src/queue.c **** 		can be in the queue at any time.  It is valid for uxItemSize to be
 378:./freertos/src/queue.c **** 		zero in the case the queue is used as a semaphore. */
 379:./freertos/src/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as th
 258              		.loc 1 379 21
 259 002c FB68     		ldr	r3, [r7, #12]
 260 002e BA68     		ldr	r2, [r7, #8]
 261 0030 02FB03F3 		mul	r3, r2, r3
 262 0034 FB61     		str	r3, [r7, #28]
 380:./freertos/src/queue.c **** 
 381:./freertos/src/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 382:./freertos/src/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 383:./freertos/src/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 384:./freertos/src/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 385:./freertos/src/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 386:./freertos/src/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 387:./freertos/src/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 388:./freertos/src/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 16


 389:./freertos/src/queue.c **** 		two bytes). */
 390:./freertos/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 263              		.loc 1 390 30
 264 0036 FB69     		ldr	r3, [r7, #28]
 265 0038 5033     		adds	r3, r3, #80
 266 003a 1846     		mov	r0, r3
 267 003c FFF7FEFF 		bl	pvPortMalloc
 268 0040 B861     		str	r0, [r7, #24]
 391:./freertos/src/queue.c **** 
 392:./freertos/src/queue.c **** 		if( pxNewQueue != NULL )
 269              		.loc 1 392 5
 270 0042 BB69     		ldr	r3, [r7, #24]
 271 0044 002B     		cmp	r3, #0
 272 0046 0DD0     		beq	.L12
 393:./freertos/src/queue.c **** 		{
 394:./freertos/src/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 395:./freertos/src/queue.c **** 			storage area. */
 396:./freertos/src/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 273              		.loc 1 396 20
 274 0048 BB69     		ldr	r3, [r7, #24]
 275 004a 7B61     		str	r3, [r7, #20]
 397:./freertos/src/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 276              		.loc 1 397 20
 277 004c 7B69     		ldr	r3, [r7, #20]
 278 004e 5033     		adds	r3, r3, #80
 279 0050 7B61     		str	r3, [r7, #20]
 398:./freertos/src/queue.c **** 
 399:./freertos/src/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 400:./freertos/src/queue.c **** 			{
 401:./freertos/src/queue.c **** 				/* Queues can be created either statically or dynamically, so
 402:./freertos/src/queue.c **** 				note this task was created dynamically in case it is later
 403:./freertos/src/queue.c **** 				deleted. */
 404:./freertos/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 405:./freertos/src/queue.c **** 			}
 406:./freertos/src/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 407:./freertos/src/queue.c **** 
 408:./freertos/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 280              		.loc 1 408 4
 281 0052 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 282 0054 BB69     		ldr	r3, [r7, #24]
 283 0056 0093     		str	r3, [sp]
 284 0058 1346     		mov	r3, r2
 285 005a 7A69     		ldr	r2, [r7, #20]
 286 005c B968     		ldr	r1, [r7, #8]
 287 005e F868     		ldr	r0, [r7, #12]
 288 0060 FFF7FEFF 		bl	prvInitialiseNewQueue
 289              	.L12:
 409:./freertos/src/queue.c **** 		}
 410:./freertos/src/queue.c **** 		else
 411:./freertos/src/queue.c **** 		{
 412:./freertos/src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 413:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 414:./freertos/src/queue.c **** 		}
 415:./freertos/src/queue.c **** 
 416:./freertos/src/queue.c **** 		return pxNewQueue;
 290              		.loc 1 416 10
 291 0064 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 17


 417:./freertos/src/queue.c **** 	}
 292              		.loc 1 417 2
 293 0066 1846     		mov	r0, r3
 294 0068 2037     		adds	r7, r7, #32
 295              	.LCFI8:
 296              		.cfi_def_cfa_offset 8
 297 006a BD46     		mov	sp, r7
 298              	.LCFI9:
 299              		.cfi_def_cfa_register 13
 300              		@ sp needed
 301 006c 80BD     		pop	{r7, pc}
 302              		.cfi_endproc
 303              	.LFE62:
 305              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 306              		.align	1
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 311              	prvInitialiseNewQueue:
 312              	.LFB63:
 418:./freertos/src/queue.c **** 
 419:./freertos/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 420:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 421:./freertos/src/queue.c **** 
 422:./freertos/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 423:./freertos/src/queue.c **** {
 313              		.loc 1 423 1
 314              		.cfi_startproc
 315              		@ args = 4, pretend = 0, frame = 16
 316              		@ frame_needed = 1, uses_anonymous_args = 0
 317 0000 80B5     		push	{r7, lr}
 318              	.LCFI10:
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 7, -8
 321              		.cfi_offset 14, -4
 322 0002 84B0     		sub	sp, sp, #16
 323              	.LCFI11:
 324              		.cfi_def_cfa_offset 24
 325 0004 00AF     		add	r7, sp, #0
 326              	.LCFI12:
 327              		.cfi_def_cfa_register 7
 328 0006 F860     		str	r0, [r7, #12]
 329 0008 B960     		str	r1, [r7, #8]
 330 000a 7A60     		str	r2, [r7, #4]
 331 000c FB70     		strb	r3, [r7, #3]
 424:./freertos/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 425:./freertos/src/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 426:./freertos/src/queue.c **** 	( void ) ucQueueType;
 427:./freertos/src/queue.c **** 
 428:./freertos/src/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 332              		.loc 1 428 4
 333 000e BB68     		ldr	r3, [r7, #8]
 334 0010 002B     		cmp	r3, #0
 335 0012 03D1     		bne	.L15
 429:./freertos/src/queue.c **** 	{
 430:./freertos/src/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 431:./freertos/src/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 18


 432:./freertos/src/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 433:./freertos/src/queue.c **** 		value that is known to be within the memory map. */
 434:./freertos/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 336              		.loc 1 434 22
 337 0014 BB69     		ldr	r3, [r7, #24]
 338 0016 BA69     		ldr	r2, [r7, #24]
 339 0018 1A60     		str	r2, [r3]
 340 001a 02E0     		b	.L16
 341              	.L15:
 435:./freertos/src/queue.c **** 	}
 436:./freertos/src/queue.c **** 	else
 437:./freertos/src/queue.c **** 	{
 438:./freertos/src/queue.c **** 		/* Set the head to the start of the queue storage area. */
 439:./freertos/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 342              		.loc 1 439 22
 343 001c BB69     		ldr	r3, [r7, #24]
 344 001e 7A68     		ldr	r2, [r7, #4]
 345 0020 1A60     		str	r2, [r3]
 346              	.L16:
 440:./freertos/src/queue.c **** 	}
 441:./freertos/src/queue.c **** 
 442:./freertos/src/queue.c **** 	/* Initialise the queue members as described where the queue type is
 443:./freertos/src/queue.c **** 	defined. */
 444:./freertos/src/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 347              		.loc 1 444 23
 348 0022 BB69     		ldr	r3, [r7, #24]
 349 0024 FA68     		ldr	r2, [r7, #12]
 350 0026 DA63     		str	r2, [r3, #60]
 445:./freertos/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 351              		.loc 1 445 25
 352 0028 BB69     		ldr	r3, [r7, #24]
 353 002a BA68     		ldr	r2, [r7, #8]
 354 002c 1A64     		str	r2, [r3, #64]
 446:./freertos/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 355              		.loc 1 446 11
 356 002e 0121     		movs	r1, #1
 357 0030 B869     		ldr	r0, [r7, #24]
 358 0032 FFF7FEFF 		bl	xQueueGenericReset
 447:./freertos/src/queue.c **** 
 448:./freertos/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 449:./freertos/src/queue.c **** 	{
 450:./freertos/src/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 359              		.loc 1 450 27
 360 0036 BB69     		ldr	r3, [r7, #24]
 361 0038 FA78     		ldrb	r2, [r7, #3]
 362 003a 83F84C20 		strb	r2, [r3, #76]
 451:./freertos/src/queue.c **** 	}
 452:./freertos/src/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 453:./freertos/src/queue.c **** 
 454:./freertos/src/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 455:./freertos/src/queue.c **** 	{
 456:./freertos/src/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 457:./freertos/src/queue.c **** 	}
 458:./freertos/src/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 459:./freertos/src/queue.c **** 
 460:./freertos/src/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 461:./freertos/src/queue.c **** }
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 19


 363              		.loc 1 461 1
 364 003e 00BF     		nop
 365 0040 1037     		adds	r7, r7, #16
 366              	.LCFI13:
 367              		.cfi_def_cfa_offset 8
 368 0042 BD46     		mov	sp, r7
 369              	.LCFI14:
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 0044 80BD     		pop	{r7, pc}
 373              		.cfi_endproc
 374              	.LFE63:
 376              		.section	.text.prvInitialiseMutex,"ax",%progbits
 377              		.align	1
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 382              	prvInitialiseMutex:
 383              	.LFB64:
 462:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 463:./freertos/src/queue.c **** 
 464:./freertos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 465:./freertos/src/queue.c **** 
 466:./freertos/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 467:./freertos/src/queue.c **** 	{
 384              		.loc 1 467 2
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 8
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388 0000 80B5     		push	{r7, lr}
 389              	.LCFI15:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 82B0     		sub	sp, sp, #8
 394              	.LCFI16:
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              	.LCFI17:
 398              		.cfi_def_cfa_register 7
 399 0006 7860     		str	r0, [r7, #4]
 468:./freertos/src/queue.c **** 		if( pxNewQueue != NULL )
 400              		.loc 1 468 5
 401 0008 7B68     		ldr	r3, [r7, #4]
 402 000a 002B     		cmp	r3, #0
 403 000c 0ED0     		beq	.L19
 469:./freertos/src/queue.c **** 		{
 470:./freertos/src/queue.c **** 			/* The queue create function will set all the queue structure members
 471:./freertos/src/queue.c **** 			correctly for a generic queue, but this function is creating a
 472:./freertos/src/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 473:./freertos/src/queue.c **** 			in particular the information required for priority inheritance. */
 474:./freertos/src/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 404              		.loc 1 474 42
 405 000e 7B68     		ldr	r3, [r7, #4]
 406 0010 0022     		movs	r2, #0
 407 0012 9A60     		str	r2, [r3, #8]
 475:./freertos/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 20


 408              		.loc 1 475 28
 409 0014 7B68     		ldr	r3, [r7, #4]
 410 0016 0022     		movs	r2, #0
 411 0018 1A60     		str	r2, [r3]
 476:./freertos/src/queue.c **** 
 477:./freertos/src/queue.c **** 			/* In case this is a recursive mutex. */
 478:./freertos/src/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 412              		.loc 1 478 50
 413 001a 7B68     		ldr	r3, [r7, #4]
 414 001c 0022     		movs	r2, #0
 415 001e DA60     		str	r2, [r3, #12]
 479:./freertos/src/queue.c **** 
 480:./freertos/src/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 481:./freertos/src/queue.c **** 
 482:./freertos/src/queue.c **** 			/* Start with the semaphore in the expected state. */
 483:./freertos/src/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 416              		.loc 1 483 13
 417 0020 0023     		movs	r3, #0
 418 0022 0022     		movs	r2, #0
 419 0024 0021     		movs	r1, #0
 420 0026 7868     		ldr	r0, [r7, #4]
 421 0028 FFF7FEFF 		bl	xQueueGenericSend
 422              	.L19:
 484:./freertos/src/queue.c **** 		}
 485:./freertos/src/queue.c **** 		else
 486:./freertos/src/queue.c **** 		{
 487:./freertos/src/queue.c **** 			traceCREATE_MUTEX_FAILED();
 488:./freertos/src/queue.c **** 		}
 489:./freertos/src/queue.c **** 	}
 423              		.loc 1 489 2
 424 002c 00BF     		nop
 425 002e 0837     		adds	r7, r7, #8
 426              	.LCFI18:
 427              		.cfi_def_cfa_offset 8
 428 0030 BD46     		mov	sp, r7
 429              	.LCFI19:
 430              		.cfi_def_cfa_register 13
 431              		@ sp needed
 432 0032 80BD     		pop	{r7, pc}
 433              		.cfi_endproc
 434              	.LFE64:
 436              		.section	.text.xQueueCreateMutex,"ax",%progbits
 437              		.align	1
 438              		.global	xQueueCreateMutex
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 443              	xQueueCreateMutex:
 444              	.LFB65:
 490:./freertos/src/queue.c **** 
 491:./freertos/src/queue.c **** #endif /* configUSE_MUTEXES */
 492:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 493:./freertos/src/queue.c **** 
 494:./freertos/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 495:./freertos/src/queue.c **** 
 496:./freertos/src/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 497:./freertos/src/queue.c **** 	{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 21


 445              		.loc 1 497 2
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 24
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 80B5     		push	{r7, lr}
 450              	.LCFI20:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 86B0     		sub	sp, sp, #24
 455              	.LCFI21:
 456              		.cfi_def_cfa_offset 32
 457 0004 00AF     		add	r7, sp, #0
 458              	.LCFI22:
 459              		.cfi_def_cfa_register 7
 460 0006 0346     		mov	r3, r0
 461 0008 FB71     		strb	r3, [r7, #7]
 498:./freertos/src/queue.c **** 	QueueHandle_t xNewQueue;
 499:./freertos/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 462              		.loc 1 499 20
 463 000a 0123     		movs	r3, #1
 464 000c 7B61     		str	r3, [r7, #20]
 465              		.loc 1 499 55
 466 000e 0023     		movs	r3, #0
 467 0010 3B61     		str	r3, [r7, #16]
 500:./freertos/src/queue.c **** 
 501:./freertos/src/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 468              		.loc 1 501 15
 469 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 0014 1A46     		mov	r2, r3
 471 0016 3969     		ldr	r1, [r7, #16]
 472 0018 7869     		ldr	r0, [r7, #20]
 473 001a FFF7FEFF 		bl	xQueueGenericCreate
 474 001e F860     		str	r0, [r7, #12]
 502:./freertos/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 475              		.loc 1 502 3
 476 0020 F868     		ldr	r0, [r7, #12]
 477 0022 FFF7FEFF 		bl	prvInitialiseMutex
 503:./freertos/src/queue.c **** 
 504:./freertos/src/queue.c **** 		return xNewQueue;
 478              		.loc 1 504 10
 479 0026 FB68     		ldr	r3, [r7, #12]
 505:./freertos/src/queue.c **** 	}
 480              		.loc 1 505 2
 481 0028 1846     		mov	r0, r3
 482 002a 1837     		adds	r7, r7, #24
 483              	.LCFI23:
 484              		.cfi_def_cfa_offset 8
 485 002c BD46     		mov	sp, r7
 486              	.LCFI24:
 487              		.cfi_def_cfa_register 13
 488              		@ sp needed
 489 002e 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE65:
 493              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 494              		.align	1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 22


 495              		.global	xQueueGiveMutexRecursive
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 500              	xQueueGiveMutexRecursive:
 501              	.LFB66:
 506:./freertos/src/queue.c **** 
 507:./freertos/src/queue.c **** #endif /* configUSE_MUTEXES */
 508:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 509:./freertos/src/queue.c **** 
 510:./freertos/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 511:./freertos/src/queue.c **** 
 512:./freertos/src/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 513:./freertos/src/queue.c **** 	{
 514:./freertos/src/queue.c **** 	QueueHandle_t xNewQueue;
 515:./freertos/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 516:./freertos/src/queue.c **** 
 517:./freertos/src/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 518:./freertos/src/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 519:./freertos/src/queue.c **** 		( void ) ucQueueType;
 520:./freertos/src/queue.c **** 
 521:./freertos/src/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 522:./freertos/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 523:./freertos/src/queue.c **** 
 524:./freertos/src/queue.c **** 		return xNewQueue;
 525:./freertos/src/queue.c **** 	}
 526:./freertos/src/queue.c **** 
 527:./freertos/src/queue.c **** #endif /* configUSE_MUTEXES */
 528:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 529:./freertos/src/queue.c **** 
 530:./freertos/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 531:./freertos/src/queue.c **** 
 532:./freertos/src/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 533:./freertos/src/queue.c **** 	{
 534:./freertos/src/queue.c **** 	TaskHandle_t pxReturn;
 535:./freertos/src/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 536:./freertos/src/queue.c **** 
 537:./freertos/src/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 538:./freertos/src/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 539:./freertos/src/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 540:./freertos/src/queue.c **** 		identity of the mutex holder, as the holder may change between the
 541:./freertos/src/queue.c **** 		following critical section exiting and the function returning. */
 542:./freertos/src/queue.c **** 		taskENTER_CRITICAL();
 543:./freertos/src/queue.c **** 		{
 544:./freertos/src/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 545:./freertos/src/queue.c **** 			{
 546:./freertos/src/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 547:./freertos/src/queue.c **** 			}
 548:./freertos/src/queue.c **** 			else
 549:./freertos/src/queue.c **** 			{
 550:./freertos/src/queue.c **** 				pxReturn = NULL;
 551:./freertos/src/queue.c **** 			}
 552:./freertos/src/queue.c **** 		}
 553:./freertos/src/queue.c **** 		taskEXIT_CRITICAL();
 554:./freertos/src/queue.c **** 
 555:./freertos/src/queue.c **** 		return pxReturn;
 556:./freertos/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 23


 557:./freertos/src/queue.c **** 
 558:./freertos/src/queue.c **** #endif
 559:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 560:./freertos/src/queue.c **** 
 561:./freertos/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 562:./freertos/src/queue.c **** 
 563:./freertos/src/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 564:./freertos/src/queue.c **** 	{
 565:./freertos/src/queue.c **** 	TaskHandle_t pxReturn;
 566:./freertos/src/queue.c **** 
 567:./freertos/src/queue.c **** 		configASSERT( xSemaphore );
 568:./freertos/src/queue.c **** 
 569:./freertos/src/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 570:./freertos/src/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 571:./freertos/src/queue.c **** 		not required here. */
 572:./freertos/src/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 573:./freertos/src/queue.c **** 		{
 574:./freertos/src/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 575:./freertos/src/queue.c **** 		}
 576:./freertos/src/queue.c **** 		else
 577:./freertos/src/queue.c **** 		{
 578:./freertos/src/queue.c **** 			pxReturn = NULL;
 579:./freertos/src/queue.c **** 		}
 580:./freertos/src/queue.c **** 
 581:./freertos/src/queue.c **** 		return pxReturn;
 582:./freertos/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 583:./freertos/src/queue.c **** 
 584:./freertos/src/queue.c **** #endif
 585:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 586:./freertos/src/queue.c **** 
 587:./freertos/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 588:./freertos/src/queue.c **** 
 589:./freertos/src/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 590:./freertos/src/queue.c **** 	{
 502              		.loc 1 590 2
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 24
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506 0000 90B5     		push	{r4, r7, lr}
 507              	.LCFI25:
 508              		.cfi_def_cfa_offset 12
 509              		.cfi_offset 4, -12
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 87B0     		sub	sp, sp, #28
 513              	.LCFI26:
 514              		.cfi_def_cfa_offset 40
 515 0004 00AF     		add	r7, sp, #0
 516              	.LCFI27:
 517              		.cfi_def_cfa_register 7
 518 0006 7860     		str	r0, [r7, #4]
 591:./freertos/src/queue.c **** 	BaseType_t xReturn;
 592:./freertos/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 519              		.loc 1 592 18
 520 0008 7B68     		ldr	r3, [r7, #4]
 521 000a 3B61     		str	r3, [r7, #16]
 593:./freertos/src/queue.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 24


 594:./freertos/src/queue.c **** 		configASSERT( pxMutex );
 522              		.loc 1 594 3
 523 000c 3B69     		ldr	r3, [r7, #16]
 524 000e 002B     		cmp	r3, #0
 525 0010 0BD1     		bne	.L23
 526              	.LBB105:
 527              	.LBB106:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 528              		.loc 2 197 2
 529              		.syntax unified
 530              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 531 0012 4FF05003 			mov r3, #80												
 532 0016 83F31188 		msr basepri, r3											
 533 001a BFF36F8F 		isb														
 534 001e BFF34F8F 		dsb														
 535              	
 536              	@ 0 "" 2
 537              		.thumb
 538              		.syntax unified
 539 0022 FB60     		str	r3, [r7, #12]
 540              		.loc 2 205 1
 541 0024 00BF     		nop
 542              	.L24:
 543              	.LBE106:
 544              	.LBE105:
 545              		.loc 1 594 3
 546 0026 00BF     		nop
 547 0028 FDE7     		b	.L24
 548              	.L23:
 595:./freertos/src/queue.c **** 
 596:./freertos/src/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 597:./freertos/src/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 598:./freertos/src/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 599:./freertos/src/queue.c **** 		this is the only condition we are interested in it does not matter if
 600:./freertos/src/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 601:./freertos/src/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 602:./freertos/src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 549              		.loc 1 602 28
 550 002a 3B69     		ldr	r3, [r7, #16]
 551 002c 9C68     		ldr	r4, [r3, #8]
 552              		.loc 1 602 45
 553 002e FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 554 0032 0346     		mov	r3, r0
 555              		.loc 1 602 5 discriminator 1
 556 0034 9C42     		cmp	r4, r3
 557 0036 11D1     		bne	.L25
 603:./freertos/src/queue.c **** 		{
 604:./freertos/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 605:./freertos/src/queue.c **** 
 606:./freertos/src/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 607:./freertos/src/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 608:./freertos/src/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 609:./freertos/src/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 610:./freertos/src/queue.c **** 			uxRecursiveCallCount member. */
 611:./freertos/src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 558              		.loc 1 611 27
 559 0038 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 25


 560 003a DB68     		ldr	r3, [r3, #12]
 561              		.loc 1 611 50
 562 003c 5A1E     		subs	r2, r3, #1
 563 003e 3B69     		ldr	r3, [r7, #16]
 564 0040 DA60     		str	r2, [r3, #12]
 612:./freertos/src/queue.c **** 
 613:./freertos/src/queue.c **** 			/* Has the recursive call count unwound to 0? */
 614:./freertos/src/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 565              		.loc 1 614 29
 566 0042 3B69     		ldr	r3, [r7, #16]
 567 0044 DB68     		ldr	r3, [r3, #12]
 568              		.loc 1 614 6
 569 0046 002B     		cmp	r3, #0
 570 0048 05D1     		bne	.L26
 615:./freertos/src/queue.c **** 			{
 616:./freertos/src/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 617:./freertos/src/queue.c **** 				task that might be waiting to access the mutex. */
 618:./freertos/src/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 571              		.loc 1 618 14
 572 004a 0023     		movs	r3, #0
 573 004c 0022     		movs	r2, #0
 574 004e 0021     		movs	r1, #0
 575 0050 3869     		ldr	r0, [r7, #16]
 576 0052 FFF7FEFF 		bl	xQueueGenericSend
 577              	.L26:
 619:./freertos/src/queue.c **** 			}
 620:./freertos/src/queue.c **** 			else
 621:./freertos/src/queue.c **** 			{
 622:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 623:./freertos/src/queue.c **** 			}
 624:./freertos/src/queue.c **** 
 625:./freertos/src/queue.c **** 			xReturn = pdPASS;
 578              		.loc 1 625 12
 579 0056 0123     		movs	r3, #1
 580 0058 7B61     		str	r3, [r7, #20]
 581 005a 01E0     		b	.L27
 582              	.L25:
 626:./freertos/src/queue.c **** 		}
 627:./freertos/src/queue.c **** 		else
 628:./freertos/src/queue.c **** 		{
 629:./freertos/src/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 630:./freertos/src/queue.c **** 			holder. */
 631:./freertos/src/queue.c **** 			xReturn = pdFAIL;
 583              		.loc 1 631 12
 584 005c 0023     		movs	r3, #0
 585 005e 7B61     		str	r3, [r7, #20]
 586              	.L27:
 632:./freertos/src/queue.c **** 
 633:./freertos/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 634:./freertos/src/queue.c **** 		}
 635:./freertos/src/queue.c **** 
 636:./freertos/src/queue.c **** 		return xReturn;
 587              		.loc 1 636 10
 588 0060 7B69     		ldr	r3, [r7, #20]
 637:./freertos/src/queue.c **** 	}
 589              		.loc 1 637 2
 590 0062 1846     		mov	r0, r3
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 26


 591 0064 1C37     		adds	r7, r7, #28
 592              	.LCFI28:
 593              		.cfi_def_cfa_offset 12
 594 0066 BD46     		mov	sp, r7
 595              	.LCFI29:
 596              		.cfi_def_cfa_register 13
 597              		@ sp needed
 598 0068 90BD     		pop	{r4, r7, pc}
 599              		.cfi_endproc
 600              	.LFE66:
 602              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 603              		.align	1
 604              		.global	xQueueTakeMutexRecursive
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 609              	xQueueTakeMutexRecursive:
 610              	.LFB67:
 638:./freertos/src/queue.c **** 
 639:./freertos/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 640:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 641:./freertos/src/queue.c **** 
 642:./freertos/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 643:./freertos/src/queue.c **** 
 644:./freertos/src/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 645:./freertos/src/queue.c **** 	{
 611              		.loc 1 645 2
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 24
 614              		@ frame_needed = 1, uses_anonymous_args = 0
 615 0000 90B5     		push	{r4, r7, lr}
 616              	.LCFI30:
 617              		.cfi_def_cfa_offset 12
 618              		.cfi_offset 4, -12
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0002 87B0     		sub	sp, sp, #28
 622              	.LCFI31:
 623              		.cfi_def_cfa_offset 40
 624 0004 00AF     		add	r7, sp, #0
 625              	.LCFI32:
 626              		.cfi_def_cfa_register 7
 627 0006 7860     		str	r0, [r7, #4]
 628 0008 3960     		str	r1, [r7]
 646:./freertos/src/queue.c **** 	BaseType_t xReturn;
 647:./freertos/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 629              		.loc 1 647 18
 630 000a 7B68     		ldr	r3, [r7, #4]
 631 000c 3B61     		str	r3, [r7, #16]
 648:./freertos/src/queue.c **** 
 649:./freertos/src/queue.c **** 		configASSERT( pxMutex );
 632              		.loc 1 649 3
 633 000e 3B69     		ldr	r3, [r7, #16]
 634 0010 002B     		cmp	r3, #0
 635 0012 0BD1     		bne	.L30
 636              	.LBB107:
 637              	.LBB108:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 27


 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 638              		.loc 2 197 2
 639              		.syntax unified
 640              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 641 0014 4FF05003 			mov r3, #80												
 642 0018 83F31188 		msr basepri, r3											
 643 001c BFF36F8F 		isb														
 644 0020 BFF34F8F 		dsb														
 645              	
 646              	@ 0 "" 2
 647              		.thumb
 648              		.syntax unified
 649 0024 FB60     		str	r3, [r7, #12]
 650              		.loc 2 205 1
 651 0026 00BF     		nop
 652              	.L31:
 653              	.LBE108:
 654              	.LBE107:
 655              		.loc 1 649 3
 656 0028 00BF     		nop
 657 002a FDE7     		b	.L31
 658              	.L30:
 650:./freertos/src/queue.c **** 
 651:./freertos/src/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 652:./freertos/src/queue.c **** 		xQueueGiveMutexRecursive(). */
 653:./freertos/src/queue.c **** 
 654:./freertos/src/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 655:./freertos/src/queue.c **** 
 656:./freertos/src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 659              		.loc 1 656 28
 660 002c 3B69     		ldr	r3, [r7, #16]
 661 002e 9C68     		ldr	r4, [r3, #8]
 662              		.loc 1 656 45
 663 0030 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 664 0034 0346     		mov	r3, r0
 665              		.loc 1 656 5 discriminator 1
 666 0036 9C42     		cmp	r4, r3
 667 0038 07D1     		bne	.L32
 657:./freertos/src/queue.c **** 		{
 658:./freertos/src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 668              		.loc 1 658 27
 669 003a 3B69     		ldr	r3, [r7, #16]
 670 003c DB68     		ldr	r3, [r3, #12]
 671              		.loc 1 658 50
 672 003e 5A1C     		adds	r2, r3, #1
 673 0040 3B69     		ldr	r3, [r7, #16]
 674 0042 DA60     		str	r2, [r3, #12]
 659:./freertos/src/queue.c **** 			xReturn = pdPASS;
 675              		.loc 1 659 12
 676 0044 0123     		movs	r3, #1
 677 0046 7B61     		str	r3, [r7, #20]
 678 0048 0CE0     		b	.L33
 679              	.L32:
 660:./freertos/src/queue.c **** 		}
 661:./freertos/src/queue.c **** 		else
 662:./freertos/src/queue.c **** 		{
 663:./freertos/src/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 28


 680              		.loc 1 663 14
 681 004a 3968     		ldr	r1, [r7]
 682 004c 3869     		ldr	r0, [r7, #16]
 683 004e FFF7FEFF 		bl	xQueueSemaphoreTake
 684 0052 7861     		str	r0, [r7, #20]
 664:./freertos/src/queue.c **** 
 665:./freertos/src/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 666:./freertos/src/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 667:./freertos/src/queue.c **** 			before reaching here. */
 668:./freertos/src/queue.c **** 			if( xReturn != pdFAIL )
 685              		.loc 1 668 6
 686 0054 7B69     		ldr	r3, [r7, #20]
 687 0056 002B     		cmp	r3, #0
 688 0058 04D0     		beq	.L33
 669:./freertos/src/queue.c **** 			{
 670:./freertos/src/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 689              		.loc 1 670 28
 690 005a 3B69     		ldr	r3, [r7, #16]
 691 005c DB68     		ldr	r3, [r3, #12]
 692              		.loc 1 670 51
 693 005e 5A1C     		adds	r2, r3, #1
 694 0060 3B69     		ldr	r3, [r7, #16]
 695 0062 DA60     		str	r2, [r3, #12]
 696              	.L33:
 671:./freertos/src/queue.c **** 			}
 672:./freertos/src/queue.c **** 			else
 673:./freertos/src/queue.c **** 			{
 674:./freertos/src/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 675:./freertos/src/queue.c **** 			}
 676:./freertos/src/queue.c **** 		}
 677:./freertos/src/queue.c **** 
 678:./freertos/src/queue.c **** 		return xReturn;
 697              		.loc 1 678 10
 698 0064 7B69     		ldr	r3, [r7, #20]
 679:./freertos/src/queue.c **** 	}
 699              		.loc 1 679 2
 700 0066 1846     		mov	r0, r3
 701 0068 1C37     		adds	r7, r7, #28
 702              	.LCFI33:
 703              		.cfi_def_cfa_offset 12
 704 006a BD46     		mov	sp, r7
 705              	.LCFI34:
 706              		.cfi_def_cfa_register 13
 707              		@ sp needed
 708 006c 90BD     		pop	{r4, r7, pc}
 709              		.cfi_endproc
 710              	.LFE67:
 712              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 713              		.align	1
 714              		.global	xQueueCreateCountingSemaphore
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	xQueueCreateCountingSemaphore:
 720              	.LFB68:
 680:./freertos/src/queue.c **** 
 681:./freertos/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 29


 682:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 683:./freertos/src/queue.c **** 
 684:./freertos/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 685:./freertos/src/queue.c **** 
 686:./freertos/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 687:./freertos/src/queue.c **** 	{
 688:./freertos/src/queue.c **** 	QueueHandle_t xHandle;
 689:./freertos/src/queue.c **** 
 690:./freertos/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 691:./freertos/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 692:./freertos/src/queue.c **** 
 693:./freertos/src/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 694:./freertos/src/queue.c **** 
 695:./freertos/src/queue.c **** 		if( xHandle != NULL )
 696:./freertos/src/queue.c **** 		{
 697:./freertos/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 698:./freertos/src/queue.c **** 
 699:./freertos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 700:./freertos/src/queue.c **** 		}
 701:./freertos/src/queue.c **** 		else
 702:./freertos/src/queue.c **** 		{
 703:./freertos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 704:./freertos/src/queue.c **** 		}
 705:./freertos/src/queue.c **** 
 706:./freertos/src/queue.c **** 		return xHandle;
 707:./freertos/src/queue.c **** 	}
 708:./freertos/src/queue.c **** 
 709:./freertos/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 710:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 711:./freertos/src/queue.c **** 
 712:./freertos/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 713:./freertos/src/queue.c **** 
 714:./freertos/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 715:./freertos/src/queue.c **** 	{
 721              		.loc 1 715 2
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 24
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725 0000 80B5     		push	{r7, lr}
 726              	.LCFI35:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 7, -8
 729              		.cfi_offset 14, -4
 730 0002 86B0     		sub	sp, sp, #24
 731              	.LCFI36:
 732              		.cfi_def_cfa_offset 32
 733 0004 00AF     		add	r7, sp, #0
 734              	.LCFI37:
 735              		.cfi_def_cfa_register 7
 736 0006 7860     		str	r0, [r7, #4]
 737 0008 3960     		str	r1, [r7]
 716:./freertos/src/queue.c **** 	QueueHandle_t xHandle;
 717:./freertos/src/queue.c **** 
 718:./freertos/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 738              		.loc 1 718 3
 739 000a 7B68     		ldr	r3, [r7, #4]
 740 000c 002B     		cmp	r3, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 30


 741 000e 0BD1     		bne	.L36
 742              	.LBB109:
 743              	.LBB110:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 744              		.loc 2 197 2
 745              		.syntax unified
 746              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 747 0010 4FF05003 			mov r3, #80												
 748 0014 83F31188 		msr basepri, r3											
 749 0018 BFF36F8F 		isb														
 750 001c BFF34F8F 		dsb														
 751              	
 752              	@ 0 "" 2
 753              		.thumb
 754              		.syntax unified
 755 0020 3B61     		str	r3, [r7, #16]
 756              		.loc 2 205 1
 757 0022 00BF     		nop
 758              	.L37:
 759              	.LBE110:
 760              	.LBE109:
 761              		.loc 1 718 3
 762 0024 00BF     		nop
 763 0026 FDE7     		b	.L37
 764              	.L36:
 719:./freertos/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 765              		.loc 1 719 3
 766 0028 3A68     		ldr	r2, [r7]
 767 002a 7B68     		ldr	r3, [r7, #4]
 768 002c 9A42     		cmp	r2, r3
 769 002e 0BD9     		bls	.L38
 770              	.LBB111:
 771              	.LBB112:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 772              		.loc 2 197 2
 773              		.syntax unified
 774              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 775 0030 4FF05003 			mov r3, #80												
 776 0034 83F31188 		msr basepri, r3											
 777 0038 BFF36F8F 		isb														
 778 003c BFF34F8F 		dsb														
 779              	
 780              	@ 0 "" 2
 781              		.thumb
 782              		.syntax unified
 783 0040 FB60     		str	r3, [r7, #12]
 784              		.loc 2 205 1
 785 0042 00BF     		nop
 786              	.L39:
 787              	.LBE112:
 788              	.LBE111:
 789              		.loc 1 719 3
 790 0044 00BF     		nop
 791 0046 FDE7     		b	.L39
 792              	.L38:
 720:./freertos/src/queue.c **** 
 721:./freertos/src/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 31


 793              		.loc 1 721 13
 794 0048 0222     		movs	r2, #2
 795 004a 0021     		movs	r1, #0
 796 004c 7868     		ldr	r0, [r7, #4]
 797 004e FFF7FEFF 		bl	xQueueGenericCreate
 798 0052 7861     		str	r0, [r7, #20]
 722:./freertos/src/queue.c **** 
 723:./freertos/src/queue.c **** 		if( xHandle != NULL )
 799              		.loc 1 723 5
 800 0054 7B69     		ldr	r3, [r7, #20]
 801 0056 002B     		cmp	r3, #0
 802 0058 02D0     		beq	.L40
 724:./freertos/src/queue.c **** 		{
 725:./freertos/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 803              		.loc 1 725 49
 804 005a 7B69     		ldr	r3, [r7, #20]
 805 005c 3A68     		ldr	r2, [r7]
 806 005e 9A63     		str	r2, [r3, #56]
 807              	.L40:
 726:./freertos/src/queue.c **** 
 727:./freertos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 728:./freertos/src/queue.c **** 		}
 729:./freertos/src/queue.c **** 		else
 730:./freertos/src/queue.c **** 		{
 731:./freertos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 732:./freertos/src/queue.c **** 		}
 733:./freertos/src/queue.c **** 
 734:./freertos/src/queue.c **** 		return xHandle;
 808              		.loc 1 734 10
 809 0060 7B69     		ldr	r3, [r7, #20]
 735:./freertos/src/queue.c **** 	}
 810              		.loc 1 735 2
 811 0062 1846     		mov	r0, r3
 812 0064 1837     		adds	r7, r7, #24
 813              	.LCFI38:
 814              		.cfi_def_cfa_offset 8
 815 0066 BD46     		mov	sp, r7
 816              	.LCFI39:
 817              		.cfi_def_cfa_register 13
 818              		@ sp needed
 819 0068 80BD     		pop	{r7, pc}
 820              		.cfi_endproc
 821              	.LFE68:
 823              		.section	.text.xQueueGenericSend,"ax",%progbits
 824              		.align	1
 825              		.global	xQueueGenericSend
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 830              	xQueueGenericSend:
 831              	.LFB69:
 736:./freertos/src/queue.c **** 
 737:./freertos/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 738:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 739:./freertos/src/queue.c **** 
 740:./freertos/src/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 741:./freertos/src/queue.c **** {
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 32


 832              		.loc 1 741 1
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 56
 835              		@ frame_needed = 1, uses_anonymous_args = 0
 836 0000 80B5     		push	{r7, lr}
 837              	.LCFI40:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 7, -8
 840              		.cfi_offset 14, -4
 841 0002 8EB0     		sub	sp, sp, #56
 842              	.LCFI41:
 843              		.cfi_def_cfa_offset 64
 844 0004 00AF     		add	r7, sp, #0
 845              	.LCFI42:
 846              		.cfi_def_cfa_register 7
 847 0006 F860     		str	r0, [r7, #12]
 848 0008 B960     		str	r1, [r7, #8]
 849 000a 7A60     		str	r2, [r7, #4]
 850 000c 3B60     		str	r3, [r7]
 742:./freertos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 851              		.loc 1 742 12
 852 000e 0023     		movs	r3, #0
 853 0010 7B63     		str	r3, [r7, #52]
 743:./freertos/src/queue.c **** TimeOut_t xTimeOut;
 744:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 854              		.loc 1 744 17
 855 0012 FB68     		ldr	r3, [r7, #12]
 856 0014 3B63     		str	r3, [r7, #48]
 745:./freertos/src/queue.c **** 
 746:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 857              		.loc 1 746 2
 858 0016 3B6B     		ldr	r3, [r7, #48]
 859 0018 002B     		cmp	r3, #0
 860 001a 0BD1     		bne	.L43
 861              	.LBB113:
 862              	.LBB114:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 863              		.loc 2 197 2
 864              		.syntax unified
 865              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 866 001c 4FF05003 			mov r3, #80												
 867 0020 83F31188 		msr basepri, r3											
 868 0024 BFF36F8F 		isb														
 869 0028 BFF34F8F 		dsb														
 870              	
 871              	@ 0 "" 2
 872              		.thumb
 873              		.syntax unified
 874 002c BB62     		str	r3, [r7, #40]
 875              		.loc 2 205 1
 876 002e 00BF     		nop
 877              	.L44:
 878              	.LBE114:
 879              	.LBE113:
 880              		.loc 1 746 2
 881 0030 00BF     		nop
 882 0032 FDE7     		b	.L44
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 33


 883              	.L43:
 747:./freertos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 884              		.loc 1 747 2
 885 0034 BB68     		ldr	r3, [r7, #8]
 886 0036 002B     		cmp	r3, #0
 887 0038 03D1     		bne	.L45
 888              		.loc 1 747 2 is_stmt 0 discriminator 2
 889 003a 3B6B     		ldr	r3, [r7, #48]
 890 003c 1B6C     		ldr	r3, [r3, #64]
 891 003e 002B     		cmp	r3, #0
 892 0040 01D1     		bne	.L46
 893              	.L45:
 894              		.loc 1 747 2 discriminator 3
 895 0042 0123     		movs	r3, #1
 896              		.loc 1 747 2
 897 0044 00E0     		b	.L47
 898              	.L46:
 899              		.loc 1 747 2 discriminator 4
 900 0046 0023     		movs	r3, #0
 901              	.L47:
 902              		.loc 1 747 2 discriminator 6
 903 0048 002B     		cmp	r3, #0
 904 004a 0BD1     		bne	.L48
 905              	.LBB115:
 906              	.LBB116:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 907              		.loc 2 197 2 is_stmt 1
 908              		.syntax unified
 909              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 910 004c 4FF05003 			mov r3, #80												
 911 0050 83F31188 		msr basepri, r3											
 912 0054 BFF36F8F 		isb														
 913 0058 BFF34F8F 		dsb														
 914              	
 915              	@ 0 "" 2
 916              		.thumb
 917              		.syntax unified
 918 005c 7B62     		str	r3, [r7, #36]
 919              		.loc 2 205 1
 920 005e 00BF     		nop
 921              	.L49:
 922              	.LBE116:
 923              	.LBE115:
 924              		.loc 1 747 2
 925 0060 00BF     		nop
 926 0062 FDE7     		b	.L49
 927              	.L48:
 748:./freertos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 928              		.loc 1 748 2
 929 0064 3B68     		ldr	r3, [r7]
 930 0066 022B     		cmp	r3, #2
 931 0068 03D1     		bne	.L50
 932              		.loc 1 748 2 is_stmt 0 discriminator 2
 933 006a 3B6B     		ldr	r3, [r7, #48]
 934 006c DB6B     		ldr	r3, [r3, #60]
 935 006e 012B     		cmp	r3, #1
 936 0070 01D1     		bne	.L51
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 34


 937              	.L50:
 938              		.loc 1 748 2 discriminator 3
 939 0072 0123     		movs	r3, #1
 940              		.loc 1 748 2
 941 0074 00E0     		b	.L52
 942              	.L51:
 943              		.loc 1 748 2 discriminator 4
 944 0076 0023     		movs	r3, #0
 945              	.L52:
 946              		.loc 1 748 2 discriminator 6
 947 0078 002B     		cmp	r3, #0
 948 007a 0BD1     		bne	.L53
 949              	.LBB117:
 950              	.LBB118:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 951              		.loc 2 197 2 is_stmt 1
 952              		.syntax unified
 953              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 954 007c 4FF05003 			mov r3, #80												
 955 0080 83F31188 		msr basepri, r3											
 956 0084 BFF36F8F 		isb														
 957 0088 BFF34F8F 		dsb														
 958              	
 959              	@ 0 "" 2
 960              		.thumb
 961              		.syntax unified
 962 008c 3B62     		str	r3, [r7, #32]
 963              		.loc 2 205 1
 964 008e 00BF     		nop
 965              	.L54:
 966              	.LBE118:
 967              	.LBE117:
 968              		.loc 1 748 2
 969 0090 00BF     		nop
 970 0092 FDE7     		b	.L54
 971              	.L53:
 749:./freertos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 750:./freertos/src/queue.c **** 	{
 751:./freertos/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 972              		.loc 1 751 3
 973 0094 FFF7FEFF 		bl	xTaskGetSchedulerState
 974 0098 0346     		mov	r3, r0
 975              		.loc 1 751 3 is_stmt 0 discriminator 1
 976 009a 002B     		cmp	r3, #0
 977 009c 02D1     		bne	.L55
 978              		.loc 1 751 3 discriminator 2
 979 009e 7B68     		ldr	r3, [r7, #4]
 980 00a0 002B     		cmp	r3, #0
 981 00a2 01D1     		bne	.L56
 982              	.L55:
 983              		.loc 1 751 3 discriminator 3
 984 00a4 0123     		movs	r3, #1
 985              		.loc 1 751 3
 986 00a6 00E0     		b	.L57
 987              	.L56:
 988              		.loc 1 751 3 discriminator 4
 989 00a8 0023     		movs	r3, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 35


 990              	.L57:
 991              		.loc 1 751 3 discriminator 6
 992 00aa 002B     		cmp	r3, #0
 993 00ac 0BD1     		bne	.L58
 994              	.LBB119:
 995              	.LBB120:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 996              		.loc 2 197 2 is_stmt 1
 997              		.syntax unified
 998              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 999 00ae 4FF05003 			mov r3, #80												
 1000 00b2 83F31188 		msr basepri, r3											
 1001 00b6 BFF36F8F 		isb														
 1002 00ba BFF34F8F 		dsb														
 1003              	
 1004              	@ 0 "" 2
 1005              		.thumb
 1006              		.syntax unified
 1007 00be FB61     		str	r3, [r7, #28]
 1008              		.loc 2 205 1
 1009 00c0 00BF     		nop
 1010              	.L59:
 1011              	.LBE120:
 1012              	.LBE119:
 1013              		.loc 1 751 3
 1014 00c2 00BF     		nop
 1015 00c4 FDE7     		b	.L59
 1016              	.L58:
 752:./freertos/src/queue.c **** 	}
 753:./freertos/src/queue.c **** 	#endif
 754:./freertos/src/queue.c **** 
 755:./freertos/src/queue.c **** 
 756:./freertos/src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 757:./freertos/src/queue.c **** 	allow return statements within the function itself.  This is done in the
 758:./freertos/src/queue.c **** 	interest of execution time efficiency. */
 759:./freertos/src/queue.c **** 	for( ;; )
 760:./freertos/src/queue.c **** 	{
 761:./freertos/src/queue.c **** 		taskENTER_CRITICAL();
 1017              		.loc 1 761 3
 1018 00c6 FFF7FEFF 		bl	vPortEnterCritical
 762:./freertos/src/queue.c **** 		{
 763:./freertos/src/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 764:./freertos/src/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 765:./freertos/src/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 766:./freertos/src/queue.c **** 			queue is full. */
 767:./freertos/src/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1019              		.loc 1 767 17
 1020 00ca 3B6B     		ldr	r3, [r7, #48]
 1021 00cc 9A6B     		ldr	r2, [r3, #56]
 1022              		.loc 1 767 46
 1023 00ce 3B6B     		ldr	r3, [r7, #48]
 1024 00d0 DB6B     		ldr	r3, [r3, #60]
 1025              		.loc 1 767 6
 1026 00d2 9A42     		cmp	r2, r3
 1027 00d4 02D3     		bcc	.L60
 1028              		.loc 1 767 59 discriminator 1
 1029 00d6 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 36


 1030 00d8 022B     		cmp	r3, #2
 1031 00da 29D1     		bne	.L61
 1032              	.L60:
 768:./freertos/src/queue.c **** 			{
 769:./freertos/src/queue.c **** 				traceQUEUE_SEND( pxQueue );
 770:./freertos/src/queue.c **** 
 771:./freertos/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 772:./freertos/src/queue.c **** 				{
 773:./freertos/src/queue.c **** 				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 774:./freertos/src/queue.c **** 
 775:./freertos/src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 776:./freertos/src/queue.c **** 
 777:./freertos/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 778:./freertos/src/queue.c **** 					{
 779:./freertos/src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 780:./freertos/src/queue.c **** 						{
 781:./freertos/src/queue.c **** 							/* Do not notify the queue set as an existing item
 782:./freertos/src/queue.c **** 							was overwritten in the queue so the number of items
 783:./freertos/src/queue.c **** 							in the queue has not changed. */
 784:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 785:./freertos/src/queue.c **** 						}
 786:./freertos/src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 787:./freertos/src/queue.c **** 						{
 788:./freertos/src/queue.c **** 							/* The queue is a member of a queue set, and posting
 789:./freertos/src/queue.c **** 							to the queue set caused a higher priority task to
 790:./freertos/src/queue.c **** 							unblock. A context switch is required. */
 791:./freertos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 792:./freertos/src/queue.c **** 						}
 793:./freertos/src/queue.c **** 						else
 794:./freertos/src/queue.c **** 						{
 795:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 796:./freertos/src/queue.c **** 						}
 797:./freertos/src/queue.c **** 					}
 798:./freertos/src/queue.c **** 					else
 799:./freertos/src/queue.c **** 					{
 800:./freertos/src/queue.c **** 						/* If there was a task waiting for data to arrive on the
 801:./freertos/src/queue.c **** 						queue then unblock it now. */
 802:./freertos/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 803:./freertos/src/queue.c **** 						{
 804:./freertos/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805:./freertos/src/queue.c **** 							{
 806:./freertos/src/queue.c **** 								/* The unblocked task has a priority higher than
 807:./freertos/src/queue.c **** 								our own so yield immediately.  Yes it is ok to
 808:./freertos/src/queue.c **** 								do this from within the critical section - the
 809:./freertos/src/queue.c **** 								kernel takes care of that. */
 810:./freertos/src/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 811:./freertos/src/queue.c **** 							}
 812:./freertos/src/queue.c **** 							else
 813:./freertos/src/queue.c **** 							{
 814:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 815:./freertos/src/queue.c **** 							}
 816:./freertos/src/queue.c **** 						}
 817:./freertos/src/queue.c **** 						else if( xYieldRequired != pdFALSE )
 818:./freertos/src/queue.c **** 						{
 819:./freertos/src/queue.c **** 							/* This path is a special case that will only get
 820:./freertos/src/queue.c **** 							executed if the task was holding multiple mutexes
 821:./freertos/src/queue.c **** 							and the mutexes were given back in an order that is
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 37


 822:./freertos/src/queue.c **** 							different to that in which they were taken. */
 823:./freertos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 824:./freertos/src/queue.c **** 						}
 825:./freertos/src/queue.c **** 						else
 826:./freertos/src/queue.c **** 						{
 827:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 828:./freertos/src/queue.c **** 						}
 829:./freertos/src/queue.c **** 					}
 830:./freertos/src/queue.c **** 				}
 831:./freertos/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 832:./freertos/src/queue.c **** 				{
 833:./freertos/src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1033              		.loc 1 833 23
 1034 00dc 3A68     		ldr	r2, [r7]
 1035 00de B968     		ldr	r1, [r7, #8]
 1036 00e0 386B     		ldr	r0, [r7, #48]
 1037 00e2 FFF7FEFF 		bl	prvCopyDataToQueue
 1038 00e6 F862     		str	r0, [r7, #44]
 834:./freertos/src/queue.c **** 
 835:./freertos/src/queue.c **** 					/* If there was a task waiting for data to arrive on the
 836:./freertos/src/queue.c **** 					queue then unblock it now. */
 837:./freertos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1039              		.loc 1 837 10
 1040 00e8 3B6B     		ldr	r3, [r7, #48]
 1041 00ea 5B6A     		ldr	r3, [r3, #36]
 1042              		.loc 1 837 8
 1043 00ec 002B     		cmp	r3, #0
 1044 00ee 10D0     		beq	.L62
 838:./freertos/src/queue.c **** 					{
 839:./freertos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1045              		.loc 1 839 37
 1046 00f0 3B6B     		ldr	r3, [r7, #48]
 1047 00f2 2433     		adds	r3, r3, #36
 1048              		.loc 1 839 11
 1049 00f4 1846     		mov	r0, r3
 1050 00f6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1051 00fa 0346     		mov	r3, r0
 1052              		.loc 1 839 9 discriminator 1
 1053 00fc 002B     		cmp	r3, #0
 1054 00fe 13D0     		beq	.L63
 840:./freertos/src/queue.c **** 						{
 841:./freertos/src/queue.c **** 							/* The unblocked task has a priority higher than
 842:./freertos/src/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 843:./freertos/src/queue.c **** 							this from within the critical section - the kernel
 844:./freertos/src/queue.c **** 							takes care of that. */
 845:./freertos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 1055              		.loc 1 845 8
 1056 0100 3F4B     		ldr	r3, .L73
 1057 0102 4FF08052 		mov	r2, #268435456
 1058 0106 1A60     		str	r2, [r3]
 1059              		.syntax unified
 1060              	@ 845 "./freertos/src/queue.c" 1
 1061 0108 BFF34F8F 		dsb
 1062              	@ 0 "" 2
 1063              	@ 845 "./freertos/src/queue.c" 1
 1064 010c BFF36F8F 		isb
 1065              	@ 0 "" 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 38


 1066              		.thumb
 1067              		.syntax unified
 1068 0110 0AE0     		b	.L63
 1069              	.L62:
 846:./freertos/src/queue.c **** 						}
 847:./freertos/src/queue.c **** 						else
 848:./freertos/src/queue.c **** 						{
 849:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 850:./freertos/src/queue.c **** 						}
 851:./freertos/src/queue.c **** 					}
 852:./freertos/src/queue.c **** 					else if( xYieldRequired != pdFALSE )
 1070              		.loc 1 852 13
 1071 0112 FB6A     		ldr	r3, [r7, #44]
 1072 0114 002B     		cmp	r3, #0
 1073 0116 07D0     		beq	.L63
 853:./freertos/src/queue.c **** 					{
 854:./freertos/src/queue.c **** 						/* This path is a special case that will only get
 855:./freertos/src/queue.c **** 						executed if the task was holding multiple mutexes and
 856:./freertos/src/queue.c **** 						the mutexes were given back in an order that is
 857:./freertos/src/queue.c **** 						different to that in which they were taken. */
 858:./freertos/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1074              		.loc 1 858 7
 1075 0118 394B     		ldr	r3, .L73
 1076 011a 4FF08052 		mov	r2, #268435456
 1077 011e 1A60     		str	r2, [r3]
 1078              		.syntax unified
 1079              	@ 858 "./freertos/src/queue.c" 1
 1080 0120 BFF34F8F 		dsb
 1081              	@ 0 "" 2
 1082              	@ 858 "./freertos/src/queue.c" 1
 1083 0124 BFF36F8F 		isb
 1084              	@ 0 "" 2
 1085              		.thumb
 1086              		.syntax unified
 1087              	.L63:
 859:./freertos/src/queue.c **** 					}
 860:./freertos/src/queue.c **** 					else
 861:./freertos/src/queue.c **** 					{
 862:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 863:./freertos/src/queue.c **** 					}
 864:./freertos/src/queue.c **** 				}
 865:./freertos/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 866:./freertos/src/queue.c **** 
 867:./freertos/src/queue.c **** 				taskEXIT_CRITICAL();
 1088              		.loc 1 867 5
 1089 0128 FFF7FEFF 		bl	vPortExitCritical
 868:./freertos/src/queue.c **** 				return pdPASS;
 1090              		.loc 1 868 12
 1091 012c 0123     		movs	r3, #1
 1092 012e 63E0     		b	.L72
 1093              	.L61:
 869:./freertos/src/queue.c **** 			}
 870:./freertos/src/queue.c **** 			else
 871:./freertos/src/queue.c **** 			{
 872:./freertos/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1094              		.loc 1 872 22
 1095 0130 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 39


 1096              		.loc 1 872 7
 1097 0132 002B     		cmp	r3, #0
 1098 0134 03D1     		bne	.L65
 873:./freertos/src/queue.c **** 				{
 874:./freertos/src/queue.c **** 					/* The queue was full and no block time is specified (or
 875:./freertos/src/queue.c **** 					the block time has expired) so leave now. */
 876:./freertos/src/queue.c **** 					taskEXIT_CRITICAL();
 1099              		.loc 1 876 6
 1100 0136 FFF7FEFF 		bl	vPortExitCritical
 877:./freertos/src/queue.c **** 
 878:./freertos/src/queue.c **** 					/* Return to the original privilege level before exiting
 879:./freertos/src/queue.c **** 					the function. */
 880:./freertos/src/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 881:./freertos/src/queue.c **** 					return errQUEUE_FULL;
 1101              		.loc 1 881 13
 1102 013a 0023     		movs	r3, #0
 1103 013c 5CE0     		b	.L72
 1104              	.L65:
 882:./freertos/src/queue.c **** 				}
 883:./freertos/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1105              		.loc 1 883 12
 1106 013e 7B6B     		ldr	r3, [r7, #52]
 1107 0140 002B     		cmp	r3, #0
 1108 0142 06D1     		bne	.L66
 884:./freertos/src/queue.c **** 				{
 885:./freertos/src/queue.c **** 					/* The queue was full and a block time was specified so
 886:./freertos/src/queue.c **** 					configure the timeout structure. */
 887:./freertos/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1109              		.loc 1 887 6
 1110 0144 07F11403 		add	r3, r7, #20
 1111 0148 1846     		mov	r0, r3
 1112 014a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 888:./freertos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1113              		.loc 1 888 20
 1114 014e 0123     		movs	r3, #1
 1115 0150 7B63     		str	r3, [r7, #52]
 1116              	.L66:
 889:./freertos/src/queue.c **** 				}
 890:./freertos/src/queue.c **** 				else
 891:./freertos/src/queue.c **** 				{
 892:./freertos/src/queue.c **** 					/* Entry time was already set. */
 893:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 894:./freertos/src/queue.c **** 				}
 895:./freertos/src/queue.c **** 			}
 896:./freertos/src/queue.c **** 		}
 897:./freertos/src/queue.c **** 		taskEXIT_CRITICAL();
 1117              		.loc 1 897 3
 1118 0152 FFF7FEFF 		bl	vPortExitCritical
 898:./freertos/src/queue.c **** 
 899:./freertos/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 900:./freertos/src/queue.c **** 		now the critical section has been exited. */
 901:./freertos/src/queue.c **** 
 902:./freertos/src/queue.c **** 		vTaskSuspendAll();
 1119              		.loc 1 902 3
 1120 0156 FFF7FEFF 		bl	vTaskSuspendAll
 903:./freertos/src/queue.c **** 		prvLockQueue( pxQueue );
 1121              		.loc 1 903 3
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 40


 1122 015a FFF7FEFF 		bl	vPortEnterCritical
 1123              		.loc 1 903 3 is_stmt 0 discriminator 1
 1124 015e 3B6B     		ldr	r3, [r7, #48]
 1125 0160 93F84430 		ldrb	r3, [r3, #68]
 1126 0164 5BB2     		sxtb	r3, r3
 1127 0166 B3F1FF3F 		cmp	r3, #-1
 1128 016a 03D1     		bne	.L67
 1129 016c 3B6B     		ldr	r3, [r7, #48]
 1130 016e 0022     		movs	r2, #0
 1131 0170 83F84420 		strb	r2, [r3, #68]
 1132              	.L67:
 1133              		.loc 1 903 3 discriminator 3
 1134 0174 3B6B     		ldr	r3, [r7, #48]
 1135 0176 93F84530 		ldrb	r3, [r3, #69]
 1136 017a 5BB2     		sxtb	r3, r3
 1137 017c B3F1FF3F 		cmp	r3, #-1
 1138 0180 03D1     		bne	.L68
 1139              		.loc 1 903 3 discriminator 4
 1140 0182 3B6B     		ldr	r3, [r7, #48]
 1141 0184 0022     		movs	r2, #0
 1142 0186 83F84520 		strb	r2, [r3, #69]
 1143              	.L68:
 1144              		.loc 1 903 3 discriminator 6
 1145 018a FFF7FEFF 		bl	vPortExitCritical
 904:./freertos/src/queue.c **** 
 905:./freertos/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 906:./freertos/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1146              		.loc 1 906 7 is_stmt 1
 1147 018e 3A1D     		adds	r2, r7, #4
 1148 0190 07F11403 		add	r3, r7, #20
 1149 0194 1146     		mov	r1, r2
 1150 0196 1846     		mov	r0, r3
 1151 0198 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1152 019c 0346     		mov	r3, r0
 1153              		.loc 1 906 5 discriminator 1
 1154 019e 002B     		cmp	r3, #0
 1155 01a0 24D1     		bne	.L69
 907:./freertos/src/queue.c **** 		{
 908:./freertos/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1156              		.loc 1 908 8
 1157 01a2 386B     		ldr	r0, [r7, #48]
 1158 01a4 FFF7FEFF 		bl	prvIsQueueFull
 1159 01a8 0346     		mov	r3, r0
 1160              		.loc 1 908 6 discriminator 1
 1161 01aa 002B     		cmp	r3, #0
 1162 01ac 18D0     		beq	.L70
 909:./freertos/src/queue.c **** 			{
 910:./freertos/src/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 911:./freertos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1163              		.loc 1 911 5
 1164 01ae 3B6B     		ldr	r3, [r7, #48]
 1165 01b0 1033     		adds	r3, r3, #16
 1166 01b2 7A68     		ldr	r2, [r7, #4]
 1167 01b4 1146     		mov	r1, r2
 1168 01b6 1846     		mov	r0, r3
 1169 01b8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 912:./freertos/src/queue.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 41


 913:./freertos/src/queue.c **** 				/* Unlocking the queue means queue events can effect the
 914:./freertos/src/queue.c **** 				event list.  It is possible that interrupts occurring now
 915:./freertos/src/queue.c **** 				remove this task from the event list again - but as the
 916:./freertos/src/queue.c **** 				scheduler is suspended the task will go onto the pending
 917:./freertos/src/queue.c **** 				ready last instead of the actual ready list. */
 918:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 1170              		.loc 1 918 5
 1171 01bc 386B     		ldr	r0, [r7, #48]
 1172 01be FFF7FEFF 		bl	prvUnlockQueue
 919:./freertos/src/queue.c **** 
 920:./freertos/src/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 921:./freertos/src/queue.c **** 				ready list into the ready list - so it is feasible that this
 922:./freertos/src/queue.c **** 				task is already in a ready list before it yields - in which
 923:./freertos/src/queue.c **** 				case the yield will not cause a context switch unless there
 924:./freertos/src/queue.c **** 				is also a higher priority task in the pending ready list. */
 925:./freertos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1173              		.loc 1 925 9
 1174 01c2 FFF7FEFF 		bl	xTaskResumeAll
 1175 01c6 0346     		mov	r3, r0
 1176              		.loc 1 925 7 discriminator 1
 1177 01c8 002B     		cmp	r3, #0
 1178 01ca 7FF47CAF 		bne	.L58
 926:./freertos/src/queue.c **** 				{
 927:./freertos/src/queue.c **** 					portYIELD_WITHIN_API();
 1179              		.loc 1 927 6
 1180 01ce 0C4B     		ldr	r3, .L73
 1181 01d0 4FF08052 		mov	r2, #268435456
 1182 01d4 1A60     		str	r2, [r3]
 1183              		.syntax unified
 1184              	@ 927 "./freertos/src/queue.c" 1
 1185 01d6 BFF34F8F 		dsb
 1186              	@ 0 "" 2
 1187              	@ 927 "./freertos/src/queue.c" 1
 1188 01da BFF36F8F 		isb
 1189              	@ 0 "" 2
 1190              		.thumb
 1191              		.syntax unified
 1192 01de 72E7     		b	.L58
 1193              	.L70:
 928:./freertos/src/queue.c **** 				}
 929:./freertos/src/queue.c **** 			}
 930:./freertos/src/queue.c **** 			else
 931:./freertos/src/queue.c **** 			{
 932:./freertos/src/queue.c **** 				/* Try again. */
 933:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 1194              		.loc 1 933 5
 1195 01e0 386B     		ldr	r0, [r7, #48]
 1196 01e2 FFF7FEFF 		bl	prvUnlockQueue
 934:./freertos/src/queue.c **** 				( void ) xTaskResumeAll();
 1197              		.loc 1 934 14
 1198 01e6 FFF7FEFF 		bl	xTaskResumeAll
 1199 01ea 6CE7     		b	.L58
 1200              	.L69:
 935:./freertos/src/queue.c **** 			}
 936:./freertos/src/queue.c **** 		}
 937:./freertos/src/queue.c **** 		else
 938:./freertos/src/queue.c **** 		{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 42


 939:./freertos/src/queue.c **** 			/* The timeout has expired. */
 940:./freertos/src/queue.c **** 			prvUnlockQueue( pxQueue );
 1201              		.loc 1 940 4
 1202 01ec 386B     		ldr	r0, [r7, #48]
 1203 01ee FFF7FEFF 		bl	prvUnlockQueue
 941:./freertos/src/queue.c **** 			( void ) xTaskResumeAll();
 1204              		.loc 1 941 13
 1205 01f2 FFF7FEFF 		bl	xTaskResumeAll
 942:./freertos/src/queue.c **** 
 943:./freertos/src/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 944:./freertos/src/queue.c **** 			return errQUEUE_FULL;
 1206              		.loc 1 944 11
 1207 01f6 0023     		movs	r3, #0
 1208              	.L72:
 945:./freertos/src/queue.c **** 		}
 946:./freertos/src/queue.c **** 	} /*lint -restore */
 947:./freertos/src/queue.c **** }
 1209              		.loc 1 947 1
 1210 01f8 1846     		mov	r0, r3
 1211 01fa 3837     		adds	r7, r7, #56
 1212              	.LCFI43:
 1213              		.cfi_def_cfa_offset 8
 1214 01fc BD46     		mov	sp, r7
 1215              	.LCFI44:
 1216              		.cfi_def_cfa_register 13
 1217              		@ sp needed
 1218 01fe 80BD     		pop	{r7, pc}
 1219              	.L74:
 1220              		.align	2
 1221              	.L73:
 1222 0200 04ED00E0 		.word	-536810236
 1223              		.cfi_endproc
 1224              	.LFE69:
 1226              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1227              		.align	1
 1228              		.global	xQueueGenericSendFromISR
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1233              	xQueueGenericSendFromISR:
 1234              	.LFB70:
 948:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
 949:./freertos/src/queue.c **** 
 950:./freertos/src/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 951:./freertos/src/queue.c **** {
 1235              		.loc 1 951 1
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 64
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239 0000 80B5     		push	{r7, lr}
 1240              	.LCFI45:
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 7, -8
 1243              		.cfi_offset 14, -4
 1244 0002 90B0     		sub	sp, sp, #64
 1245              	.LCFI46:
 1246              		.cfi_def_cfa_offset 72
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 43


 1247 0004 00AF     		add	r7, sp, #0
 1248              	.LCFI47:
 1249              		.cfi_def_cfa_register 7
 1250 0006 F860     		str	r0, [r7, #12]
 1251 0008 B960     		str	r1, [r7, #8]
 1252 000a 7A60     		str	r2, [r7, #4]
 1253 000c 3B60     		str	r3, [r7]
 952:./freertos/src/queue.c **** BaseType_t xReturn;
 953:./freertos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 954:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1254              		.loc 1 954 17
 1255 000e FB68     		ldr	r3, [r7, #12]
 1256 0010 BB63     		str	r3, [r7, #56]
 955:./freertos/src/queue.c **** 
 956:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 1257              		.loc 1 956 2
 1258 0012 BB6B     		ldr	r3, [r7, #56]
 1259 0014 002B     		cmp	r3, #0
 1260 0016 0BD1     		bne	.L76
 1261              	.LBB121:
 1262              	.LBB122:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1263              		.loc 2 197 2
 1264              		.syntax unified
 1265              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1266 0018 4FF05003 			mov r3, #80												
 1267 001c 83F31188 		msr basepri, r3											
 1268 0020 BFF36F8F 		isb														
 1269 0024 BFF34F8F 		dsb														
 1270              	
 1271              	@ 0 "" 2
 1272              		.thumb
 1273              		.syntax unified
 1274 0028 BB62     		str	r3, [r7, #40]
 1275              		.loc 2 205 1
 1276 002a 00BF     		nop
 1277              	.L77:
 1278              	.LBE122:
 1279              	.LBE121:
 1280              		.loc 1 956 2
 1281 002c 00BF     		nop
 1282 002e FDE7     		b	.L77
 1283              	.L76:
 957:./freertos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1284              		.loc 1 957 2
 1285 0030 BB68     		ldr	r3, [r7, #8]
 1286 0032 002B     		cmp	r3, #0
 1287 0034 03D1     		bne	.L78
 1288              		.loc 1 957 2 is_stmt 0 discriminator 2
 1289 0036 BB6B     		ldr	r3, [r7, #56]
 1290 0038 1B6C     		ldr	r3, [r3, #64]
 1291 003a 002B     		cmp	r3, #0
 1292 003c 01D1     		bne	.L79
 1293              	.L78:
 1294              		.loc 1 957 2 discriminator 3
 1295 003e 0123     		movs	r3, #1
 1296              		.loc 1 957 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 44


 1297 0040 00E0     		b	.L80
 1298              	.L79:
 1299              		.loc 1 957 2 discriminator 4
 1300 0042 0023     		movs	r3, #0
 1301              	.L80:
 1302              		.loc 1 957 2 discriminator 6
 1303 0044 002B     		cmp	r3, #0
 1304 0046 0BD1     		bne	.L81
 1305              	.LBB123:
 1306              	.LBB124:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1307              		.loc 2 197 2 is_stmt 1
 1308              		.syntax unified
 1309              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1310 0048 4FF05003 			mov r3, #80												
 1311 004c 83F31188 		msr basepri, r3											
 1312 0050 BFF36F8F 		isb														
 1313 0054 BFF34F8F 		dsb														
 1314              	
 1315              	@ 0 "" 2
 1316              		.thumb
 1317              		.syntax unified
 1318 0058 7B62     		str	r3, [r7, #36]
 1319              		.loc 2 205 1
 1320 005a 00BF     		nop
 1321              	.L82:
 1322              	.LBE124:
 1323              	.LBE123:
 1324              		.loc 1 957 2
 1325 005c 00BF     		nop
 1326 005e FDE7     		b	.L82
 1327              	.L81:
 958:./freertos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1328              		.loc 1 958 2
 1329 0060 3B68     		ldr	r3, [r7]
 1330 0062 022B     		cmp	r3, #2
 1331 0064 03D1     		bne	.L83
 1332              		.loc 1 958 2 is_stmt 0 discriminator 2
 1333 0066 BB6B     		ldr	r3, [r7, #56]
 1334 0068 DB6B     		ldr	r3, [r3, #60]
 1335 006a 012B     		cmp	r3, #1
 1336 006c 01D1     		bne	.L84
 1337              	.L83:
 1338              		.loc 1 958 2 discriminator 3
 1339 006e 0123     		movs	r3, #1
 1340              		.loc 1 958 2
 1341 0070 00E0     		b	.L85
 1342              	.L84:
 1343              		.loc 1 958 2 discriminator 4
 1344 0072 0023     		movs	r3, #0
 1345              	.L85:
 1346              		.loc 1 958 2 discriminator 6
 1347 0074 002B     		cmp	r3, #0
 1348 0076 0BD1     		bne	.L86
 1349              	.LBB125:
 1350              	.LBB126:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 45


 1351              		.loc 2 197 2 is_stmt 1
 1352              		.syntax unified
 1353              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1354 0078 4FF05003 			mov r3, #80												
 1355 007c 83F31188 		msr basepri, r3											
 1356 0080 BFF36F8F 		isb														
 1357 0084 BFF34F8F 		dsb														
 1358              	
 1359              	@ 0 "" 2
 1360              		.thumb
 1361              		.syntax unified
 1362 0088 3B62     		str	r3, [r7, #32]
 1363              		.loc 2 205 1
 1364 008a 00BF     		nop
 1365              	.L87:
 1366              	.LBE126:
 1367              	.LBE125:
 1368              		.loc 1 958 2
 1369 008c 00BF     		nop
 1370 008e FDE7     		b	.L87
 1371              	.L86:
 959:./freertos/src/queue.c **** 
 960:./freertos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 961:./freertos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 962:./freertos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 963:./freertos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 964:./freertos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 965:./freertos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 966:./freertos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 967:./freertos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
 968:./freertos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 969:./freertos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 970:./freertos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 971:./freertos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 972:./freertos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 973:./freertos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 974:./freertos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1372              		.loc 1 974 2
 1373 0090 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1374              	.LBB127:
 1375              	.LBB128:
 206:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 207:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 209:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 211:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1376              		.loc 2 213 2
 1377              		.syntax unified
 1378              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1379 0094 EFF31182 			mrs r2, basepri											
 1380 0098 4FF05003 		mov r3, #80												
 1381 009c 83F31188 		msr basepri, r3											
 1382 00a0 BFF36F8F 		isb														
 1383 00a4 BFF34F8F 		dsb														
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 46


 1384              	
 1385              	@ 0 "" 2
 1386              		.thumb
 1387              		.syntax unified
 1388 00a8 FA61     		str	r2, [r7, #28]
 1389 00aa BB61     		str	r3, [r7, #24]
 214:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 215:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	);
 222:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 223:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1390              		.loc 2 225 9
 1391 00ac FB69     		ldr	r3, [r7, #28]
 1392              	.LBE128:
 1393              	.LBE127:
 975:./freertos/src/queue.c **** 
 976:./freertos/src/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 977:./freertos/src/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 978:./freertos/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 979:./freertos/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 980:./freertos/src/queue.c **** 	post). */
 981:./freertos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1394              		.loc 1 981 27
 1395 00ae 7B63     		str	r3, [r7, #52]
 982:./freertos/src/queue.c **** 	{
 983:./freertos/src/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1396              		.loc 1 983 16
 1397 00b0 BB6B     		ldr	r3, [r7, #56]
 1398 00b2 9A6B     		ldr	r2, [r3, #56]
 1399              		.loc 1 983 45
 1400 00b4 BB6B     		ldr	r3, [r7, #56]
 1401 00b6 DB6B     		ldr	r3, [r3, #60]
 1402              		.loc 1 983 5
 1403 00b8 9A42     		cmp	r2, r3
 1404 00ba 02D3     		bcc	.L89
 1405              		.loc 1 983 58 discriminator 1
 1406 00bc 3B68     		ldr	r3, [r7]
 1407 00be 022B     		cmp	r3, #2
 1408 00c0 2FD1     		bne	.L90
 1409              	.L89:
 1410              	.LBB129:
 984:./freertos/src/queue.c **** 		{
 985:./freertos/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1411              		.loc 1 985 17
 1412 00c2 BB6B     		ldr	r3, [r7, #56]
 1413 00c4 93F84530 		ldrb	r3, [r3, #69]
 1414 00c8 87F83330 		strb	r3, [r7, #51]
 986:./freertos/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1415              		.loc 1 986 22
 1416 00cc BB6B     		ldr	r3, [r7, #56]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 47


 1417 00ce 9B6B     		ldr	r3, [r3, #56]
 1418 00d0 FB62     		str	r3, [r7, #44]
 987:./freertos/src/queue.c **** 
 988:./freertos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 989:./freertos/src/queue.c **** 
 990:./freertos/src/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 991:./freertos/src/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 992:./freertos/src/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 993:./freertos/src/queue.c **** 			called here even though the disinherit function does not check if
 994:./freertos/src/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 995:./freertos/src/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1419              		.loc 1 995 13
 1420 00d2 3A68     		ldr	r2, [r7]
 1421 00d4 B968     		ldr	r1, [r7, #8]
 1422 00d6 B86B     		ldr	r0, [r7, #56]
 1423 00d8 FFF7FEFF 		bl	prvCopyDataToQueue
 996:./freertos/src/queue.c **** 
 997:./freertos/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 998:./freertos/src/queue.c **** 			be done when the queue is unlocked later. */
 999:./freertos/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1424              		.loc 1 999 6
 1425 00dc 97F93330 		ldrsb	r3, [r7, #51]
 1426 00e0 B3F1FF3F 		cmp	r3, #-1
 1427 00e4 12D1     		bne	.L91
1000:./freertos/src/queue.c **** 			{
1001:./freertos/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1002:./freertos/src/queue.c **** 				{
1003:./freertos/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1004:./freertos/src/queue.c **** 					{
1005:./freertos/src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
1006:./freertos/src/queue.c **** 						{
1007:./freertos/src/queue.c **** 							/* Do not notify the queue set as an existing item
1008:./freertos/src/queue.c **** 							was overwritten in the queue so the number of items
1009:./freertos/src/queue.c **** 							in the queue has not changed. */
1010:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1011:./freertos/src/queue.c **** 						}
1012:./freertos/src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1013:./freertos/src/queue.c **** 						{
1014:./freertos/src/queue.c **** 							/* The queue is a member of a queue set, and posting
1015:./freertos/src/queue.c **** 							to the queue set caused a higher priority task to
1016:./freertos/src/queue.c **** 							unblock.  A context switch is required. */
1017:./freertos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1018:./freertos/src/queue.c **** 							{
1019:./freertos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1020:./freertos/src/queue.c **** 							}
1021:./freertos/src/queue.c **** 							else
1022:./freertos/src/queue.c **** 							{
1023:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1024:./freertos/src/queue.c **** 							}
1025:./freertos/src/queue.c **** 						}
1026:./freertos/src/queue.c **** 						else
1027:./freertos/src/queue.c **** 						{
1028:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1029:./freertos/src/queue.c **** 						}
1030:./freertos/src/queue.c **** 					}
1031:./freertos/src/queue.c **** 					else
1032:./freertos/src/queue.c **** 					{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 48


1033:./freertos/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1034:./freertos/src/queue.c **** 						{
1035:./freertos/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1036:./freertos/src/queue.c **** 							{
1037:./freertos/src/queue.c **** 								/* The task waiting has a higher priority so
1038:./freertos/src/queue.c **** 								record that a context switch is required. */
1039:./freertos/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1040:./freertos/src/queue.c **** 								{
1041:./freertos/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1042:./freertos/src/queue.c **** 								}
1043:./freertos/src/queue.c **** 								else
1044:./freertos/src/queue.c **** 								{
1045:./freertos/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1046:./freertos/src/queue.c **** 								}
1047:./freertos/src/queue.c **** 							}
1048:./freertos/src/queue.c **** 							else
1049:./freertos/src/queue.c **** 							{
1050:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1051:./freertos/src/queue.c **** 							}
1052:./freertos/src/queue.c **** 						}
1053:./freertos/src/queue.c **** 						else
1054:./freertos/src/queue.c **** 						{
1055:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1056:./freertos/src/queue.c **** 						}
1057:./freertos/src/queue.c **** 					}
1058:./freertos/src/queue.c **** 				}
1059:./freertos/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1060:./freertos/src/queue.c **** 				{
1061:./freertos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1428              		.loc 1 1061 10
 1429 00e6 BB6B     		ldr	r3, [r7, #56]
 1430 00e8 5B6A     		ldr	r3, [r3, #36]
 1431              		.loc 1 1061 8
 1432 00ea 002B     		cmp	r3, #0
 1433 00ec 16D0     		beq	.L92
1062:./freertos/src/queue.c **** 					{
1063:./freertos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1434              		.loc 1 1063 37
 1435 00ee BB6B     		ldr	r3, [r7, #56]
 1436 00f0 2433     		adds	r3, r3, #36
 1437              		.loc 1 1063 11
 1438 00f2 1846     		mov	r0, r3
 1439 00f4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1440 00f8 0346     		mov	r3, r0
 1441              		.loc 1 1063 9 discriminator 1
 1442 00fa 002B     		cmp	r3, #0
 1443 00fc 0ED0     		beq	.L92
1064:./freertos/src/queue.c **** 						{
1065:./freertos/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1066:./freertos/src/queue.c **** 							context	switch is required. */
1067:./freertos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1444              		.loc 1 1067 10
 1445 00fe 7B68     		ldr	r3, [r7, #4]
 1446 0100 002B     		cmp	r3, #0
 1447 0102 0BD0     		beq	.L92
1068:./freertos/src/queue.c **** 							{
1069:./freertos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 49


 1448              		.loc 1 1069 36
 1449 0104 7B68     		ldr	r3, [r7, #4]
 1450 0106 0122     		movs	r2, #1
 1451 0108 1A60     		str	r2, [r3]
 1452 010a 07E0     		b	.L92
 1453              	.L91:
1070:./freertos/src/queue.c **** 							}
1071:./freertos/src/queue.c **** 							else
1072:./freertos/src/queue.c **** 							{
1073:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1074:./freertos/src/queue.c **** 							}
1075:./freertos/src/queue.c **** 						}
1076:./freertos/src/queue.c **** 						else
1077:./freertos/src/queue.c **** 						{
1078:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1079:./freertos/src/queue.c **** 						}
1080:./freertos/src/queue.c **** 					}
1081:./freertos/src/queue.c **** 					else
1082:./freertos/src/queue.c **** 					{
1083:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1084:./freertos/src/queue.c **** 					}
1085:./freertos/src/queue.c **** 					
1086:./freertos/src/queue.c **** 					/* Not used in this path. */
1087:./freertos/src/queue.c **** 					( void ) uxPreviousMessagesWaiting;
1088:./freertos/src/queue.c **** 				}
1089:./freertos/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1090:./freertos/src/queue.c **** 			}
1091:./freertos/src/queue.c **** 			else
1092:./freertos/src/queue.c **** 			{
1093:./freertos/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1094:./freertos/src/queue.c **** 				knows that data was posted while it was locked. */
1095:./freertos/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1454              		.loc 1 1095 45
 1455 010c 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 1456 0110 0133     		adds	r3, r3, #1
 1457 0112 DBB2     		uxtb	r3, r3
 1458              		.loc 1 1095 24
 1459 0114 5AB2     		sxtb	r2, r3
 1460              		.loc 1 1095 22
 1461 0116 BB6B     		ldr	r3, [r7, #56]
 1462 0118 83F84520 		strb	r2, [r3, #69]
 1463              	.L92:
1096:./freertos/src/queue.c **** 			}
1097:./freertos/src/queue.c **** 
1098:./freertos/src/queue.c **** 			xReturn = pdPASS;
 1464              		.loc 1 1098 12
 1465 011c 0123     		movs	r3, #1
 1466 011e FB63     		str	r3, [r7, #60]
 1467              	.LBE129:
 984:./freertos/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1468              		.loc 1 984 3
 1469 0120 01E0     		b	.L93
 1470              	.L90:
1099:./freertos/src/queue.c **** 		}
1100:./freertos/src/queue.c **** 		else
1101:./freertos/src/queue.c **** 		{
1102:./freertos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 50


1103:./freertos/src/queue.c **** 			xReturn = errQUEUE_FULL;
 1471              		.loc 1 1103 12
 1472 0122 0023     		movs	r3, #0
 1473 0124 FB63     		str	r3, [r7, #60]
 1474              	.L93:
 1475 0126 7B6B     		ldr	r3, [r7, #52]
 1476 0128 7B61     		str	r3, [r7, #20]
 1477              	.LBB130:
 1478              	.LBB131:
 226:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 227:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 229:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** {
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1479              		.loc 2 231 2
 1480 012a 7B69     		ldr	r3, [r7, #20]
 1481              		.syntax unified
 1482              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1483 012c 83F31188 			msr basepri, r3	
 1484              	@ 0 "" 2
 232:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 233:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 234:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	);
 235:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 1485              		.loc 2 235 1
 1486              		.thumb
 1487              		.syntax unified
 1488 0130 00BF     		nop
 1489              	.LBE131:
 1490              	.LBE130:
1104:./freertos/src/queue.c **** 		}
1105:./freertos/src/queue.c **** 	}
1106:./freertos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1107:./freertos/src/queue.c **** 
1108:./freertos/src/queue.c **** 	return xReturn;
 1491              		.loc 1 1108 9
 1492 0132 FB6B     		ldr	r3, [r7, #60]
1109:./freertos/src/queue.c **** }
 1493              		.loc 1 1109 1
 1494 0134 1846     		mov	r0, r3
 1495 0136 4037     		adds	r7, r7, #64
 1496              	.LCFI48:
 1497              		.cfi_def_cfa_offset 8
 1498 0138 BD46     		mov	sp, r7
 1499              	.LCFI49:
 1500              		.cfi_def_cfa_register 13
 1501              		@ sp needed
 1502 013a 80BD     		pop	{r7, pc}
 1503              		.cfi_endproc
 1504              	.LFE70:
 1506              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1507              		.align	1
 1508              		.global	xQueueGiveFromISR
 1509              		.syntax unified
 1510              		.thumb
 1511              		.thumb_func
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 51


 1513              	xQueueGiveFromISR:
 1514              	.LFB71:
1110:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1111:./freertos/src/queue.c **** 
1112:./freertos/src/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1113:./freertos/src/queue.c **** {
 1515              		.loc 1 1113 1
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 56
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519 0000 80B5     		push	{r7, lr}
 1520              	.LCFI50:
 1521              		.cfi_def_cfa_offset 8
 1522              		.cfi_offset 7, -8
 1523              		.cfi_offset 14, -4
 1524 0002 8EB0     		sub	sp, sp, #56
 1525              	.LCFI51:
 1526              		.cfi_def_cfa_offset 64
 1527 0004 00AF     		add	r7, sp, #0
 1528              	.LCFI52:
 1529              		.cfi_def_cfa_register 7
 1530 0006 7860     		str	r0, [r7, #4]
 1531 0008 3960     		str	r1, [r7]
1114:./freertos/src/queue.c **** BaseType_t xReturn;
1115:./freertos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1116:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1532              		.loc 1 1116 17
 1533 000a 7B68     		ldr	r3, [r7, #4]
 1534 000c 3B63     		str	r3, [r7, #48]
1117:./freertos/src/queue.c **** 
1118:./freertos/src/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1119:./freertos/src/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1120:./freertos/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1121:./freertos/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1122:./freertos/src/queue.c **** 	post). */
1123:./freertos/src/queue.c **** 
1124:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 1535              		.loc 1 1124 2
 1536 000e 3B6B     		ldr	r3, [r7, #48]
 1537 0010 002B     		cmp	r3, #0
 1538 0012 0BD1     		bne	.L96
 1539              	.LBB132:
 1540              	.LBB133:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1541              		.loc 2 197 2
 1542              		.syntax unified
 1543              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1544 0014 4FF05003 			mov r3, #80												
 1545 0018 83F31188 		msr basepri, r3											
 1546 001c BFF36F8F 		isb														
 1547 0020 BFF34F8F 		dsb														
 1548              	
 1549              	@ 0 "" 2
 1550              		.thumb
 1551              		.syntax unified
 1552 0024 3B62     		str	r3, [r7, #32]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 52


 1553              		.loc 2 205 1
 1554 0026 00BF     		nop
 1555              	.L97:
 1556              	.LBE133:
 1557              	.LBE132:
 1558              		.loc 1 1124 2
 1559 0028 00BF     		nop
 1560 002a FDE7     		b	.L97
 1561              	.L96:
1125:./freertos/src/queue.c **** 
1126:./freertos/src/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1127:./freertos/src/queue.c **** 	if the item size is not 0. */
1128:./freertos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 1562              		.loc 1 1128 2
 1563 002c 3B6B     		ldr	r3, [r7, #48]
 1564 002e 1B6C     		ldr	r3, [r3, #64]
 1565 0030 002B     		cmp	r3, #0
 1566 0032 0BD0     		beq	.L98
 1567              	.LBB134:
 1568              	.LBB135:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1569              		.loc 2 197 2
 1570              		.syntax unified
 1571              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1572 0034 4FF05003 			mov r3, #80												
 1573 0038 83F31188 		msr basepri, r3											
 1574 003c BFF36F8F 		isb														
 1575 0040 BFF34F8F 		dsb														
 1576              	
 1577              	@ 0 "" 2
 1578              		.thumb
 1579              		.syntax unified
 1580 0044 FB61     		str	r3, [r7, #28]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1581              		.loc 2 205 1
 1582 0046 00BF     		nop
 1583              	.L99:
 1584              	.LBE135:
 1585              	.LBE134:
 1586              		.loc 1 1128 2
 1587 0048 00BF     		nop
 1588 004a FDE7     		b	.L99
 1589              	.L98:
1129:./freertos/src/queue.c **** 
1130:./freertos/src/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1131:./freertos/src/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1132:./freertos/src/queue.c **** 	interrupts, only tasks. */
1133:./freertos/src/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
 1590              		.loc 1 1133 2
 1591 004c 3B6B     		ldr	r3, [r7, #48]
 1592 004e 1B68     		ldr	r3, [r3]
 1593 0050 002B     		cmp	r3, #0
 1594 0052 03D1     		bne	.L100
 1595              		.loc 1 1133 2 is_stmt 0 discriminator 2
 1596 0054 3B6B     		ldr	r3, [r7, #48]
 1597 0056 9B68     		ldr	r3, [r3, #8]
 1598 0058 002B     		cmp	r3, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 53


 1599 005a 01D1     		bne	.L101
 1600              	.L100:
 1601              		.loc 1 1133 2 discriminator 3
 1602 005c 0123     		movs	r3, #1
 1603              		.loc 1 1133 2
 1604 005e 00E0     		b	.L102
 1605              	.L101:
 1606              		.loc 1 1133 2 discriminator 4
 1607 0060 0023     		movs	r3, #0
 1608              	.L102:
 1609              		.loc 1 1133 2 discriminator 6
 1610 0062 002B     		cmp	r3, #0
 1611 0064 0BD1     		bne	.L103
 1612              	.LBB136:
 1613              	.LBB137:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1614              		.loc 2 197 2 is_stmt 1
 1615              		.syntax unified
 1616              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1617 0066 4FF05003 			mov r3, #80												
 1618 006a 83F31188 		msr basepri, r3											
 1619 006e BFF36F8F 		isb														
 1620 0072 BFF34F8F 		dsb														
 1621              	
 1622              	@ 0 "" 2
 1623              		.thumb
 1624              		.syntax unified
 1625 0076 BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1626              		.loc 2 205 1
 1627 0078 00BF     		nop
 1628              	.L104:
 1629              	.LBE137:
 1630              	.LBE136:
 1631              		.loc 1 1133 2
 1632 007a 00BF     		nop
 1633 007c FDE7     		b	.L104
 1634              	.L103:
1134:./freertos/src/queue.c **** 
1135:./freertos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1136:./freertos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1137:./freertos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1138:./freertos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1139:./freertos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1140:./freertos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1141:./freertos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1142:./freertos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1143:./freertos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1144:./freertos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1145:./freertos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1146:./freertos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1147:./freertos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1148:./freertos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1149:./freertos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1635              		.loc 1 1149 2
 1636 007e FFF7FEFF 		bl	vPortValidateInterruptPriority
 1637              	.LBB138:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 54


 1638              	.LBB139:
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1639              		.loc 2 213 2
 1640              		.syntax unified
 1641              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1642 0082 EFF31182 			mrs r2, basepri											
 1643 0086 4FF05003 		mov r3, #80												
 1644 008a 83F31188 		msr basepri, r3											
 1645 008e BFF36F8F 		isb														
 1646 0092 BFF34F8F 		dsb														
 1647              	
 1648              	@ 0 "" 2
 1649              		.thumb
 1650              		.syntax unified
 1651 0096 7A61     		str	r2, [r7, #20]
 1652 0098 3B61     		str	r3, [r7, #16]
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 1653              		.loc 2 225 9
 1654 009a 7B69     		ldr	r3, [r7, #20]
 1655              	.LBE139:
 1656              	.LBE138:
1150:./freertos/src/queue.c **** 
1151:./freertos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1657              		.loc 1 1151 27
 1658 009c FB62     		str	r3, [r7, #44]
 1659              	.LBB140:
1152:./freertos/src/queue.c **** 	{
1153:./freertos/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1660              		.loc 1 1153 21
 1661 009e 3B6B     		ldr	r3, [r7, #48]
 1662 00a0 9B6B     		ldr	r3, [r3, #56]
 1663 00a2 BB62     		str	r3, [r7, #40]
1154:./freertos/src/queue.c **** 
1155:./freertos/src/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1156:./freertos/src/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1157:./freertos/src/queue.c **** 		space'. */
1158:./freertos/src/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 1664              		.loc 1 1158 34
 1665 00a4 3B6B     		ldr	r3, [r7, #48]
 1666 00a6 DB6B     		ldr	r3, [r3, #60]
 1667              		.loc 1 1158 5
 1668 00a8 BA6A     		ldr	r2, [r7, #40]
 1669 00aa 9A42     		cmp	r2, r3
 1670 00ac 2BD2     		bcs	.L106
 1671              	.LBB141:
1159:./freertos/src/queue.c **** 		{
1160:./freertos/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1672              		.loc 1 1160 17
 1673 00ae 3B6B     		ldr	r3, [r7, #48]
 1674 00b0 93F84530 		ldrb	r3, [r3, #69]
 1675 00b4 87F82730 		strb	r3, [r7, #39]
1161:./freertos/src/queue.c **** 
1162:./freertos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1163:./freertos/src/queue.c **** 
1164:./freertos/src/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1165:./freertos/src/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1166:./freertos/src/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 55


1167:./freertos/src/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1168:./freertos/src/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1169:./freertos/src/queue.c **** 			messages (semaphores) available. */
1170:./freertos/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1676              		.loc 1 1170 51
 1677 00b8 BB6A     		ldr	r3, [r7, #40]
 1678 00ba 5A1C     		adds	r2, r3, #1
 1679              		.loc 1 1170 31
 1680 00bc 3B6B     		ldr	r3, [r7, #48]
 1681 00be 9A63     		str	r2, [r3, #56]
1171:./freertos/src/queue.c **** 
1172:./freertos/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1173:./freertos/src/queue.c **** 			be done when the queue is unlocked later. */
1174:./freertos/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1682              		.loc 1 1174 6
 1683 00c0 97F92730 		ldrsb	r3, [r7, #39]
 1684 00c4 B3F1FF3F 		cmp	r3, #-1
 1685 00c8 12D1     		bne	.L107
1175:./freertos/src/queue.c **** 			{
1176:./freertos/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1177:./freertos/src/queue.c **** 				{
1178:./freertos/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1179:./freertos/src/queue.c **** 					{
1180:./freertos/src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1181:./freertos/src/queue.c **** 						{
1182:./freertos/src/queue.c **** 							/* The semaphore is a member of a queue set, and
1183:./freertos/src/queue.c **** 							posting	to the queue set caused a higher priority
1184:./freertos/src/queue.c **** 							task to	unblock.  A context switch is required. */
1185:./freertos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1186:./freertos/src/queue.c **** 							{
1187:./freertos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1188:./freertos/src/queue.c **** 							}
1189:./freertos/src/queue.c **** 							else
1190:./freertos/src/queue.c **** 							{
1191:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1192:./freertos/src/queue.c **** 							}
1193:./freertos/src/queue.c **** 						}
1194:./freertos/src/queue.c **** 						else
1195:./freertos/src/queue.c **** 						{
1196:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1197:./freertos/src/queue.c **** 						}
1198:./freertos/src/queue.c **** 					}
1199:./freertos/src/queue.c **** 					else
1200:./freertos/src/queue.c **** 					{
1201:./freertos/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1202:./freertos/src/queue.c **** 						{
1203:./freertos/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1204:./freertos/src/queue.c **** 							{
1205:./freertos/src/queue.c **** 								/* The task waiting has a higher priority so
1206:./freertos/src/queue.c **** 								record that a context switch is required. */
1207:./freertos/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1208:./freertos/src/queue.c **** 								{
1209:./freertos/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1210:./freertos/src/queue.c **** 								}
1211:./freertos/src/queue.c **** 								else
1212:./freertos/src/queue.c **** 								{
1213:./freertos/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 56


1214:./freertos/src/queue.c **** 								}
1215:./freertos/src/queue.c **** 							}
1216:./freertos/src/queue.c **** 							else
1217:./freertos/src/queue.c **** 							{
1218:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1219:./freertos/src/queue.c **** 							}
1220:./freertos/src/queue.c **** 						}
1221:./freertos/src/queue.c **** 						else
1222:./freertos/src/queue.c **** 						{
1223:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1224:./freertos/src/queue.c **** 						}
1225:./freertos/src/queue.c **** 					}
1226:./freertos/src/queue.c **** 				}
1227:./freertos/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1228:./freertos/src/queue.c **** 				{
1229:./freertos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1686              		.loc 1 1229 10
 1687 00ca 3B6B     		ldr	r3, [r7, #48]
 1688 00cc 5B6A     		ldr	r3, [r3, #36]
 1689              		.loc 1 1229 8
 1690 00ce 002B     		cmp	r3, #0
 1691 00d0 16D0     		beq	.L108
1230:./freertos/src/queue.c **** 					{
1231:./freertos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1692              		.loc 1 1231 37
 1693 00d2 3B6B     		ldr	r3, [r7, #48]
 1694 00d4 2433     		adds	r3, r3, #36
 1695              		.loc 1 1231 11
 1696 00d6 1846     		mov	r0, r3
 1697 00d8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1698 00dc 0346     		mov	r3, r0
 1699              		.loc 1 1231 9 discriminator 1
 1700 00de 002B     		cmp	r3, #0
 1701 00e0 0ED0     		beq	.L108
1232:./freertos/src/queue.c **** 						{
1233:./freertos/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1234:./freertos/src/queue.c **** 							context	switch is required. */
1235:./freertos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1702              		.loc 1 1235 10
 1703 00e2 3B68     		ldr	r3, [r7]
 1704 00e4 002B     		cmp	r3, #0
 1705 00e6 0BD0     		beq	.L108
1236:./freertos/src/queue.c **** 							{
1237:./freertos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1706              		.loc 1 1237 36
 1707 00e8 3B68     		ldr	r3, [r7]
 1708 00ea 0122     		movs	r2, #1
 1709 00ec 1A60     		str	r2, [r3]
 1710 00ee 07E0     		b	.L108
 1711              	.L107:
1238:./freertos/src/queue.c **** 							}
1239:./freertos/src/queue.c **** 							else
1240:./freertos/src/queue.c **** 							{
1241:./freertos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1242:./freertos/src/queue.c **** 							}
1243:./freertos/src/queue.c **** 						}
1244:./freertos/src/queue.c **** 						else
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 57


1245:./freertos/src/queue.c **** 						{
1246:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1247:./freertos/src/queue.c **** 						}
1248:./freertos/src/queue.c **** 					}
1249:./freertos/src/queue.c **** 					else
1250:./freertos/src/queue.c **** 					{
1251:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1252:./freertos/src/queue.c **** 					}
1253:./freertos/src/queue.c **** 				}
1254:./freertos/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1255:./freertos/src/queue.c **** 			}
1256:./freertos/src/queue.c **** 			else
1257:./freertos/src/queue.c **** 			{
1258:./freertos/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1259:./freertos/src/queue.c **** 				knows that data was posted while it was locked. */
1260:./freertos/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1712              		.loc 1 1260 45
 1713 00f0 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1714 00f4 0133     		adds	r3, r3, #1
 1715 00f6 DBB2     		uxtb	r3, r3
 1716              		.loc 1 1260 24
 1717 00f8 5AB2     		sxtb	r2, r3
 1718              		.loc 1 1260 22
 1719 00fa 3B6B     		ldr	r3, [r7, #48]
 1720 00fc 83F84520 		strb	r2, [r3, #69]
 1721              	.L108:
1261:./freertos/src/queue.c **** 			}
1262:./freertos/src/queue.c **** 
1263:./freertos/src/queue.c **** 			xReturn = pdPASS;
 1722              		.loc 1 1263 12
 1723 0100 0123     		movs	r3, #1
 1724 0102 7B63     		str	r3, [r7, #52]
 1725              	.LBE141:
 1726 0104 01E0     		b	.L109
 1727              	.L106:
1264:./freertos/src/queue.c **** 		}
1265:./freertos/src/queue.c **** 		else
1266:./freertos/src/queue.c **** 		{
1267:./freertos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1268:./freertos/src/queue.c **** 			xReturn = errQUEUE_FULL;
 1728              		.loc 1 1268 12
 1729 0106 0023     		movs	r3, #0
 1730 0108 7B63     		str	r3, [r7, #52]
 1731              	.L109:
 1732 010a FB6A     		ldr	r3, [r7, #44]
 1733 010c FB60     		str	r3, [r7, #12]
 1734              	.LBE140:
 1735              	.LBB142:
 1736              	.LBB143:
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1737              		.loc 2 231 2
 1738 010e FB68     		ldr	r3, [r7, #12]
 1739              		.syntax unified
 1740              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1741 0110 83F31188 			msr basepri, r3	
 1742              	@ 0 "" 2
 1743              		.loc 2 235 1
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 58


 1744              		.thumb
 1745              		.syntax unified
 1746 0114 00BF     		nop
 1747              	.LBE143:
 1748              	.LBE142:
1269:./freertos/src/queue.c **** 		}
1270:./freertos/src/queue.c **** 	}
1271:./freertos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1272:./freertos/src/queue.c **** 
1273:./freertos/src/queue.c **** 	return xReturn;
 1749              		.loc 1 1273 9
 1750 0116 7B6B     		ldr	r3, [r7, #52]
1274:./freertos/src/queue.c **** }
 1751              		.loc 1 1274 1
 1752 0118 1846     		mov	r0, r3
 1753 011a 3837     		adds	r7, r7, #56
 1754              	.LCFI53:
 1755              		.cfi_def_cfa_offset 8
 1756 011c BD46     		mov	sp, r7
 1757              	.LCFI54:
 1758              		.cfi_def_cfa_register 13
 1759              		@ sp needed
 1760 011e 80BD     		pop	{r7, pc}
 1761              		.cfi_endproc
 1762              	.LFE71:
 1764              		.section	.text.xQueueReceive,"ax",%progbits
 1765              		.align	1
 1766              		.global	xQueueReceive
 1767              		.syntax unified
 1768              		.thumb
 1769              		.thumb_func
 1771              	xQueueReceive:
 1772              	.LFB72:
1275:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1276:./freertos/src/queue.c **** 
1277:./freertos/src/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1278:./freertos/src/queue.c **** {
 1773              		.loc 1 1278 1
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 48
 1776              		@ frame_needed = 1, uses_anonymous_args = 0
 1777 0000 80B5     		push	{r7, lr}
 1778              	.LCFI55:
 1779              		.cfi_def_cfa_offset 8
 1780              		.cfi_offset 7, -8
 1781              		.cfi_offset 14, -4
 1782 0002 8CB0     		sub	sp, sp, #48
 1783              	.LCFI56:
 1784              		.cfi_def_cfa_offset 56
 1785 0004 00AF     		add	r7, sp, #0
 1786              	.LCFI57:
 1787              		.cfi_def_cfa_register 7
 1788 0006 F860     		str	r0, [r7, #12]
 1789 0008 B960     		str	r1, [r7, #8]
 1790 000a 7A60     		str	r2, [r7, #4]
1279:./freertos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1791              		.loc 1 1279 12
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 59


 1792 000c 0023     		movs	r3, #0
 1793 000e FB62     		str	r3, [r7, #44]
1280:./freertos/src/queue.c **** TimeOut_t xTimeOut;
1281:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1794              		.loc 1 1281 17
 1795 0010 FB68     		ldr	r3, [r7, #12]
 1796 0012 BB62     		str	r3, [r7, #40]
1282:./freertos/src/queue.c **** 
1283:./freertos/src/queue.c **** 	/* Check the pointer is not NULL. */
1284:./freertos/src/queue.c **** 	configASSERT( ( pxQueue ) );
 1797              		.loc 1 1284 2
 1798 0014 BB6A     		ldr	r3, [r7, #40]
 1799 0016 002B     		cmp	r3, #0
 1800 0018 0BD1     		bne	.L112
 1801              	.LBB144:
 1802              	.LBB145:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1803              		.loc 2 197 2
 1804              		.syntax unified
 1805              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1806 001a 4FF05003 			mov r3, #80												
 1807 001e 83F31188 		msr basepri, r3											
 1808 0022 BFF36F8F 		isb														
 1809 0026 BFF34F8F 		dsb														
 1810              	
 1811              	@ 0 "" 2
 1812              		.thumb
 1813              		.syntax unified
 1814 002a 3B62     		str	r3, [r7, #32]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1815              		.loc 2 205 1
 1816 002c 00BF     		nop
 1817              	.L113:
 1818              	.LBE145:
 1819              	.LBE144:
 1820              		.loc 1 1284 2
 1821 002e 00BF     		nop
 1822 0030 FDE7     		b	.L113
 1823              	.L112:
1285:./freertos/src/queue.c **** 
1286:./freertos/src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1287:./freertos/src/queue.c **** 	is zero (so no data is copied into the buffer. */
1288:./freertos/src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1824              		.loc 1 1288 2
 1825 0032 BB68     		ldr	r3, [r7, #8]
 1826 0034 002B     		cmp	r3, #0
 1827 0036 03D1     		bne	.L114
 1828              		.loc 1 1288 2 is_stmt 0 discriminator 2
 1829 0038 BB6A     		ldr	r3, [r7, #40]
 1830 003a 1B6C     		ldr	r3, [r3, #64]
 1831 003c 002B     		cmp	r3, #0
 1832 003e 01D1     		bne	.L115
 1833              	.L114:
 1834              		.loc 1 1288 2 discriminator 3
 1835 0040 0123     		movs	r3, #1
 1836              		.loc 1 1288 2
 1837 0042 00E0     		b	.L116
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 60


 1838              	.L115:
 1839              		.loc 1 1288 2 discriminator 4
 1840 0044 0023     		movs	r3, #0
 1841              	.L116:
 1842              		.loc 1 1288 2 discriminator 6
 1843 0046 002B     		cmp	r3, #0
 1844 0048 0BD1     		bne	.L117
 1845              	.LBB146:
 1846              	.LBB147:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1847              		.loc 2 197 2 is_stmt 1
 1848              		.syntax unified
 1849              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1850 004a 4FF05003 			mov r3, #80												
 1851 004e 83F31188 		msr basepri, r3											
 1852 0052 BFF36F8F 		isb														
 1853 0056 BFF34F8F 		dsb														
 1854              	
 1855              	@ 0 "" 2
 1856              		.thumb
 1857              		.syntax unified
 1858 005a FB61     		str	r3, [r7, #28]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1859              		.loc 2 205 1
 1860 005c 00BF     		nop
 1861              	.L118:
 1862              	.LBE147:
 1863              	.LBE146:
 1864              		.loc 1 1288 2
 1865 005e 00BF     		nop
 1866 0060 FDE7     		b	.L118
 1867              	.L117:
1289:./freertos/src/queue.c **** 
1290:./freertos/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1291:./freertos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1292:./freertos/src/queue.c **** 	{
1293:./freertos/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 1868              		.loc 1 1293 3
 1869 0062 FFF7FEFF 		bl	xTaskGetSchedulerState
 1870 0066 0346     		mov	r3, r0
 1871              		.loc 1 1293 3 is_stmt 0 discriminator 1
 1872 0068 002B     		cmp	r3, #0
 1873 006a 02D1     		bne	.L119
 1874              		.loc 1 1293 3 discriminator 2
 1875 006c 7B68     		ldr	r3, [r7, #4]
 1876 006e 002B     		cmp	r3, #0
 1877 0070 01D1     		bne	.L120
 1878              	.L119:
 1879              		.loc 1 1293 3 discriminator 3
 1880 0072 0123     		movs	r3, #1
 1881              		.loc 1 1293 3
 1882 0074 00E0     		b	.L121
 1883              	.L120:
 1884              		.loc 1 1293 3 discriminator 4
 1885 0076 0023     		movs	r3, #0
 1886              	.L121:
 1887              		.loc 1 1293 3 discriminator 6
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 61


 1888 0078 002B     		cmp	r3, #0
 1889 007a 0BD1     		bne	.L122
 1890              	.LBB148:
 1891              	.LBB149:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1892              		.loc 2 197 2 is_stmt 1
 1893              		.syntax unified
 1894              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 1895 007c 4FF05003 			mov r3, #80												
 1896 0080 83F31188 		msr basepri, r3											
 1897 0084 BFF36F8F 		isb														
 1898 0088 BFF34F8F 		dsb														
 1899              	
 1900              	@ 0 "" 2
 1901              		.thumb
 1902              		.syntax unified
 1903 008c BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 1904              		.loc 2 205 1
 1905 008e 00BF     		nop
 1906              	.L123:
 1907              	.LBE149:
 1908              	.LBE148:
 1909              		.loc 1 1293 3
 1910 0090 00BF     		nop
 1911 0092 FDE7     		b	.L123
 1912              	.L122:
1294:./freertos/src/queue.c **** 	}
1295:./freertos/src/queue.c **** 	#endif
1296:./freertos/src/queue.c **** 
1297:./freertos/src/queue.c **** 
1298:./freertos/src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1299:./freertos/src/queue.c **** 	allow return statements within the function itself.  This is done in the
1300:./freertos/src/queue.c **** 	interest of execution time efficiency. */
1301:./freertos/src/queue.c **** 	for( ;; )
1302:./freertos/src/queue.c **** 	{
1303:./freertos/src/queue.c **** 		taskENTER_CRITICAL();
 1913              		.loc 1 1303 3
 1914 0094 FFF7FEFF 		bl	vPortEnterCritical
 1915              	.LBB150:
1304:./freertos/src/queue.c **** 		{
1305:./freertos/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1916              		.loc 1 1305 22
 1917 0098 BB6A     		ldr	r3, [r7, #40]
 1918 009a 9B6B     		ldr	r3, [r3, #56]
 1919 009c 7B62     		str	r3, [r7, #36]
1306:./freertos/src/queue.c **** 
1307:./freertos/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1308:./freertos/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1309:./freertos/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1920              		.loc 1 1309 6
 1921 009e 7B6A     		ldr	r3, [r7, #36]
 1922 00a0 002B     		cmp	r3, #0
 1923 00a2 1FD0     		beq	.L124
1310:./freertos/src/queue.c **** 			{
1311:./freertos/src/queue.c **** 				/* Data available, remove one item. */
1312:./freertos/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 62


 1924              		.loc 1 1312 5
 1925 00a4 B968     		ldr	r1, [r7, #8]
 1926 00a6 B86A     		ldr	r0, [r7, #40]
 1927 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
1313:./freertos/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1314:./freertos/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1928              		.loc 1 1314 52
 1929 00ac 7B6A     		ldr	r3, [r7, #36]
 1930 00ae 5A1E     		subs	r2, r3, #1
 1931              		.loc 1 1314 32
 1932 00b0 BB6A     		ldr	r3, [r7, #40]
 1933 00b2 9A63     		str	r2, [r3, #56]
1315:./freertos/src/queue.c **** 
1316:./freertos/src/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1317:./freertos/src/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1318:./freertos/src/queue.c **** 				task. */
1319:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1934              		.loc 1 1319 9
 1935 00b4 BB6A     		ldr	r3, [r7, #40]
 1936 00b6 1B69     		ldr	r3, [r3, #16]
 1937              		.loc 1 1319 7
 1938 00b8 002B     		cmp	r3, #0
 1939 00ba 0FD0     		beq	.L125
1320:./freertos/src/queue.c **** 				{
1321:./freertos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1940              		.loc 1 1321 36
 1941 00bc BB6A     		ldr	r3, [r7, #40]
 1942 00be 1033     		adds	r3, r3, #16
 1943              		.loc 1 1321 10
 1944 00c0 1846     		mov	r0, r3
 1945 00c2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1946 00c6 0346     		mov	r3, r0
 1947              		.loc 1 1321 8 discriminator 1
 1948 00c8 002B     		cmp	r3, #0
 1949 00ca 07D0     		beq	.L125
1322:./freertos/src/queue.c **** 					{
1323:./freertos/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1950              		.loc 1 1323 7
 1951 00cc 3C4B     		ldr	r3, .L135
 1952 00ce 4FF08052 		mov	r2, #268435456
 1953 00d2 1A60     		str	r2, [r3]
 1954              		.syntax unified
 1955              	@ 1323 "./freertos/src/queue.c" 1
 1956 00d4 BFF34F8F 		dsb
 1957              	@ 0 "" 2
 1958              	@ 1323 "./freertos/src/queue.c" 1
 1959 00d8 BFF36F8F 		isb
 1960              	@ 0 "" 2
 1961              		.thumb
 1962              		.syntax unified
 1963              	.L125:
1324:./freertos/src/queue.c **** 					}
1325:./freertos/src/queue.c **** 					else
1326:./freertos/src/queue.c **** 					{
1327:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1328:./freertos/src/queue.c **** 					}
1329:./freertos/src/queue.c **** 				}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 63


1330:./freertos/src/queue.c **** 				else
1331:./freertos/src/queue.c **** 				{
1332:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1333:./freertos/src/queue.c **** 				}
1334:./freertos/src/queue.c **** 
1335:./freertos/src/queue.c **** 				taskEXIT_CRITICAL();
 1964              		.loc 1 1335 5
 1965 00dc FFF7FEFF 		bl	vPortExitCritical
1336:./freertos/src/queue.c **** 				return pdPASS;
 1966              		.loc 1 1336 12
 1967 00e0 0123     		movs	r3, #1
 1968 00e2 69E0     		b	.L134
 1969              	.L124:
1337:./freertos/src/queue.c **** 			}
1338:./freertos/src/queue.c **** 			else
1339:./freertos/src/queue.c **** 			{
1340:./freertos/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1970              		.loc 1 1340 22
 1971 00e4 7B68     		ldr	r3, [r7, #4]
 1972              		.loc 1 1340 7
 1973 00e6 002B     		cmp	r3, #0
 1974 00e8 03D1     		bne	.L127
1341:./freertos/src/queue.c **** 				{
1342:./freertos/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1343:./freertos/src/queue.c **** 					the block time has expired) so leave now. */
1344:./freertos/src/queue.c **** 					taskEXIT_CRITICAL();
 1975              		.loc 1 1344 6
 1976 00ea FFF7FEFF 		bl	vPortExitCritical
1345:./freertos/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1346:./freertos/src/queue.c **** 					return errQUEUE_EMPTY;
 1977              		.loc 1 1346 13
 1978 00ee 0023     		movs	r3, #0
 1979 00f0 62E0     		b	.L134
 1980              	.L127:
1347:./freertos/src/queue.c **** 				}
1348:./freertos/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1981              		.loc 1 1348 12
 1982 00f2 FB6A     		ldr	r3, [r7, #44]
 1983 00f4 002B     		cmp	r3, #0
 1984 00f6 06D1     		bne	.L128
1349:./freertos/src/queue.c **** 				{
1350:./freertos/src/queue.c **** 					/* The queue was empty and a block time was specified so
1351:./freertos/src/queue.c **** 					configure the timeout structure. */
1352:./freertos/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1985              		.loc 1 1352 6
 1986 00f8 07F11003 		add	r3, r7, #16
 1987 00fc 1846     		mov	r0, r3
 1988 00fe FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1353:./freertos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1989              		.loc 1 1353 20
 1990 0102 0123     		movs	r3, #1
 1991 0104 FB62     		str	r3, [r7, #44]
 1992              	.L128:
 1993              	.LBE150:
1354:./freertos/src/queue.c **** 				}
1355:./freertos/src/queue.c **** 				else
1356:./freertos/src/queue.c **** 				{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 64


1357:./freertos/src/queue.c **** 					/* Entry time was already set. */
1358:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1359:./freertos/src/queue.c **** 				}
1360:./freertos/src/queue.c **** 			}
1361:./freertos/src/queue.c **** 		}
1362:./freertos/src/queue.c **** 		taskEXIT_CRITICAL();
 1994              		.loc 1 1362 3
 1995 0106 FFF7FEFF 		bl	vPortExitCritical
1363:./freertos/src/queue.c **** 
1364:./freertos/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1365:./freertos/src/queue.c **** 		now the critical section has been exited. */
1366:./freertos/src/queue.c **** 
1367:./freertos/src/queue.c **** 		vTaskSuspendAll();
 1996              		.loc 1 1367 3
 1997 010a FFF7FEFF 		bl	vTaskSuspendAll
1368:./freertos/src/queue.c **** 		prvLockQueue( pxQueue );
 1998              		.loc 1 1368 3
 1999 010e FFF7FEFF 		bl	vPortEnterCritical
 2000              		.loc 1 1368 3 is_stmt 0 discriminator 1
 2001 0112 BB6A     		ldr	r3, [r7, #40]
 2002 0114 93F84430 		ldrb	r3, [r3, #68]
 2003 0118 5BB2     		sxtb	r3, r3
 2004 011a B3F1FF3F 		cmp	r3, #-1
 2005 011e 03D1     		bne	.L129
 2006 0120 BB6A     		ldr	r3, [r7, #40]
 2007 0122 0022     		movs	r2, #0
 2008 0124 83F84420 		strb	r2, [r3, #68]
 2009              	.L129:
 2010              		.loc 1 1368 3 discriminator 3
 2011 0128 BB6A     		ldr	r3, [r7, #40]
 2012 012a 93F84530 		ldrb	r3, [r3, #69]
 2013 012e 5BB2     		sxtb	r3, r3
 2014 0130 B3F1FF3F 		cmp	r3, #-1
 2015 0134 03D1     		bne	.L130
 2016              		.loc 1 1368 3 discriminator 4
 2017 0136 BB6A     		ldr	r3, [r7, #40]
 2018 0138 0022     		movs	r2, #0
 2019 013a 83F84520 		strb	r2, [r3, #69]
 2020              	.L130:
 2021              		.loc 1 1368 3 discriminator 6
 2022 013e FFF7FEFF 		bl	vPortExitCritical
1369:./freertos/src/queue.c **** 
1370:./freertos/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1371:./freertos/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2023              		.loc 1 1371 7 is_stmt 1
 2024 0142 3A1D     		adds	r2, r7, #4
 2025 0144 07F11003 		add	r3, r7, #16
 2026 0148 1146     		mov	r1, r2
 2027 014a 1846     		mov	r0, r3
 2028 014c FFF7FEFF 		bl	xTaskCheckForTimeOut
 2029 0150 0346     		mov	r3, r0
 2030              		.loc 1 1371 5 discriminator 1
 2031 0152 002B     		cmp	r3, #0
 2032 0154 23D1     		bne	.L131
1372:./freertos/src/queue.c **** 		{
1373:./freertos/src/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1374:./freertos/src/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 65


1375:./freertos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2033              		.loc 1 1375 8
 2034 0156 B86A     		ldr	r0, [r7, #40]
 2035 0158 FFF7FEFF 		bl	prvIsQueueEmpty
 2036 015c 0346     		mov	r3, r0
 2037              		.loc 1 1375 6 discriminator 1
 2038 015e 002B     		cmp	r3, #0
 2039 0160 17D0     		beq	.L132
1376:./freertos/src/queue.c **** 			{
1377:./freertos/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1378:./freertos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2040              		.loc 1 1378 5
 2041 0162 BB6A     		ldr	r3, [r7, #40]
 2042 0164 2433     		adds	r3, r3, #36
 2043 0166 7A68     		ldr	r2, [r7, #4]
 2044 0168 1146     		mov	r1, r2
 2045 016a 1846     		mov	r0, r3
 2046 016c FFF7FEFF 		bl	vTaskPlaceOnEventList
1379:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2047              		.loc 1 1379 5
 2048 0170 B86A     		ldr	r0, [r7, #40]
 2049 0172 FFF7FEFF 		bl	prvUnlockQueue
1380:./freertos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2050              		.loc 1 1380 9
 2051 0176 FFF7FEFF 		bl	xTaskResumeAll
 2052 017a 0346     		mov	r3, r0
 2053              		.loc 1 1380 7 discriminator 1
 2054 017c 002B     		cmp	r3, #0
 2055 017e 89D1     		bne	.L122
1381:./freertos/src/queue.c **** 				{
1382:./freertos/src/queue.c **** 					portYIELD_WITHIN_API();
 2056              		.loc 1 1382 6
 2057 0180 0F4B     		ldr	r3, .L135
 2058 0182 4FF08052 		mov	r2, #268435456
 2059 0186 1A60     		str	r2, [r3]
 2060              		.syntax unified
 2061              	@ 1382 "./freertos/src/queue.c" 1
 2062 0188 BFF34F8F 		dsb
 2063              	@ 0 "" 2
 2064              	@ 1382 "./freertos/src/queue.c" 1
 2065 018c BFF36F8F 		isb
 2066              	@ 0 "" 2
 2067              		.thumb
 2068              		.syntax unified
 2069 0190 80E7     		b	.L122
 2070              	.L132:
1383:./freertos/src/queue.c **** 				}
1384:./freertos/src/queue.c **** 				else
1385:./freertos/src/queue.c **** 				{
1386:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1387:./freertos/src/queue.c **** 				}
1388:./freertos/src/queue.c **** 			}
1389:./freertos/src/queue.c **** 			else
1390:./freertos/src/queue.c **** 			{
1391:./freertos/src/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1392:./freertos/src/queue.c **** 				data. */
1393:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 66


 2071              		.loc 1 1393 5
 2072 0192 B86A     		ldr	r0, [r7, #40]
 2073 0194 FFF7FEFF 		bl	prvUnlockQueue
1394:./freertos/src/queue.c **** 				( void ) xTaskResumeAll();
 2074              		.loc 1 1394 14
 2075 0198 FFF7FEFF 		bl	xTaskResumeAll
 2076 019c 7AE7     		b	.L122
 2077              	.L131:
1395:./freertos/src/queue.c **** 			}
1396:./freertos/src/queue.c **** 		}
1397:./freertos/src/queue.c **** 		else
1398:./freertos/src/queue.c **** 		{
1399:./freertos/src/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1400:./freertos/src/queue.c **** 			back and attempt to read the data. */
1401:./freertos/src/queue.c **** 			prvUnlockQueue( pxQueue );
 2078              		.loc 1 1401 4
 2079 019e B86A     		ldr	r0, [r7, #40]
 2080 01a0 FFF7FEFF 		bl	prvUnlockQueue
1402:./freertos/src/queue.c **** 			( void ) xTaskResumeAll();
 2081              		.loc 1 1402 13
 2082 01a4 FFF7FEFF 		bl	xTaskResumeAll
1403:./freertos/src/queue.c **** 
1404:./freertos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2083              		.loc 1 1404 8
 2084 01a8 B86A     		ldr	r0, [r7, #40]
 2085 01aa FFF7FEFF 		bl	prvIsQueueEmpty
 2086 01ae 0346     		mov	r3, r0
 2087              		.loc 1 1404 6 discriminator 1
 2088 01b0 002B     		cmp	r3, #0
 2089 01b2 3FF46FAF 		beq	.L122
1405:./freertos/src/queue.c **** 			{
1406:./freertos/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1407:./freertos/src/queue.c **** 				return errQUEUE_EMPTY;
 2090              		.loc 1 1407 12
 2091 01b6 0023     		movs	r3, #0
 2092              	.L134:
1408:./freertos/src/queue.c **** 			}
1409:./freertos/src/queue.c **** 			else
1410:./freertos/src/queue.c **** 			{
1411:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1412:./freertos/src/queue.c **** 			}
1413:./freertos/src/queue.c **** 		}
1414:./freertos/src/queue.c **** 	} /*lint -restore */
1415:./freertos/src/queue.c **** }
 2093              		.loc 1 1415 1
 2094 01b8 1846     		mov	r0, r3
 2095 01ba 3037     		adds	r7, r7, #48
 2096              	.LCFI58:
 2097              		.cfi_def_cfa_offset 8
 2098 01bc BD46     		mov	sp, r7
 2099              	.LCFI59:
 2100              		.cfi_def_cfa_register 13
 2101              		@ sp needed
 2102 01be 80BD     		pop	{r7, pc}
 2103              	.L136:
 2104              		.align	2
 2105              	.L135:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 67


 2106 01c0 04ED00E0 		.word	-536810236
 2107              		.cfi_endproc
 2108              	.LFE72:
 2110              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2111              		.align	1
 2112              		.global	xQueueSemaphoreTake
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2117              	xQueueSemaphoreTake:
 2118              	.LFB73:
1416:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1417:./freertos/src/queue.c **** 
1418:./freertos/src/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1419:./freertos/src/queue.c **** {
 2119              		.loc 1 1419 1
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 56
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
 2123 0000 80B5     		push	{r7, lr}
 2124              	.LCFI60:
 2125              		.cfi_def_cfa_offset 8
 2126              		.cfi_offset 7, -8
 2127              		.cfi_offset 14, -4
 2128 0002 8EB0     		sub	sp, sp, #56
 2129              	.LCFI61:
 2130              		.cfi_def_cfa_offset 64
 2131 0004 00AF     		add	r7, sp, #0
 2132              	.LCFI62:
 2133              		.cfi_def_cfa_register 7
 2134 0006 7860     		str	r0, [r7, #4]
 2135 0008 3960     		str	r1, [r7]
1420:./freertos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2136              		.loc 1 1420 12
 2137 000a 0023     		movs	r3, #0
 2138 000c 7B63     		str	r3, [r7, #52]
1421:./freertos/src/queue.c **** TimeOut_t xTimeOut;
1422:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2139              		.loc 1 1422 17
 2140 000e 7B68     		ldr	r3, [r7, #4]
 2141 0010 FB62     		str	r3, [r7, #44]
1423:./freertos/src/queue.c **** 
1424:./freertos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
1425:./freertos/src/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
 2142              		.loc 1 1425 13
 2143 0012 0023     		movs	r3, #0
 2144 0014 3B63     		str	r3, [r7, #48]
1426:./freertos/src/queue.c **** #endif
1427:./freertos/src/queue.c **** 
1428:./freertos/src/queue.c **** 	/* Check the queue pointer is not NULL. */
1429:./freertos/src/queue.c **** 	configASSERT( ( pxQueue ) );
 2145              		.loc 1 1429 2
 2146 0016 FB6A     		ldr	r3, [r7, #44]
 2147 0018 002B     		cmp	r3, #0
 2148 001a 0BD1     		bne	.L138
 2149              	.LBB151:
 2150              	.LBB152:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 68


 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2151              		.loc 2 197 2
 2152              		.syntax unified
 2153              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2154 001c 4FF05003 			mov r3, #80												
 2155 0020 83F31188 		msr basepri, r3											
 2156 0024 BFF36F8F 		isb														
 2157 0028 BFF34F8F 		dsb														
 2158              	
 2159              	@ 0 "" 2
 2160              		.thumb
 2161              		.syntax unified
 2162 002c 3B62     		str	r3, [r7, #32]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2163              		.loc 2 205 1
 2164 002e 00BF     		nop
 2165              	.L139:
 2166              	.LBE152:
 2167              	.LBE151:
 2168              		.loc 1 1429 2
 2169 0030 00BF     		nop
 2170 0032 FDE7     		b	.L139
 2171              	.L138:
1430:./freertos/src/queue.c **** 
1431:./freertos/src/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1432:./freertos/src/queue.c **** 	0. */
1433:./freertos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
 2172              		.loc 1 1433 2
 2173 0034 FB6A     		ldr	r3, [r7, #44]
 2174 0036 1B6C     		ldr	r3, [r3, #64]
 2175 0038 002B     		cmp	r3, #0
 2176 003a 0BD0     		beq	.L140
 2177              	.LBB153:
 2178              	.LBB154:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2179              		.loc 2 197 2
 2180              		.syntax unified
 2181              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2182 003c 4FF05003 			mov r3, #80												
 2183 0040 83F31188 		msr basepri, r3											
 2184 0044 BFF36F8F 		isb														
 2185 0048 BFF34F8F 		dsb														
 2186              	
 2187              	@ 0 "" 2
 2188              		.thumb
 2189              		.syntax unified
 2190 004c FB61     		str	r3, [r7, #28]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2191              		.loc 2 205 1
 2192 004e 00BF     		nop
 2193              	.L141:
 2194              	.LBE154:
 2195              	.LBE153:
 2196              		.loc 1 1433 2
 2197 0050 00BF     		nop
 2198 0052 FDE7     		b	.L141
 2199              	.L140:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 69


1434:./freertos/src/queue.c **** 
1435:./freertos/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1436:./freertos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1437:./freertos/src/queue.c **** 	{
1438:./freertos/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 2200              		.loc 1 1438 3
 2201 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 2202 0058 0346     		mov	r3, r0
 2203              		.loc 1 1438 3 is_stmt 0 discriminator 1
 2204 005a 002B     		cmp	r3, #0
 2205 005c 02D1     		bne	.L142
 2206              		.loc 1 1438 3 discriminator 2
 2207 005e 3B68     		ldr	r3, [r7]
 2208 0060 002B     		cmp	r3, #0
 2209 0062 01D1     		bne	.L143
 2210              	.L142:
 2211              		.loc 1 1438 3 discriminator 3
 2212 0064 0123     		movs	r3, #1
 2213              		.loc 1 1438 3
 2214 0066 00E0     		b	.L144
 2215              	.L143:
 2216              		.loc 1 1438 3 discriminator 4
 2217 0068 0023     		movs	r3, #0
 2218              	.L144:
 2219              		.loc 1 1438 3 discriminator 6
 2220 006a 002B     		cmp	r3, #0
 2221 006c 0BD1     		bne	.L145
 2222              	.LBB155:
 2223              	.LBB156:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2224              		.loc 2 197 2 is_stmt 1
 2225              		.syntax unified
 2226              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2227 006e 4FF05003 			mov r3, #80												
 2228 0072 83F31188 		msr basepri, r3											
 2229 0076 BFF36F8F 		isb														
 2230 007a BFF34F8F 		dsb														
 2231              	
 2232              	@ 0 "" 2
 2233              		.thumb
 2234              		.syntax unified
 2235 007e BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2236              		.loc 2 205 1
 2237 0080 00BF     		nop
 2238              	.L146:
 2239              	.LBE156:
 2240              	.LBE155:
 2241              		.loc 1 1438 3
 2242 0082 00BF     		nop
 2243 0084 FDE7     		b	.L146
 2244              	.L145:
1439:./freertos/src/queue.c **** 	}
1440:./freertos/src/queue.c **** 	#endif
1441:./freertos/src/queue.c **** 
1442:./freertos/src/queue.c **** 
1443:./freertos/src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 70


1444:./freertos/src/queue.c **** 	statements within the function itself.  This is done in the interest
1445:./freertos/src/queue.c **** 	of execution time efficiency. */
1446:./freertos/src/queue.c **** 	for( ;; )
1447:./freertos/src/queue.c **** 	{
1448:./freertos/src/queue.c **** 		taskENTER_CRITICAL();
 2245              		.loc 1 1448 3
 2246 0086 FFF7FEFF 		bl	vPortEnterCritical
 2247              	.LBB157:
1449:./freertos/src/queue.c **** 		{
1450:./freertos/src/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1451:./freertos/src/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1452:./freertos/src/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2248              		.loc 1 1452 22
 2249 008a FB6A     		ldr	r3, [r7, #44]
 2250 008c 9B6B     		ldr	r3, [r3, #56]
 2251 008e BB62     		str	r3, [r7, #40]
1453:./freertos/src/queue.c **** 
1454:./freertos/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1455:./freertos/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1456:./freertos/src/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2252              		.loc 1 1456 6
 2253 0090 BB6A     		ldr	r3, [r7, #40]
 2254 0092 002B     		cmp	r3, #0
 2255 0094 24D0     		beq	.L147
1457:./freertos/src/queue.c **** 			{
1458:./freertos/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1459:./freertos/src/queue.c **** 
1460:./freertos/src/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1461:./freertos/src/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1462:./freertos/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 2256              		.loc 1 1462 51
 2257 0096 BB6A     		ldr	r3, [r7, #40]
 2258 0098 5A1E     		subs	r2, r3, #1
 2259              		.loc 1 1462 32
 2260 009a FB6A     		ldr	r3, [r7, #44]
 2261 009c 9A63     		str	r2, [r3, #56]
1463:./freertos/src/queue.c **** 
1464:./freertos/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1465:./freertos/src/queue.c **** 				{
1466:./freertos/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2262              		.loc 1 1466 17
 2263 009e FB6A     		ldr	r3, [r7, #44]
 2264 00a0 1B68     		ldr	r3, [r3]
 2265              		.loc 1 1466 8
 2266 00a2 002B     		cmp	r3, #0
 2267 00a4 04D1     		bne	.L148
1467:./freertos/src/queue.c **** 					{
1468:./freertos/src/queue.c **** 						/* Record the information required to implement
1469:./freertos/src/queue.c **** 						priority inheritance should it become necessary. */
1470:./freertos/src/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2268              		.loc 1 1470 44
 2269 00a6 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2270 00aa 0246     		mov	r2, r0
 2271              		.loc 1 1470 42 discriminator 1
 2272 00ac FB6A     		ldr	r3, [r7, #44]
 2273 00ae 9A60     		str	r2, [r3, #8]
 2274              	.L148:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 71


1471:./freertos/src/queue.c **** 					}
1472:./freertos/src/queue.c **** 					else
1473:./freertos/src/queue.c **** 					{
1474:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1475:./freertos/src/queue.c **** 					}
1476:./freertos/src/queue.c **** 				}
1477:./freertos/src/queue.c **** 				#endif /* configUSE_MUTEXES */
1478:./freertos/src/queue.c **** 
1479:./freertos/src/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1480:./freertos/src/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1481:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2275              		.loc 1 1481 9
 2276 00b0 FB6A     		ldr	r3, [r7, #44]
 2277 00b2 1B69     		ldr	r3, [r3, #16]
 2278              		.loc 1 1481 7
 2279 00b4 002B     		cmp	r3, #0
 2280 00b6 0FD0     		beq	.L149
1482:./freertos/src/queue.c **** 				{
1483:./freertos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2281              		.loc 1 1483 36
 2282 00b8 FB6A     		ldr	r3, [r7, #44]
 2283 00ba 1033     		adds	r3, r3, #16
 2284              		.loc 1 1483 10
 2285 00bc 1846     		mov	r0, r3
 2286 00be FFF7FEFF 		bl	xTaskRemoveFromEventList
 2287 00c2 0346     		mov	r3, r0
 2288              		.loc 1 1483 8 discriminator 1
 2289 00c4 002B     		cmp	r3, #0
 2290 00c6 07D0     		beq	.L149
1484:./freertos/src/queue.c **** 					{
1485:./freertos/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 2291              		.loc 1 1485 7
 2292 00c8 544B     		ldr	r3, .L163
 2293 00ca 4FF08052 		mov	r2, #268435456
 2294 00ce 1A60     		str	r2, [r3]
 2295              		.syntax unified
 2296              	@ 1485 "./freertos/src/queue.c" 1
 2297 00d0 BFF34F8F 		dsb
 2298              	@ 0 "" 2
 2299              	@ 1485 "./freertos/src/queue.c" 1
 2300 00d4 BFF36F8F 		isb
 2301              	@ 0 "" 2
 2302              		.thumb
 2303              		.syntax unified
 2304              	.L149:
1486:./freertos/src/queue.c **** 					}
1487:./freertos/src/queue.c **** 					else
1488:./freertos/src/queue.c **** 					{
1489:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1490:./freertos/src/queue.c **** 					}
1491:./freertos/src/queue.c **** 				}
1492:./freertos/src/queue.c **** 				else
1493:./freertos/src/queue.c **** 				{
1494:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1495:./freertos/src/queue.c **** 				}
1496:./freertos/src/queue.c **** 
1497:./freertos/src/queue.c **** 				taskEXIT_CRITICAL();
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 72


 2305              		.loc 1 1497 5
 2306 00d8 FFF7FEFF 		bl	vPortExitCritical
1498:./freertos/src/queue.c **** 				return pdPASS;
 2307              		.loc 1 1498 12
 2308 00dc 0123     		movs	r3, #1
 2309 00de 98E0     		b	.L162
 2310              	.L147:
1499:./freertos/src/queue.c **** 			}
1500:./freertos/src/queue.c **** 			else
1501:./freertos/src/queue.c **** 			{
1502:./freertos/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 2311              		.loc 1 1502 22
 2312 00e0 3B68     		ldr	r3, [r7]
 2313              		.loc 1 1502 7
 2314 00e2 002B     		cmp	r3, #0
 2315 00e4 12D1     		bne	.L151
1503:./freertos/src/queue.c **** 				{
1504:./freertos/src/queue.c **** 					/* For inheritance to have occurred there must have been an
1505:./freertos/src/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1506:./freertos/src/queue.c **** 					if it were 0 the function would have exited. */
1507:./freertos/src/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1508:./freertos/src/queue.c **** 					{
1509:./freertos/src/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
 2316              		.loc 1 1509 7
 2317 00e6 3B6B     		ldr	r3, [r7, #48]
 2318 00e8 002B     		cmp	r3, #0
 2319 00ea 0BD0     		beq	.L152
 2320              	.LBB158:
 2321              	.LBB159:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2322              		.loc 2 197 2
 2323              		.syntax unified
 2324              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2325 00ec 4FF05003 			mov r3, #80												
 2326 00f0 83F31188 		msr basepri, r3											
 2327 00f4 BFF36F8F 		isb														
 2328 00f8 BFF34F8F 		dsb														
 2329              	
 2330              	@ 0 "" 2
 2331              		.thumb
 2332              		.syntax unified
 2333 00fc 7B61     		str	r3, [r7, #20]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2334              		.loc 2 205 1
 2335 00fe 00BF     		nop
 2336              	.L153:
 2337              	.LBE159:
 2338              	.LBE158:
 2339              		.loc 1 1509 7
 2340 0100 00BF     		nop
 2341 0102 FDE7     		b	.L153
 2342              	.L152:
1510:./freertos/src/queue.c **** 					}
1511:./freertos/src/queue.c **** 					#endif /* configUSE_MUTEXES */
1512:./freertos/src/queue.c **** 
1513:./freertos/src/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1514:./freertos/src/queue.c **** 					(or the block time has expired) so exit now. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 73


1515:./freertos/src/queue.c **** 					taskEXIT_CRITICAL();
 2343              		.loc 1 1515 6
 2344 0104 FFF7FEFF 		bl	vPortExitCritical
1516:./freertos/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1517:./freertos/src/queue.c **** 					return errQUEUE_EMPTY;
 2345              		.loc 1 1517 13
 2346 0108 0023     		movs	r3, #0
 2347 010a 82E0     		b	.L162
 2348              	.L151:
1518:./freertos/src/queue.c **** 				}
1519:./freertos/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 2349              		.loc 1 1519 12
 2350 010c 7B6B     		ldr	r3, [r7, #52]
 2351 010e 002B     		cmp	r3, #0
 2352 0110 06D1     		bne	.L154
1520:./freertos/src/queue.c **** 				{
1521:./freertos/src/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1522:./freertos/src/queue.c **** 					so configure the timeout structure ready to block. */
1523:./freertos/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 2353              		.loc 1 1523 6
 2354 0112 07F10C03 		add	r3, r7, #12
 2355 0116 1846     		mov	r0, r3
 2356 0118 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1524:./freertos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 2357              		.loc 1 1524 20
 2358 011c 0123     		movs	r3, #1
 2359 011e 7B63     		str	r3, [r7, #52]
 2360              	.L154:
 2361              	.LBE157:
1525:./freertos/src/queue.c **** 				}
1526:./freertos/src/queue.c **** 				else
1527:./freertos/src/queue.c **** 				{
1528:./freertos/src/queue.c **** 					/* Entry time was already set. */
1529:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1530:./freertos/src/queue.c **** 				}
1531:./freertos/src/queue.c **** 			}
1532:./freertos/src/queue.c **** 		}
1533:./freertos/src/queue.c **** 		taskEXIT_CRITICAL();
 2362              		.loc 1 1533 3
 2363 0120 FFF7FEFF 		bl	vPortExitCritical
1534:./freertos/src/queue.c **** 
1535:./freertos/src/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1536:./freertos/src/queue.c **** 		now the critical section has been exited. */
1537:./freertos/src/queue.c **** 
1538:./freertos/src/queue.c **** 		vTaskSuspendAll();
 2364              		.loc 1 1538 3
 2365 0124 FFF7FEFF 		bl	vTaskSuspendAll
1539:./freertos/src/queue.c **** 		prvLockQueue( pxQueue );
 2366              		.loc 1 1539 3
 2367 0128 FFF7FEFF 		bl	vPortEnterCritical
 2368              		.loc 1 1539 3 is_stmt 0 discriminator 1
 2369 012c FB6A     		ldr	r3, [r7, #44]
 2370 012e 93F84430 		ldrb	r3, [r3, #68]
 2371 0132 5BB2     		sxtb	r3, r3
 2372 0134 B3F1FF3F 		cmp	r3, #-1
 2373 0138 03D1     		bne	.L155
 2374 013a FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 74


 2375 013c 0022     		movs	r2, #0
 2376 013e 83F84420 		strb	r2, [r3, #68]
 2377              	.L155:
 2378              		.loc 1 1539 3 discriminator 3
 2379 0142 FB6A     		ldr	r3, [r7, #44]
 2380 0144 93F84530 		ldrb	r3, [r3, #69]
 2381 0148 5BB2     		sxtb	r3, r3
 2382 014a B3F1FF3F 		cmp	r3, #-1
 2383 014e 03D1     		bne	.L156
 2384              		.loc 1 1539 3 discriminator 4
 2385 0150 FB6A     		ldr	r3, [r7, #44]
 2386 0152 0022     		movs	r2, #0
 2387 0154 83F84520 		strb	r2, [r3, #69]
 2388              	.L156:
 2389              		.loc 1 1539 3 discriminator 6
 2390 0158 FFF7FEFF 		bl	vPortExitCritical
1540:./freertos/src/queue.c **** 
1541:./freertos/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1542:./freertos/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2391              		.loc 1 1542 7 is_stmt 1
 2392 015c 3A46     		mov	r2, r7
 2393 015e 07F10C03 		add	r3, r7, #12
 2394 0162 1146     		mov	r1, r2
 2395 0164 1846     		mov	r0, r3
 2396 0166 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2397 016a 0346     		mov	r3, r0
 2398              		.loc 1 1542 5 discriminator 1
 2399 016c 002B     		cmp	r3, #0
 2400 016e 32D1     		bne	.L157
1543:./freertos/src/queue.c **** 		{
1544:./freertos/src/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1545:./freertos/src/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1546:./freertos/src/queue.c **** 			become available.  As semaphores are implemented with queues the
1547:./freertos/src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1548:./freertos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2401              		.loc 1 1548 8
 2402 0170 F86A     		ldr	r0, [r7, #44]
 2403 0172 FFF7FEFF 		bl	prvIsQueueEmpty
 2404 0176 0346     		mov	r3, r0
 2405              		.loc 1 1548 6 discriminator 1
 2406 0178 002B     		cmp	r3, #0
 2407 017a 26D0     		beq	.L158
1549:./freertos/src/queue.c **** 			{
1550:./freertos/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1551:./freertos/src/queue.c **** 
1552:./freertos/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1553:./freertos/src/queue.c **** 				{
1554:./freertos/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2408              		.loc 1 1554 17
 2409 017c FB6A     		ldr	r3, [r7, #44]
 2410 017e 1B68     		ldr	r3, [r3]
 2411              		.loc 1 1554 8
 2412 0180 002B     		cmp	r3, #0
 2413 0182 09D1     		bne	.L159
1555:./freertos/src/queue.c **** 					{
1556:./freertos/src/queue.c **** 						taskENTER_CRITICAL();
 2414              		.loc 1 1556 7
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 75


 2415 0184 FFF7FEFF 		bl	vPortEnterCritical
1557:./freertos/src/queue.c **** 						{
1558:./freertos/src/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 2416              		.loc 1 1558 31
 2417 0188 FB6A     		ldr	r3, [r7, #44]
 2418 018a 9B68     		ldr	r3, [r3, #8]
 2419 018c 1846     		mov	r0, r3
 2420 018e FFF7FEFF 		bl	xTaskPriorityInherit
 2421 0192 3863     		str	r0, [r7, #48]
1559:./freertos/src/queue.c **** 						}
1560:./freertos/src/queue.c **** 						taskEXIT_CRITICAL();
 2422              		.loc 1 1560 7
 2423 0194 FFF7FEFF 		bl	vPortExitCritical
 2424              	.L159:
1561:./freertos/src/queue.c **** 					}
1562:./freertos/src/queue.c **** 					else
1563:./freertos/src/queue.c **** 					{
1564:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1565:./freertos/src/queue.c **** 					}
1566:./freertos/src/queue.c **** 				}
1567:./freertos/src/queue.c **** 				#endif
1568:./freertos/src/queue.c **** 
1569:./freertos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2425              		.loc 1 1569 5
 2426 0198 FB6A     		ldr	r3, [r7, #44]
 2427 019a 2433     		adds	r3, r3, #36
 2428 019c 3A68     		ldr	r2, [r7]
 2429 019e 1146     		mov	r1, r2
 2430 01a0 1846     		mov	r0, r3
 2431 01a2 FFF7FEFF 		bl	vTaskPlaceOnEventList
1570:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2432              		.loc 1 1570 5
 2433 01a6 F86A     		ldr	r0, [r7, #44]
 2434 01a8 FFF7FEFF 		bl	prvUnlockQueue
1571:./freertos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2435              		.loc 1 1571 9
 2436 01ac FFF7FEFF 		bl	xTaskResumeAll
 2437 01b0 0346     		mov	r3, r0
 2438              		.loc 1 1571 7 discriminator 1
 2439 01b2 002B     		cmp	r3, #0
 2440 01b4 7FF467AF 		bne	.L145
1572:./freertos/src/queue.c **** 				{
1573:./freertos/src/queue.c **** 					portYIELD_WITHIN_API();
 2441              		.loc 1 1573 6
 2442 01b8 184B     		ldr	r3, .L163
 2443 01ba 4FF08052 		mov	r2, #268435456
 2444 01be 1A60     		str	r2, [r3]
 2445              		.syntax unified
 2446              	@ 1573 "./freertos/src/queue.c" 1
 2447 01c0 BFF34F8F 		dsb
 2448              	@ 0 "" 2
 2449              	@ 1573 "./freertos/src/queue.c" 1
 2450 01c4 BFF36F8F 		isb
 2451              	@ 0 "" 2
 2452              		.thumb
 2453              		.syntax unified
 2454 01c8 5DE7     		b	.L145
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 76


 2455              	.L158:
1574:./freertos/src/queue.c **** 				}
1575:./freertos/src/queue.c **** 				else
1576:./freertos/src/queue.c **** 				{
1577:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1578:./freertos/src/queue.c **** 				}
1579:./freertos/src/queue.c **** 			}
1580:./freertos/src/queue.c **** 			else
1581:./freertos/src/queue.c **** 			{
1582:./freertos/src/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1583:./freertos/src/queue.c **** 				attempt to take the semaphore again. */
1584:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2456              		.loc 1 1584 5
 2457 01ca F86A     		ldr	r0, [r7, #44]
 2458 01cc FFF7FEFF 		bl	prvUnlockQueue
1585:./freertos/src/queue.c **** 				( void ) xTaskResumeAll();
 2459              		.loc 1 1585 14
 2460 01d0 FFF7FEFF 		bl	xTaskResumeAll
 2461 01d4 57E7     		b	.L145
 2462              	.L157:
1586:./freertos/src/queue.c **** 			}
1587:./freertos/src/queue.c **** 		}
1588:./freertos/src/queue.c **** 		else
1589:./freertos/src/queue.c **** 		{
1590:./freertos/src/queue.c **** 			/* Timed out. */
1591:./freertos/src/queue.c **** 			prvUnlockQueue( pxQueue );
 2463              		.loc 1 1591 4
 2464 01d6 F86A     		ldr	r0, [r7, #44]
 2465 01d8 FFF7FEFF 		bl	prvUnlockQueue
1592:./freertos/src/queue.c **** 			( void ) xTaskResumeAll();
 2466              		.loc 1 1592 13
 2467 01dc FFF7FEFF 		bl	xTaskResumeAll
1593:./freertos/src/queue.c **** 
1594:./freertos/src/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1595:./freertos/src/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1596:./freertos/src/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1597:./freertos/src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1598:./freertos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2468              		.loc 1 1598 8
 2469 01e0 F86A     		ldr	r0, [r7, #44]
 2470 01e2 FFF7FEFF 		bl	prvIsQueueEmpty
 2471 01e6 0346     		mov	r3, r0
 2472              		.loc 1 1598 6 discriminator 1
 2473 01e8 002B     		cmp	r3, #0
 2474 01ea 3FF44CAF 		beq	.L145
1599:./freertos/src/queue.c **** 			{
1600:./freertos/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1601:./freertos/src/queue.c **** 				{
1602:./freertos/src/queue.c **** 					/* xInheritanceOccurred could only have be set if
1603:./freertos/src/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1604:./freertos/src/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1605:./freertos/src/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
 2475              		.loc 1 1605 8
 2476 01ee 3B6B     		ldr	r3, [r7, #48]
 2477 01f0 002B     		cmp	r3, #0
 2478 01f2 0DD0     		beq	.L161
1606:./freertos/src/queue.c **** 					{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 77


1607:./freertos/src/queue.c **** 						taskENTER_CRITICAL();
 2479              		.loc 1 1607 7
 2480 01f4 FFF7FEFF 		bl	vPortEnterCritical
 2481              	.LBB160:
1608:./freertos/src/queue.c **** 						{
1609:./freertos/src/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1610:./freertos/src/queue.c **** 
1611:./freertos/src/queue.c **** 							/* This task blocking on the mutex caused another
1612:./freertos/src/queue.c **** 							task to inherit this task's priority.  Now this task
1613:./freertos/src/queue.c **** 							has timed out the priority should be disinherited
1614:./freertos/src/queue.c **** 							again, but only as low as the next highest priority
1615:./freertos/src/queue.c **** 							task that is waiting for the same mutex. */
1616:./freertos/src/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 2482              		.loc 1 1616 35
 2483 01f8 F86A     		ldr	r0, [r7, #44]
 2484 01fa FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2485 01fe 7862     		str	r0, [r7, #36]
1617:./freertos/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2486              		.loc 1 1617 8
 2487 0200 FB6A     		ldr	r3, [r7, #44]
 2488 0202 9B68     		ldr	r3, [r3, #8]
 2489 0204 796A     		ldr	r1, [r7, #36]
 2490 0206 1846     		mov	r0, r3
 2491 0208 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2492              	.LBE160:
1618:./freertos/src/queue.c **** 						}
1619:./freertos/src/queue.c **** 						taskEXIT_CRITICAL();
 2493              		.loc 1 1619 7
 2494 020c FFF7FEFF 		bl	vPortExitCritical
 2495              	.L161:
1620:./freertos/src/queue.c **** 					}
1621:./freertos/src/queue.c **** 				}
1622:./freertos/src/queue.c **** 				#endif /* configUSE_MUTEXES */
1623:./freertos/src/queue.c **** 
1624:./freertos/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1625:./freertos/src/queue.c **** 				return errQUEUE_EMPTY;
 2496              		.loc 1 1625 12
 2497 0210 0023     		movs	r3, #0
 2498              	.L162:
1626:./freertos/src/queue.c **** 			}
1627:./freertos/src/queue.c **** 			else
1628:./freertos/src/queue.c **** 			{
1629:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1630:./freertos/src/queue.c **** 			}
1631:./freertos/src/queue.c **** 		}
1632:./freertos/src/queue.c **** 	} /*lint -restore */
1633:./freertos/src/queue.c **** }
 2499              		.loc 1 1633 1
 2500 0212 1846     		mov	r0, r3
 2501 0214 3837     		adds	r7, r7, #56
 2502              	.LCFI63:
 2503              		.cfi_def_cfa_offset 8
 2504 0216 BD46     		mov	sp, r7
 2505              	.LCFI64:
 2506              		.cfi_def_cfa_register 13
 2507              		@ sp needed
 2508 0218 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 78


 2509              	.L164:
 2510 021a 00BF     		.align	2
 2511              	.L163:
 2512 021c 04ED00E0 		.word	-536810236
 2513              		.cfi_endproc
 2514              	.LFE73:
 2516              		.section	.text.xQueuePeek,"ax",%progbits
 2517              		.align	1
 2518              		.global	xQueuePeek
 2519              		.syntax unified
 2520              		.thumb
 2521              		.thumb_func
 2523              	xQueuePeek:
 2524              	.LFB74:
1634:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1635:./freertos/src/queue.c **** 
1636:./freertos/src/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1637:./freertos/src/queue.c **** {
 2525              		.loc 1 1637 1
 2526              		.cfi_startproc
 2527              		@ args = 0, pretend = 0, frame = 56
 2528              		@ frame_needed = 1, uses_anonymous_args = 0
 2529 0000 80B5     		push	{r7, lr}
 2530              	.LCFI65:
 2531              		.cfi_def_cfa_offset 8
 2532              		.cfi_offset 7, -8
 2533              		.cfi_offset 14, -4
 2534 0002 8EB0     		sub	sp, sp, #56
 2535              	.LCFI66:
 2536              		.cfi_def_cfa_offset 64
 2537 0004 00AF     		add	r7, sp, #0
 2538              	.LCFI67:
 2539              		.cfi_def_cfa_register 7
 2540 0006 F860     		str	r0, [r7, #12]
 2541 0008 B960     		str	r1, [r7, #8]
 2542 000a 7A60     		str	r2, [r7, #4]
1638:./freertos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2543              		.loc 1 1638 12
 2544 000c 0023     		movs	r3, #0
 2545 000e 7B63     		str	r3, [r7, #52]
1639:./freertos/src/queue.c **** TimeOut_t xTimeOut;
1640:./freertos/src/queue.c **** int8_t *pcOriginalReadPosition;
1641:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2546              		.loc 1 1641 17
 2547 0010 FB68     		ldr	r3, [r7, #12]
 2548 0012 3B63     		str	r3, [r7, #48]
1642:./freertos/src/queue.c **** 
1643:./freertos/src/queue.c **** 	/* Check the pointer is not NULL. */
1644:./freertos/src/queue.c **** 	configASSERT( ( pxQueue ) );
 2549              		.loc 1 1644 2
 2550 0014 3B6B     		ldr	r3, [r7, #48]
 2551 0016 002B     		cmp	r3, #0
 2552 0018 0BD1     		bne	.L166
 2553              	.LBB161:
 2554              	.LBB162:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2555              		.loc 2 197 2
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 79


 2556              		.syntax unified
 2557              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2558 001a 4FF05003 			mov r3, #80												
 2559 001e 83F31188 		msr basepri, r3											
 2560 0022 BFF36F8F 		isb														
 2561 0026 BFF34F8F 		dsb														
 2562              	
 2563              	@ 0 "" 2
 2564              		.thumb
 2565              		.syntax unified
 2566 002a 7B62     		str	r3, [r7, #36]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2567              		.loc 2 205 1
 2568 002c 00BF     		nop
 2569              	.L167:
 2570              	.LBE162:
 2571              	.LBE161:
 2572              		.loc 1 1644 2
 2573 002e 00BF     		nop
 2574 0030 FDE7     		b	.L167
 2575              	.L166:
1645:./freertos/src/queue.c **** 
1646:./freertos/src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1647:./freertos/src/queue.c **** 	is zero (so no data is copied into the buffer. */
1648:./freertos/src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
 2576              		.loc 1 1648 2
 2577 0032 BB68     		ldr	r3, [r7, #8]
 2578 0034 002B     		cmp	r3, #0
 2579 0036 03D1     		bne	.L168
 2580              		.loc 1 1648 2 is_stmt 0 discriminator 2
 2581 0038 3B6B     		ldr	r3, [r7, #48]
 2582 003a 1B6C     		ldr	r3, [r3, #64]
 2583 003c 002B     		cmp	r3, #0
 2584 003e 01D1     		bne	.L169
 2585              	.L168:
 2586              		.loc 1 1648 2 discriminator 3
 2587 0040 0123     		movs	r3, #1
 2588              		.loc 1 1648 2
 2589 0042 00E0     		b	.L170
 2590              	.L169:
 2591              		.loc 1 1648 2 discriminator 4
 2592 0044 0023     		movs	r3, #0
 2593              	.L170:
 2594              		.loc 1 1648 2 discriminator 6
 2595 0046 002B     		cmp	r3, #0
 2596 0048 0BD1     		bne	.L171
 2597              	.LBB163:
 2598              	.LBB164:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2599              		.loc 2 197 2 is_stmt 1
 2600              		.syntax unified
 2601              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2602 004a 4FF05003 			mov r3, #80												
 2603 004e 83F31188 		msr basepri, r3											
 2604 0052 BFF36F8F 		isb														
 2605 0056 BFF34F8F 		dsb														
 2606              	
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 80


 2607              	@ 0 "" 2
 2608              		.thumb
 2609              		.syntax unified
 2610 005a 3B62     		str	r3, [r7, #32]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2611              		.loc 2 205 1
 2612 005c 00BF     		nop
 2613              	.L172:
 2614              	.LBE164:
 2615              	.LBE163:
 2616              		.loc 1 1648 2
 2617 005e 00BF     		nop
 2618 0060 FDE7     		b	.L172
 2619              	.L171:
1649:./freertos/src/queue.c **** 
1650:./freertos/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1651:./freertos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1652:./freertos/src/queue.c **** 	{
1653:./freertos/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 2620              		.loc 1 1653 3
 2621 0062 FFF7FEFF 		bl	xTaskGetSchedulerState
 2622 0066 0346     		mov	r3, r0
 2623              		.loc 1 1653 3 is_stmt 0 discriminator 1
 2624 0068 002B     		cmp	r3, #0
 2625 006a 02D1     		bne	.L173
 2626              		.loc 1 1653 3 discriminator 2
 2627 006c 7B68     		ldr	r3, [r7, #4]
 2628 006e 002B     		cmp	r3, #0
 2629 0070 01D1     		bne	.L174
 2630              	.L173:
 2631              		.loc 1 1653 3 discriminator 3
 2632 0072 0123     		movs	r3, #1
 2633              		.loc 1 1653 3
 2634 0074 00E0     		b	.L175
 2635              	.L174:
 2636              		.loc 1 1653 3 discriminator 4
 2637 0076 0023     		movs	r3, #0
 2638              	.L175:
 2639              		.loc 1 1653 3 discriminator 6
 2640 0078 002B     		cmp	r3, #0
 2641 007a 0BD1     		bne	.L176
 2642              	.LBB165:
 2643              	.LBB166:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2644              		.loc 2 197 2 is_stmt 1
 2645              		.syntax unified
 2646              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2647 007c 4FF05003 			mov r3, #80												
 2648 0080 83F31188 		msr basepri, r3											
 2649 0084 BFF36F8F 		isb														
 2650 0088 BFF34F8F 		dsb														
 2651              	
 2652              	@ 0 "" 2
 2653              		.thumb
 2654              		.syntax unified
 2655 008c FB61     		str	r3, [r7, #28]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 81


 2656              		.loc 2 205 1
 2657 008e 00BF     		nop
 2658              	.L177:
 2659              	.LBE166:
 2660              	.LBE165:
 2661              		.loc 1 1653 3
 2662 0090 00BF     		nop
 2663 0092 FDE7     		b	.L177
 2664              	.L176:
1654:./freertos/src/queue.c **** 	}
1655:./freertos/src/queue.c **** 	#endif
1656:./freertos/src/queue.c **** 
1657:./freertos/src/queue.c **** 
1658:./freertos/src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1659:./freertos/src/queue.c **** 	allow return statements within the function itself.  This is done in the
1660:./freertos/src/queue.c **** 	interest of execution time efficiency. */
1661:./freertos/src/queue.c **** 	for( ;; )
1662:./freertos/src/queue.c **** 	{
1663:./freertos/src/queue.c **** 		taskENTER_CRITICAL();
 2665              		.loc 1 1663 3
 2666 0094 FFF7FEFF 		bl	vPortEnterCritical
 2667              	.LBB167:
1664:./freertos/src/queue.c **** 		{
1665:./freertos/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2668              		.loc 1 1665 22
 2669 0098 3B6B     		ldr	r3, [r7, #48]
 2670 009a 9B6B     		ldr	r3, [r3, #56]
 2671 009c FB62     		str	r3, [r7, #44]
1666:./freertos/src/queue.c **** 
1667:./freertos/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1668:./freertos/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1669:./freertos/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2672              		.loc 1 1669 6
 2673 009e FB6A     		ldr	r3, [r7, #44]
 2674 00a0 002B     		cmp	r3, #0
 2675 00a2 21D0     		beq	.L178
1670:./freertos/src/queue.c **** 			{
1671:./freertos/src/queue.c **** 				/* Remember the read position so it can be reset after the data
1672:./freertos/src/queue.c **** 				is read from the queue as this function is only peeking the
1673:./freertos/src/queue.c **** 				data, not removing it. */
1674:./freertos/src/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2676              		.loc 1 1674 28
 2677 00a4 3B6B     		ldr	r3, [r7, #48]
 2678 00a6 DB68     		ldr	r3, [r3, #12]
 2679 00a8 BB62     		str	r3, [r7, #40]
1675:./freertos/src/queue.c **** 
1676:./freertos/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 2680              		.loc 1 1676 5
 2681 00aa B968     		ldr	r1, [r7, #8]
 2682 00ac 386B     		ldr	r0, [r7, #48]
 2683 00ae FFF7FEFF 		bl	prvCopyDataFromQueue
1677:./freertos/src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1678:./freertos/src/queue.c **** 
1679:./freertos/src/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1680:./freertos/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2684              		.loc 1 1680 34
 2685 00b2 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 82


 2686 00b4 BA6A     		ldr	r2, [r7, #40]
 2687 00b6 DA60     		str	r2, [r3, #12]
1681:./freertos/src/queue.c **** 
1682:./freertos/src/queue.c **** 				/* The data is being left in the queue, so see if there are
1683:./freertos/src/queue.c **** 				any other tasks waiting for the data. */
1684:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2688              		.loc 1 1684 9
 2689 00b8 3B6B     		ldr	r3, [r7, #48]
 2690 00ba 5B6A     		ldr	r3, [r3, #36]
 2691              		.loc 1 1684 7
 2692 00bc 002B     		cmp	r3, #0
 2693 00be 0FD0     		beq	.L179
1685:./freertos/src/queue.c **** 				{
1686:./freertos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2694              		.loc 1 1686 36
 2695 00c0 3B6B     		ldr	r3, [r7, #48]
 2696 00c2 2433     		adds	r3, r3, #36
 2697              		.loc 1 1686 10
 2698 00c4 1846     		mov	r0, r3
 2699 00c6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2700 00ca 0346     		mov	r3, r0
 2701              		.loc 1 1686 8 discriminator 1
 2702 00cc 002B     		cmp	r3, #0
 2703 00ce 07D0     		beq	.L179
1687:./freertos/src/queue.c **** 					{
1688:./freertos/src/queue.c **** 						/* The task waiting has a higher priority than this task. */
1689:./freertos/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 2704              		.loc 1 1689 7
 2705 00d0 3C4B     		ldr	r3, .L189
 2706 00d2 4FF08052 		mov	r2, #268435456
 2707 00d6 1A60     		str	r2, [r3]
 2708              		.syntax unified
 2709              	@ 1689 "./freertos/src/queue.c" 1
 2710 00d8 BFF34F8F 		dsb
 2711              	@ 0 "" 2
 2712              	@ 1689 "./freertos/src/queue.c" 1
 2713 00dc BFF36F8F 		isb
 2714              	@ 0 "" 2
 2715              		.thumb
 2716              		.syntax unified
 2717              	.L179:
1690:./freertos/src/queue.c **** 					}
1691:./freertos/src/queue.c **** 					else
1692:./freertos/src/queue.c **** 					{
1693:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1694:./freertos/src/queue.c **** 					}
1695:./freertos/src/queue.c **** 				}
1696:./freertos/src/queue.c **** 				else
1697:./freertos/src/queue.c **** 				{
1698:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1699:./freertos/src/queue.c **** 				}
1700:./freertos/src/queue.c **** 
1701:./freertos/src/queue.c **** 				taskEXIT_CRITICAL();
 2718              		.loc 1 1701 5
 2719 00e0 FFF7FEFF 		bl	vPortExitCritical
1702:./freertos/src/queue.c **** 				return pdPASS;
 2720              		.loc 1 1702 12
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 83


 2721 00e4 0123     		movs	r3, #1
 2722 00e6 69E0     		b	.L188
 2723              	.L178:
1703:./freertos/src/queue.c **** 			}
1704:./freertos/src/queue.c **** 			else
1705:./freertos/src/queue.c **** 			{
1706:./freertos/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 2724              		.loc 1 1706 22
 2725 00e8 7B68     		ldr	r3, [r7, #4]
 2726              		.loc 1 1706 7
 2727 00ea 002B     		cmp	r3, #0
 2728 00ec 03D1     		bne	.L181
1707:./freertos/src/queue.c **** 				{
1708:./freertos/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1709:./freertos/src/queue.c **** 					the block time has expired) so leave now. */
1710:./freertos/src/queue.c **** 					taskEXIT_CRITICAL();
 2729              		.loc 1 1710 6
 2730 00ee FFF7FEFF 		bl	vPortExitCritical
1711:./freertos/src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1712:./freertos/src/queue.c **** 					return errQUEUE_EMPTY;
 2731              		.loc 1 1712 13
 2732 00f2 0023     		movs	r3, #0
 2733 00f4 62E0     		b	.L188
 2734              	.L181:
1713:./freertos/src/queue.c **** 				}
1714:./freertos/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 2735              		.loc 1 1714 12
 2736 00f6 7B6B     		ldr	r3, [r7, #52]
 2737 00f8 002B     		cmp	r3, #0
 2738 00fa 06D1     		bne	.L182
1715:./freertos/src/queue.c **** 				{
1716:./freertos/src/queue.c **** 					/* The queue was empty and a block time was specified so
1717:./freertos/src/queue.c **** 					configure the timeout structure ready to enter the blocked
1718:./freertos/src/queue.c **** 					state. */
1719:./freertos/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 2739              		.loc 1 1719 6
 2740 00fc 07F11403 		add	r3, r7, #20
 2741 0100 1846     		mov	r0, r3
 2742 0102 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1720:./freertos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 2743              		.loc 1 1720 20
 2744 0106 0123     		movs	r3, #1
 2745 0108 7B63     		str	r3, [r7, #52]
 2746              	.L182:
 2747              	.LBE167:
1721:./freertos/src/queue.c **** 				}
1722:./freertos/src/queue.c **** 				else
1723:./freertos/src/queue.c **** 				{
1724:./freertos/src/queue.c **** 					/* Entry time was already set. */
1725:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1726:./freertos/src/queue.c **** 				}
1727:./freertos/src/queue.c **** 			}
1728:./freertos/src/queue.c **** 		}
1729:./freertos/src/queue.c **** 		taskEXIT_CRITICAL();
 2748              		.loc 1 1729 3
 2749 010a FFF7FEFF 		bl	vPortExitCritical
1730:./freertos/src/queue.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 84


1731:./freertos/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1732:./freertos/src/queue.c **** 		now the critical section has been exited. */
1733:./freertos/src/queue.c **** 
1734:./freertos/src/queue.c **** 		vTaskSuspendAll();
 2750              		.loc 1 1734 3
 2751 010e FFF7FEFF 		bl	vTaskSuspendAll
1735:./freertos/src/queue.c **** 		prvLockQueue( pxQueue );
 2752              		.loc 1 1735 3
 2753 0112 FFF7FEFF 		bl	vPortEnterCritical
 2754              		.loc 1 1735 3 is_stmt 0 discriminator 1
 2755 0116 3B6B     		ldr	r3, [r7, #48]
 2756 0118 93F84430 		ldrb	r3, [r3, #68]
 2757 011c 5BB2     		sxtb	r3, r3
 2758 011e B3F1FF3F 		cmp	r3, #-1
 2759 0122 03D1     		bne	.L183
 2760 0124 3B6B     		ldr	r3, [r7, #48]
 2761 0126 0022     		movs	r2, #0
 2762 0128 83F84420 		strb	r2, [r3, #68]
 2763              	.L183:
 2764              		.loc 1 1735 3 discriminator 3
 2765 012c 3B6B     		ldr	r3, [r7, #48]
 2766 012e 93F84530 		ldrb	r3, [r3, #69]
 2767 0132 5BB2     		sxtb	r3, r3
 2768 0134 B3F1FF3F 		cmp	r3, #-1
 2769 0138 03D1     		bne	.L184
 2770              		.loc 1 1735 3 discriminator 4
 2771 013a 3B6B     		ldr	r3, [r7, #48]
 2772 013c 0022     		movs	r2, #0
 2773 013e 83F84520 		strb	r2, [r3, #69]
 2774              	.L184:
 2775              		.loc 1 1735 3 discriminator 6
 2776 0142 FFF7FEFF 		bl	vPortExitCritical
1736:./freertos/src/queue.c **** 
1737:./freertos/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1738:./freertos/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2777              		.loc 1 1738 7 is_stmt 1
 2778 0146 3A1D     		adds	r2, r7, #4
 2779 0148 07F11403 		add	r3, r7, #20
 2780 014c 1146     		mov	r1, r2
 2781 014e 1846     		mov	r0, r3
 2782 0150 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2783 0154 0346     		mov	r3, r0
 2784              		.loc 1 1738 5 discriminator 1
 2785 0156 002B     		cmp	r3, #0
 2786 0158 23D1     		bne	.L185
1739:./freertos/src/queue.c **** 		{
1740:./freertos/src/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1741:./freertos/src/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1742:./freertos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2787              		.loc 1 1742 8
 2788 015a 386B     		ldr	r0, [r7, #48]
 2789 015c FFF7FEFF 		bl	prvIsQueueEmpty
 2790 0160 0346     		mov	r3, r0
 2791              		.loc 1 1742 6 discriminator 1
 2792 0162 002B     		cmp	r3, #0
 2793 0164 17D0     		beq	.L186
1743:./freertos/src/queue.c **** 			{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 85


1744:./freertos/src/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1745:./freertos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2794              		.loc 1 1745 5
 2795 0166 3B6B     		ldr	r3, [r7, #48]
 2796 0168 2433     		adds	r3, r3, #36
 2797 016a 7A68     		ldr	r2, [r7, #4]
 2798 016c 1146     		mov	r1, r2
 2799 016e 1846     		mov	r0, r3
 2800 0170 FFF7FEFF 		bl	vTaskPlaceOnEventList
1746:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2801              		.loc 1 1746 5
 2802 0174 386B     		ldr	r0, [r7, #48]
 2803 0176 FFF7FEFF 		bl	prvUnlockQueue
1747:./freertos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2804              		.loc 1 1747 9
 2805 017a FFF7FEFF 		bl	xTaskResumeAll
 2806 017e 0346     		mov	r3, r0
 2807              		.loc 1 1747 7 discriminator 1
 2808 0180 002B     		cmp	r3, #0
 2809 0182 87D1     		bne	.L176
1748:./freertos/src/queue.c **** 				{
1749:./freertos/src/queue.c **** 					portYIELD_WITHIN_API();
 2810              		.loc 1 1749 6
 2811 0184 0F4B     		ldr	r3, .L189
 2812 0186 4FF08052 		mov	r2, #268435456
 2813 018a 1A60     		str	r2, [r3]
 2814              		.syntax unified
 2815              	@ 1749 "./freertos/src/queue.c" 1
 2816 018c BFF34F8F 		dsb
 2817              	@ 0 "" 2
 2818              	@ 1749 "./freertos/src/queue.c" 1
 2819 0190 BFF36F8F 		isb
 2820              	@ 0 "" 2
 2821              		.thumb
 2822              		.syntax unified
 2823 0194 7EE7     		b	.L176
 2824              	.L186:
1750:./freertos/src/queue.c **** 				}
1751:./freertos/src/queue.c **** 				else
1752:./freertos/src/queue.c **** 				{
1753:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1754:./freertos/src/queue.c **** 				}
1755:./freertos/src/queue.c **** 			}
1756:./freertos/src/queue.c **** 			else
1757:./freertos/src/queue.c **** 			{
1758:./freertos/src/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1759:./freertos/src/queue.c **** 				state, instead return to try and obtain the data. */
1760:./freertos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2825              		.loc 1 1760 5
 2826 0196 386B     		ldr	r0, [r7, #48]
 2827 0198 FFF7FEFF 		bl	prvUnlockQueue
1761:./freertos/src/queue.c **** 				( void ) xTaskResumeAll();
 2828              		.loc 1 1761 14
 2829 019c FFF7FEFF 		bl	xTaskResumeAll
 2830 01a0 78E7     		b	.L176
 2831              	.L185:
1762:./freertos/src/queue.c **** 			}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 86


1763:./freertos/src/queue.c **** 		}
1764:./freertos/src/queue.c **** 		else
1765:./freertos/src/queue.c **** 		{
1766:./freertos/src/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1767:./freertos/src/queue.c **** 			exit, otherwise go back and try to read the data again. */
1768:./freertos/src/queue.c **** 			prvUnlockQueue( pxQueue );
 2832              		.loc 1 1768 4
 2833 01a2 386B     		ldr	r0, [r7, #48]
 2834 01a4 FFF7FEFF 		bl	prvUnlockQueue
1769:./freertos/src/queue.c **** 			( void ) xTaskResumeAll();
 2835              		.loc 1 1769 13
 2836 01a8 FFF7FEFF 		bl	xTaskResumeAll
1770:./freertos/src/queue.c **** 
1771:./freertos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2837              		.loc 1 1771 8
 2838 01ac 386B     		ldr	r0, [r7, #48]
 2839 01ae FFF7FEFF 		bl	prvIsQueueEmpty
 2840 01b2 0346     		mov	r3, r0
 2841              		.loc 1 1771 6 discriminator 1
 2842 01b4 002B     		cmp	r3, #0
 2843 01b6 3FF46DAF 		beq	.L176
1772:./freertos/src/queue.c **** 			{
1773:./freertos/src/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1774:./freertos/src/queue.c **** 				return errQUEUE_EMPTY;
 2844              		.loc 1 1774 12
 2845 01ba 0023     		movs	r3, #0
 2846              	.L188:
1775:./freertos/src/queue.c **** 			}
1776:./freertos/src/queue.c **** 			else
1777:./freertos/src/queue.c **** 			{
1778:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1779:./freertos/src/queue.c **** 			}
1780:./freertos/src/queue.c **** 		}
1781:./freertos/src/queue.c **** 	} /*lint -restore */
1782:./freertos/src/queue.c **** }
 2847              		.loc 1 1782 1
 2848 01bc 1846     		mov	r0, r3
 2849 01be 3837     		adds	r7, r7, #56
 2850              	.LCFI68:
 2851              		.cfi_def_cfa_offset 8
 2852 01c0 BD46     		mov	sp, r7
 2853              	.LCFI69:
 2854              		.cfi_def_cfa_register 13
 2855              		@ sp needed
 2856 01c2 80BD     		pop	{r7, pc}
 2857              	.L190:
 2858              		.align	2
 2859              	.L189:
 2860 01c4 04ED00E0 		.word	-536810236
 2861              		.cfi_endproc
 2862              	.LFE74:
 2864              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2865              		.align	1
 2866              		.global	xQueueReceiveFromISR
 2867              		.syntax unified
 2868              		.thumb
 2869              		.thumb_func
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 87


 2871              	xQueueReceiveFromISR:
 2872              	.LFB75:
1783:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1784:./freertos/src/queue.c **** 
1785:./freertos/src/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1786:./freertos/src/queue.c **** {
 2873              		.loc 1 1786 1
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 56
 2876              		@ frame_needed = 1, uses_anonymous_args = 0
 2877 0000 80B5     		push	{r7, lr}
 2878              	.LCFI70:
 2879              		.cfi_def_cfa_offset 8
 2880              		.cfi_offset 7, -8
 2881              		.cfi_offset 14, -4
 2882 0002 8EB0     		sub	sp, sp, #56
 2883              	.LCFI71:
 2884              		.cfi_def_cfa_offset 64
 2885 0004 00AF     		add	r7, sp, #0
 2886              	.LCFI72:
 2887              		.cfi_def_cfa_register 7
 2888 0006 F860     		str	r0, [r7, #12]
 2889 0008 B960     		str	r1, [r7, #8]
 2890 000a 7A60     		str	r2, [r7, #4]
1787:./freertos/src/queue.c **** BaseType_t xReturn;
1788:./freertos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1789:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2891              		.loc 1 1789 17
 2892 000c FB68     		ldr	r3, [r7, #12]
 2893 000e 3B63     		str	r3, [r7, #48]
1790:./freertos/src/queue.c **** 
1791:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 2894              		.loc 1 1791 2
 2895 0010 3B6B     		ldr	r3, [r7, #48]
 2896 0012 002B     		cmp	r3, #0
 2897 0014 0BD1     		bne	.L192
 2898              	.LBB168:
 2899              	.LBB169:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2900              		.loc 2 197 2
 2901              		.syntax unified
 2902              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2903 0016 4FF05003 			mov r3, #80												
 2904 001a 83F31188 		msr basepri, r3											
 2905 001e BFF36F8F 		isb														
 2906 0022 BFF34F8F 		dsb														
 2907              	
 2908              	@ 0 "" 2
 2909              		.thumb
 2910              		.syntax unified
 2911 0026 3B62     		str	r3, [r7, #32]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2912              		.loc 2 205 1
 2913 0028 00BF     		nop
 2914              	.L193:
 2915              	.LBE169:
 2916              	.LBE168:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 88


 2917              		.loc 1 1791 2
 2918 002a 00BF     		nop
 2919 002c FDE7     		b	.L193
 2920              	.L192:
1792:./freertos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2921              		.loc 1 1792 2
 2922 002e BB68     		ldr	r3, [r7, #8]
 2923 0030 002B     		cmp	r3, #0
 2924 0032 03D1     		bne	.L194
 2925              		.loc 1 1792 2 is_stmt 0 discriminator 2
 2926 0034 3B6B     		ldr	r3, [r7, #48]
 2927 0036 1B6C     		ldr	r3, [r3, #64]
 2928 0038 002B     		cmp	r3, #0
 2929 003a 01D1     		bne	.L195
 2930              	.L194:
 2931              		.loc 1 1792 2 discriminator 3
 2932 003c 0123     		movs	r3, #1
 2933              		.loc 1 1792 2
 2934 003e 00E0     		b	.L196
 2935              	.L195:
 2936              		.loc 1 1792 2 discriminator 4
 2937 0040 0023     		movs	r3, #0
 2938              	.L196:
 2939              		.loc 1 1792 2 discriminator 6
 2940 0042 002B     		cmp	r3, #0
 2941 0044 0BD1     		bne	.L197
 2942              	.LBB170:
 2943              	.LBB171:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2944              		.loc 2 197 2 is_stmt 1
 2945              		.syntax unified
 2946              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2947 0046 4FF05003 			mov r3, #80												
 2948 004a 83F31188 		msr basepri, r3											
 2949 004e BFF36F8F 		isb														
 2950 0052 BFF34F8F 		dsb														
 2951              	
 2952              	@ 0 "" 2
 2953              		.thumb
 2954              		.syntax unified
 2955 0056 FB61     		str	r3, [r7, #28]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 2956              		.loc 2 205 1
 2957 0058 00BF     		nop
 2958              	.L198:
 2959              	.LBE171:
 2960              	.LBE170:
 2961              		.loc 1 1792 2
 2962 005a 00BF     		nop
 2963 005c FDE7     		b	.L198
 2964              	.L197:
1793:./freertos/src/queue.c **** 
1794:./freertos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1795:./freertos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1796:./freertos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1797:./freertos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1798:./freertos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 89


1799:./freertos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1800:./freertos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1801:./freertos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1802:./freertos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1803:./freertos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1804:./freertos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1805:./freertos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1806:./freertos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1807:./freertos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1808:./freertos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2965              		.loc 1 1808 2
 2966 005e FFF7FEFF 		bl	vPortValidateInterruptPriority
 2967              	.LBB172:
 2968              	.LBB173:
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2969              		.loc 2 213 2
 2970              		.syntax unified
 2971              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 2972 0062 EFF31182 			mrs r2, basepri											
 2973 0066 4FF05003 		mov r3, #80												
 2974 006a 83F31188 		msr basepri, r3											
 2975 006e BFF36F8F 		isb														
 2976 0072 BFF34F8F 		dsb														
 2977              	
 2978              	@ 0 "" 2
 2979              		.thumb
 2980              		.syntax unified
 2981 0076 BA61     		str	r2, [r7, #24]
 2982 0078 7B61     		str	r3, [r7, #20]
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 2983              		.loc 2 225 9
 2984 007a BB69     		ldr	r3, [r7, #24]
 2985              	.LBE173:
 2986              	.LBE172:
1809:./freertos/src/queue.c **** 
1810:./freertos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2987              		.loc 1 1810 27
 2988 007c FB62     		str	r3, [r7, #44]
 2989              	.LBB174:
1811:./freertos/src/queue.c **** 	{
1812:./freertos/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2990              		.loc 1 1812 21
 2991 007e 3B6B     		ldr	r3, [r7, #48]
 2992 0080 9B6B     		ldr	r3, [r3, #56]
 2993 0082 BB62     		str	r3, [r7, #40]
1813:./freertos/src/queue.c **** 
1814:./freertos/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1815:./freertos/src/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2994              		.loc 1 1815 5
 2995 0084 BB6A     		ldr	r3, [r7, #40]
 2996 0086 002B     		cmp	r3, #0
 2997 0088 2FD0     		beq	.L200
 2998              	.LBB175:
1816:./freertos/src/queue.c **** 		{
1817:./freertos/src/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 2999              		.loc 1 1817 17
 3000 008a 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 90


 3001 008c 93F84430 		ldrb	r3, [r3, #68]
 3002 0090 87F82730 		strb	r3, [r7, #39]
1818:./freertos/src/queue.c **** 
1819:./freertos/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1820:./freertos/src/queue.c **** 
1821:./freertos/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3003              		.loc 1 1821 4
 3004 0094 B968     		ldr	r1, [r7, #8]
 3005 0096 386B     		ldr	r0, [r7, #48]
 3006 0098 FFF7FEFF 		bl	prvCopyDataFromQueue
1822:./freertos/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3007              		.loc 1 1822 51
 3008 009c BB6A     		ldr	r3, [r7, #40]
 3009 009e 5A1E     		subs	r2, r3, #1
 3010              		.loc 1 1822 31
 3011 00a0 3B6B     		ldr	r3, [r7, #48]
 3012 00a2 9A63     		str	r2, [r3, #56]
1823:./freertos/src/queue.c **** 
1824:./freertos/src/queue.c **** 			/* If the queue is locked the event list will not be modified.
1825:./freertos/src/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1826:./freertos/src/queue.c **** 			will know that an ISR has removed data while the queue was
1827:./freertos/src/queue.c **** 			locked. */
1828:./freertos/src/queue.c **** 			if( cRxLock == queueUNLOCKED )
 3013              		.loc 1 1828 6
 3014 00a4 97F92730 		ldrsb	r3, [r7, #39]
 3015 00a8 B3F1FF3F 		cmp	r3, #-1
 3016 00ac 12D1     		bne	.L201
1829:./freertos/src/queue.c **** 			{
1830:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3017              		.loc 1 1830 9
 3018 00ae 3B6B     		ldr	r3, [r7, #48]
 3019 00b0 1B69     		ldr	r3, [r3, #16]
 3020              		.loc 1 1830 7
 3021 00b2 002B     		cmp	r3, #0
 3022 00b4 16D0     		beq	.L202
1831:./freertos/src/queue.c **** 				{
1832:./freertos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3023              		.loc 1 1832 36
 3024 00b6 3B6B     		ldr	r3, [r7, #48]
 3025 00b8 1033     		adds	r3, r3, #16
 3026              		.loc 1 1832 10
 3027 00ba 1846     		mov	r0, r3
 3028 00bc FFF7FEFF 		bl	xTaskRemoveFromEventList
 3029 00c0 0346     		mov	r3, r0
 3030              		.loc 1 1832 8 discriminator 1
 3031 00c2 002B     		cmp	r3, #0
 3032 00c4 0ED0     		beq	.L202
1833:./freertos/src/queue.c **** 					{
1834:./freertos/src/queue.c **** 						/* The task waiting has a higher priority than us so
1835:./freertos/src/queue.c **** 						force a context switch. */
1836:./freertos/src/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 3033              		.loc 1 1836 9
 3034 00c6 7B68     		ldr	r3, [r7, #4]
 3035 00c8 002B     		cmp	r3, #0
 3036 00ca 0BD0     		beq	.L202
1837:./freertos/src/queue.c **** 						{
1838:./freertos/src/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 91


 3037              		.loc 1 1838 35
 3038 00cc 7B68     		ldr	r3, [r7, #4]
 3039 00ce 0122     		movs	r2, #1
 3040 00d0 1A60     		str	r2, [r3]
 3041 00d2 07E0     		b	.L202
 3042              	.L201:
1839:./freertos/src/queue.c **** 						}
1840:./freertos/src/queue.c **** 						else
1841:./freertos/src/queue.c **** 						{
1842:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:./freertos/src/queue.c **** 						}
1844:./freertos/src/queue.c **** 					}
1845:./freertos/src/queue.c **** 					else
1846:./freertos/src/queue.c **** 					{
1847:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1848:./freertos/src/queue.c **** 					}
1849:./freertos/src/queue.c **** 				}
1850:./freertos/src/queue.c **** 				else
1851:./freertos/src/queue.c **** 				{
1852:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1853:./freertos/src/queue.c **** 				}
1854:./freertos/src/queue.c **** 			}
1855:./freertos/src/queue.c **** 			else
1856:./freertos/src/queue.c **** 			{
1857:./freertos/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1858:./freertos/src/queue.c **** 				knows that data was removed while it was locked. */
1859:./freertos/src/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 3043              		.loc 1 1859 45
 3044 00d4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3045 00d8 0133     		adds	r3, r3, #1
 3046 00da DBB2     		uxtb	r3, r3
 3047              		.loc 1 1859 24
 3048 00dc 5AB2     		sxtb	r2, r3
 3049              		.loc 1 1859 22
 3050 00de 3B6B     		ldr	r3, [r7, #48]
 3051 00e0 83F84420 		strb	r2, [r3, #68]
 3052              	.L202:
1860:./freertos/src/queue.c **** 			}
1861:./freertos/src/queue.c **** 
1862:./freertos/src/queue.c **** 			xReturn = pdPASS;
 3053              		.loc 1 1862 12
 3054 00e4 0123     		movs	r3, #1
 3055 00e6 7B63     		str	r3, [r7, #52]
 3056              	.LBE175:
 3057 00e8 01E0     		b	.L203
 3058              	.L200:
1863:./freertos/src/queue.c **** 		}
1864:./freertos/src/queue.c **** 		else
1865:./freertos/src/queue.c **** 		{
1866:./freertos/src/queue.c **** 			xReturn = pdFAIL;
 3059              		.loc 1 1866 12
 3060 00ea 0023     		movs	r3, #0
 3061 00ec 7B63     		str	r3, [r7, #52]
 3062              	.L203:
 3063 00ee FB6A     		ldr	r3, [r7, #44]
 3064 00f0 3B61     		str	r3, [r7, #16]
 3065              	.LBE174:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 92


 3066              	.LBB176:
 3067              	.LBB177:
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3068              		.loc 2 231 2
 3069 00f2 3B69     		ldr	r3, [r7, #16]
 3070              		.syntax unified
 3071              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3072 00f4 83F31188 			msr basepri, r3	
 3073              	@ 0 "" 2
 3074              		.loc 2 235 1
 3075              		.thumb
 3076              		.syntax unified
 3077 00f8 00BF     		nop
 3078              	.LBE177:
 3079              	.LBE176:
1867:./freertos/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1868:./freertos/src/queue.c **** 		}
1869:./freertos/src/queue.c **** 	}
1870:./freertos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1871:./freertos/src/queue.c **** 
1872:./freertos/src/queue.c **** 	return xReturn;
 3080              		.loc 1 1872 9
 3081 00fa 7B6B     		ldr	r3, [r7, #52]
1873:./freertos/src/queue.c **** }
 3082              		.loc 1 1873 1
 3083 00fc 1846     		mov	r0, r3
 3084 00fe 3837     		adds	r7, r7, #56
 3085              	.LCFI73:
 3086              		.cfi_def_cfa_offset 8
 3087 0100 BD46     		mov	sp, r7
 3088              	.LCFI74:
 3089              		.cfi_def_cfa_register 13
 3090              		@ sp needed
 3091 0102 80BD     		pop	{r7, pc}
 3092              		.cfi_endproc
 3093              	.LFE75:
 3095              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3096              		.align	1
 3097              		.global	xQueuePeekFromISR
 3098              		.syntax unified
 3099              		.thumb
 3100              		.thumb_func
 3102              	xQueuePeekFromISR:
 3103              	.LFB76:
1874:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1875:./freertos/src/queue.c **** 
1876:./freertos/src/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1877:./freertos/src/queue.c **** {
 3104              		.loc 1 1877 1
 3105              		.cfi_startproc
 3106              		@ args = 0, pretend = 0, frame = 48
 3107              		@ frame_needed = 1, uses_anonymous_args = 0
 3108 0000 80B5     		push	{r7, lr}
 3109              	.LCFI75:
 3110              		.cfi_def_cfa_offset 8
 3111              		.cfi_offset 7, -8
 3112              		.cfi_offset 14, -4
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 93


 3113 0002 8CB0     		sub	sp, sp, #48
 3114              	.LCFI76:
 3115              		.cfi_def_cfa_offset 56
 3116 0004 00AF     		add	r7, sp, #0
 3117              	.LCFI77:
 3118              		.cfi_def_cfa_register 7
 3119 0006 7860     		str	r0, [r7, #4]
 3120 0008 3960     		str	r1, [r7]
1878:./freertos/src/queue.c **** BaseType_t xReturn;
1879:./freertos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1880:./freertos/src/queue.c **** int8_t *pcOriginalReadPosition;
1881:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3121              		.loc 1 1881 17
 3122 000a 7B68     		ldr	r3, [r7, #4]
 3123 000c BB62     		str	r3, [r7, #40]
1882:./freertos/src/queue.c **** 
1883:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 3124              		.loc 1 1883 2
 3125 000e BB6A     		ldr	r3, [r7, #40]
 3126 0010 002B     		cmp	r3, #0
 3127 0012 0BD1     		bne	.L206
 3128              	.LBB178:
 3129              	.LBB179:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3130              		.loc 2 197 2
 3131              		.syntax unified
 3132              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3133 0014 4FF05003 			mov r3, #80												
 3134 0018 83F31188 		msr basepri, r3											
 3135 001c BFF36F8F 		isb														
 3136 0020 BFF34F8F 		dsb														
 3137              	
 3138              	@ 0 "" 2
 3139              		.thumb
 3140              		.syntax unified
 3141 0024 FB61     		str	r3, [r7, #28]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3142              		.loc 2 205 1
 3143 0026 00BF     		nop
 3144              	.L207:
 3145              	.LBE179:
 3146              	.LBE178:
 3147              		.loc 1 1883 2
 3148 0028 00BF     		nop
 3149 002a FDE7     		b	.L207
 3150              	.L206:
1884:./freertos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3151              		.loc 1 1884 2
 3152 002c 3B68     		ldr	r3, [r7]
 3153 002e 002B     		cmp	r3, #0
 3154 0030 03D1     		bne	.L208
 3155              		.loc 1 1884 2 is_stmt 0 discriminator 2
 3156 0032 BB6A     		ldr	r3, [r7, #40]
 3157 0034 1B6C     		ldr	r3, [r3, #64]
 3158 0036 002B     		cmp	r3, #0
 3159 0038 01D1     		bne	.L209
 3160              	.L208:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 94


 3161              		.loc 1 1884 2 discriminator 3
 3162 003a 0123     		movs	r3, #1
 3163              		.loc 1 1884 2
 3164 003c 00E0     		b	.L210
 3165              	.L209:
 3166              		.loc 1 1884 2 discriminator 4
 3167 003e 0023     		movs	r3, #0
 3168              	.L210:
 3169              		.loc 1 1884 2 discriminator 6
 3170 0040 002B     		cmp	r3, #0
 3171 0042 0BD1     		bne	.L211
 3172              	.LBB180:
 3173              	.LBB181:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3174              		.loc 2 197 2 is_stmt 1
 3175              		.syntax unified
 3176              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3177 0044 4FF05003 			mov r3, #80												
 3178 0048 83F31188 		msr basepri, r3											
 3179 004c BFF36F8F 		isb														
 3180 0050 BFF34F8F 		dsb														
 3181              	
 3182              	@ 0 "" 2
 3183              		.thumb
 3184              		.syntax unified
 3185 0054 BB61     		str	r3, [r7, #24]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3186              		.loc 2 205 1
 3187 0056 00BF     		nop
 3188              	.L212:
 3189              	.LBE181:
 3190              	.LBE180:
 3191              		.loc 1 1884 2
 3192 0058 00BF     		nop
 3193 005a FDE7     		b	.L212
 3194              	.L211:
1885:./freertos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3195              		.loc 1 1885 2
 3196 005c BB6A     		ldr	r3, [r7, #40]
 3197 005e 1B6C     		ldr	r3, [r3, #64]
 3198 0060 002B     		cmp	r3, #0
 3199 0062 0BD1     		bne	.L213
 3200              	.LBB182:
 3201              	.LBB183:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3202              		.loc 2 197 2
 3203              		.syntax unified
 3204              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3205 0064 4FF05003 			mov r3, #80												
 3206 0068 83F31188 		msr basepri, r3											
 3207 006c BFF36F8F 		isb														
 3208 0070 BFF34F8F 		dsb														
 3209              	
 3210              	@ 0 "" 2
 3211              		.thumb
 3212              		.syntax unified
 3213 0074 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 95


 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3214              		.loc 2 205 1
 3215 0076 00BF     		nop
 3216              	.L214:
 3217              	.LBE183:
 3218              	.LBE182:
 3219              		.loc 1 1885 2
 3220 0078 00BF     		nop
 3221 007a FDE7     		b	.L214
 3222              	.L213:
1886:./freertos/src/queue.c **** 
1887:./freertos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1888:./freertos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1889:./freertos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1890:./freertos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1891:./freertos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1892:./freertos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1893:./freertos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1894:./freertos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1895:./freertos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1896:./freertos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1897:./freertos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1898:./freertos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1899:./freertos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1900:./freertos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1901:./freertos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3223              		.loc 1 1901 2
 3224 007c FFF7FEFF 		bl	vPortValidateInterruptPriority
 3225              	.LBB184:
 3226              	.LBB185:
 213:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3227              		.loc 2 213 2
 3228              		.syntax unified
 3229              	@ 213 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3230 0080 EFF31182 			mrs r2, basepri											
 3231 0084 4FF05003 		mov r3, #80												
 3232 0088 83F31188 		msr basepri, r3											
 3233 008c BFF36F8F 		isb														
 3234 0090 BFF34F8F 		dsb														
 3235              	
 3236              	@ 0 "" 2
 3237              		.thumb
 3238              		.syntax unified
 3239 0094 3A61     		str	r2, [r7, #16]
 3240 0096 FB60     		str	r3, [r7, #12]
 225:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** }
 3241              		.loc 2 225 9
 3242 0098 3B69     		ldr	r3, [r7, #16]
 3243              	.LBE185:
 3244              	.LBE184:
1902:./freertos/src/queue.c **** 
1903:./freertos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3245              		.loc 1 1903 27
 3246 009a 7B62     		str	r3, [r7, #36]
1904:./freertos/src/queue.c **** 	{
1905:./freertos/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1906:./freertos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 96


 3247              		.loc 1 1906 14
 3248 009c BB6A     		ldr	r3, [r7, #40]
 3249 009e 9B6B     		ldr	r3, [r3, #56]
 3250              		.loc 1 1906 5
 3251 00a0 002B     		cmp	r3, #0
 3252 00a2 0CD0     		beq	.L216
1907:./freertos/src/queue.c **** 		{
1908:./freertos/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1909:./freertos/src/queue.c **** 
1910:./freertos/src/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1911:./freertos/src/queue.c **** 			actually being removed from the queue. */
1912:./freertos/src/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 3253              		.loc 1 1912 27
 3254 00a4 BB6A     		ldr	r3, [r7, #40]
 3255 00a6 DB68     		ldr	r3, [r3, #12]
 3256 00a8 3B62     		str	r3, [r7, #32]
1913:./freertos/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3257              		.loc 1 1913 4
 3258 00aa 3968     		ldr	r1, [r7]
 3259 00ac B86A     		ldr	r0, [r7, #40]
 3260 00ae FFF7FEFF 		bl	prvCopyDataFromQueue
1914:./freertos/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3261              		.loc 1 1914 33
 3262 00b2 BB6A     		ldr	r3, [r7, #40]
 3263 00b4 3A6A     		ldr	r2, [r7, #32]
 3264 00b6 DA60     		str	r2, [r3, #12]
1915:./freertos/src/queue.c **** 
1916:./freertos/src/queue.c **** 			xReturn = pdPASS;
 3265              		.loc 1 1916 12
 3266 00b8 0123     		movs	r3, #1
 3267 00ba FB62     		str	r3, [r7, #44]
 3268 00bc 01E0     		b	.L217
 3269              	.L216:
1917:./freertos/src/queue.c **** 		}
1918:./freertos/src/queue.c **** 		else
1919:./freertos/src/queue.c **** 		{
1920:./freertos/src/queue.c **** 			xReturn = pdFAIL;
 3270              		.loc 1 1920 12
 3271 00be 0023     		movs	r3, #0
 3272 00c0 FB62     		str	r3, [r7, #44]
 3273              	.L217:
 3274 00c2 7B6A     		ldr	r3, [r7, #36]
 3275 00c4 BB60     		str	r3, [r7, #8]
 3276              	.LBB186:
 3277              	.LBB187:
 231:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3278              		.loc 2 231 2
 3279 00c6 BB68     		ldr	r3, [r7, #8]
 3280              		.syntax unified
 3281              	@ 231 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3282 00c8 83F31188 			msr basepri, r3	
 3283              	@ 0 "" 2
 3284              		.loc 2 235 1
 3285              		.thumb
 3286              		.syntax unified
 3287 00cc 00BF     		nop
 3288              	.LBE187:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 97


 3289              	.LBE186:
1921:./freertos/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1922:./freertos/src/queue.c **** 		}
1923:./freertos/src/queue.c **** 	}
1924:./freertos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1925:./freertos/src/queue.c **** 
1926:./freertos/src/queue.c **** 	return xReturn;
 3290              		.loc 1 1926 9
 3291 00ce FB6A     		ldr	r3, [r7, #44]
1927:./freertos/src/queue.c **** }
 3292              		.loc 1 1927 1
 3293 00d0 1846     		mov	r0, r3
 3294 00d2 3037     		adds	r7, r7, #48
 3295              	.LCFI78:
 3296              		.cfi_def_cfa_offset 8
 3297 00d4 BD46     		mov	sp, r7
 3298              	.LCFI79:
 3299              		.cfi_def_cfa_register 13
 3300              		@ sp needed
 3301 00d6 80BD     		pop	{r7, pc}
 3302              		.cfi_endproc
 3303              	.LFE76:
 3305              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3306              		.align	1
 3307              		.global	uxQueueMessagesWaiting
 3308              		.syntax unified
 3309              		.thumb
 3310              		.thumb_func
 3312              	uxQueueMessagesWaiting:
 3313              	.LFB77:
1928:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1929:./freertos/src/queue.c **** 
1930:./freertos/src/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1931:./freertos/src/queue.c **** {
 3314              		.loc 1 1931 1
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 16
 3317              		@ frame_needed = 1, uses_anonymous_args = 0
 3318 0000 80B5     		push	{r7, lr}
 3319              	.LCFI80:
 3320              		.cfi_def_cfa_offset 8
 3321              		.cfi_offset 7, -8
 3322              		.cfi_offset 14, -4
 3323 0002 84B0     		sub	sp, sp, #16
 3324              	.LCFI81:
 3325              		.cfi_def_cfa_offset 24
 3326 0004 00AF     		add	r7, sp, #0
 3327              	.LCFI82:
 3328              		.cfi_def_cfa_register 7
 3329 0006 7860     		str	r0, [r7, #4]
1932:./freertos/src/queue.c **** UBaseType_t uxReturn;
1933:./freertos/src/queue.c **** 
1934:./freertos/src/queue.c **** 	configASSERT( xQueue );
 3330              		.loc 1 1934 2
 3331 0008 7B68     		ldr	r3, [r7, #4]
 3332 000a 002B     		cmp	r3, #0
 3333 000c 0BD1     		bne	.L220
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 98


 3334              	.LBB188:
 3335              	.LBB189:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3336              		.loc 2 197 2
 3337              		.syntax unified
 3338              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3339 000e 4FF05003 			mov r3, #80												
 3340 0012 83F31188 		msr basepri, r3											
 3341 0016 BFF36F8F 		isb														
 3342 001a BFF34F8F 		dsb														
 3343              	
 3344              	@ 0 "" 2
 3345              		.thumb
 3346              		.syntax unified
 3347 001e BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3348              		.loc 2 205 1
 3349 0020 00BF     		nop
 3350              	.L221:
 3351              	.LBE189:
 3352              	.LBE188:
 3353              		.loc 1 1934 2
 3354 0022 00BF     		nop
 3355 0024 FDE7     		b	.L221
 3356              	.L220:
1935:./freertos/src/queue.c **** 
1936:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
 3357              		.loc 1 1936 2
 3358 0026 FFF7FEFF 		bl	vPortEnterCritical
1937:./freertos/src/queue.c **** 	{
1938:./freertos/src/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 3359              		.loc 1 1938 12
 3360 002a 7B68     		ldr	r3, [r7, #4]
 3361 002c 9B6B     		ldr	r3, [r3, #56]
 3362 002e FB60     		str	r3, [r7, #12]
1939:./freertos/src/queue.c **** 	}
1940:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 3363              		.loc 1 1940 2
 3364 0030 FFF7FEFF 		bl	vPortExitCritical
1941:./freertos/src/queue.c **** 
1942:./freertos/src/queue.c **** 	return uxReturn;
 3365              		.loc 1 1942 9
 3366 0034 FB68     		ldr	r3, [r7, #12]
1943:./freertos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3367              		.loc 1 1943 1
 3368 0036 1846     		mov	r0, r3
 3369 0038 1037     		adds	r7, r7, #16
 3370              	.LCFI83:
 3371              		.cfi_def_cfa_offset 8
 3372 003a BD46     		mov	sp, r7
 3373              	.LCFI84:
 3374              		.cfi_def_cfa_register 13
 3375              		@ sp needed
 3376 003c 80BD     		pop	{r7, pc}
 3377              		.cfi_endproc
 3378              	.LFE77:
 3380              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 99


 3381              		.align	1
 3382              		.global	uxQueueSpacesAvailable
 3383              		.syntax unified
 3384              		.thumb
 3385              		.thumb_func
 3387              	uxQueueSpacesAvailable:
 3388              	.LFB78:
1944:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1945:./freertos/src/queue.c **** 
1946:./freertos/src/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1947:./freertos/src/queue.c **** {
 3389              		.loc 1 1947 1
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 24
 3392              		@ frame_needed = 1, uses_anonymous_args = 0
 3393 0000 80B5     		push	{r7, lr}
 3394              	.LCFI85:
 3395              		.cfi_def_cfa_offset 8
 3396              		.cfi_offset 7, -8
 3397              		.cfi_offset 14, -4
 3398 0002 86B0     		sub	sp, sp, #24
 3399              	.LCFI86:
 3400              		.cfi_def_cfa_offset 32
 3401 0004 00AF     		add	r7, sp, #0
 3402              	.LCFI87:
 3403              		.cfi_def_cfa_register 7
 3404 0006 7860     		str	r0, [r7, #4]
1948:./freertos/src/queue.c **** UBaseType_t uxReturn;
1949:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3405              		.loc 1 1949 17
 3406 0008 7B68     		ldr	r3, [r7, #4]
 3407 000a 7B61     		str	r3, [r7, #20]
1950:./freertos/src/queue.c **** 
1951:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 3408              		.loc 1 1951 2
 3409 000c 7B69     		ldr	r3, [r7, #20]
 3410 000e 002B     		cmp	r3, #0
 3411 0010 0BD1     		bne	.L224
 3412              	.LBB190:
 3413              	.LBB191:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3414              		.loc 2 197 2
 3415              		.syntax unified
 3416              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3417 0012 4FF05003 			mov r3, #80												
 3418 0016 83F31188 		msr basepri, r3											
 3419 001a BFF36F8F 		isb														
 3420 001e BFF34F8F 		dsb														
 3421              	
 3422              	@ 0 "" 2
 3423              		.thumb
 3424              		.syntax unified
 3425 0022 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3426              		.loc 2 205 1
 3427 0024 00BF     		nop
 3428              	.L225:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 100


 3429              	.LBE191:
 3430              	.LBE190:
 3431              		.loc 1 1951 2
 3432 0026 00BF     		nop
 3433 0028 FDE7     		b	.L225
 3434              	.L224:
1952:./freertos/src/queue.c **** 
1953:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
 3435              		.loc 1 1953 2
 3436 002a FFF7FEFF 		bl	vPortEnterCritical
1954:./freertos/src/queue.c **** 	{
1955:./freertos/src/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 3437              		.loc 1 1955 21
 3438 002e 7B69     		ldr	r3, [r7, #20]
 3439 0030 DA6B     		ldr	r2, [r3, #60]
 3440              		.loc 1 1955 41
 3441 0032 7B69     		ldr	r3, [r7, #20]
 3442 0034 9B6B     		ldr	r3, [r3, #56]
 3443              		.loc 1 1955 12
 3444 0036 D31A     		subs	r3, r2, r3
 3445 0038 3B61     		str	r3, [r7, #16]
1956:./freertos/src/queue.c **** 	}
1957:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 3446              		.loc 1 1957 2
 3447 003a FFF7FEFF 		bl	vPortExitCritical
1958:./freertos/src/queue.c **** 
1959:./freertos/src/queue.c **** 	return uxReturn;
 3448              		.loc 1 1959 9
 3449 003e 3B69     		ldr	r3, [r7, #16]
1960:./freertos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3450              		.loc 1 1960 1
 3451 0040 1846     		mov	r0, r3
 3452 0042 1837     		adds	r7, r7, #24
 3453              	.LCFI88:
 3454              		.cfi_def_cfa_offset 8
 3455 0044 BD46     		mov	sp, r7
 3456              	.LCFI89:
 3457              		.cfi_def_cfa_register 13
 3458              		@ sp needed
 3459 0046 80BD     		pop	{r7, pc}
 3460              		.cfi_endproc
 3461              	.LFE78:
 3463              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3464              		.align	1
 3465              		.global	uxQueueMessagesWaitingFromISR
 3466              		.syntax unified
 3467              		.thumb
 3468              		.thumb_func
 3470              	uxQueueMessagesWaitingFromISR:
 3471              	.LFB79:
1961:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1962:./freertos/src/queue.c **** 
1963:./freertos/src/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1964:./freertos/src/queue.c **** {
 3472              		.loc 1 1964 1
 3473              		.cfi_startproc
 3474              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 101


 3475              		@ frame_needed = 1, uses_anonymous_args = 0
 3476              		@ link register save eliminated.
 3477 0000 80B4     		push	{r7}
 3478              	.LCFI90:
 3479              		.cfi_def_cfa_offset 4
 3480              		.cfi_offset 7, -4
 3481 0002 87B0     		sub	sp, sp, #28
 3482              	.LCFI91:
 3483              		.cfi_def_cfa_offset 32
 3484 0004 00AF     		add	r7, sp, #0
 3485              	.LCFI92:
 3486              		.cfi_def_cfa_register 7
 3487 0006 7860     		str	r0, [r7, #4]
1965:./freertos/src/queue.c **** UBaseType_t uxReturn;
1966:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3488              		.loc 1 1966 17
 3489 0008 7B68     		ldr	r3, [r7, #4]
 3490 000a 7B61     		str	r3, [r7, #20]
1967:./freertos/src/queue.c **** 
1968:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 3491              		.loc 1 1968 2
 3492 000c 7B69     		ldr	r3, [r7, #20]
 3493 000e 002B     		cmp	r3, #0
 3494 0010 0BD1     		bne	.L228
 3495              	.LBB192:
 3496              	.LBB193:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3497              		.loc 2 197 2
 3498              		.syntax unified
 3499              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3500 0012 4FF05003 			mov r3, #80												
 3501 0016 83F31188 		msr basepri, r3											
 3502 001a BFF36F8F 		isb														
 3503 001e BFF34F8F 		dsb														
 3504              	
 3505              	@ 0 "" 2
 3506              		.thumb
 3507              		.syntax unified
 3508 0022 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3509              		.loc 2 205 1
 3510 0024 00BF     		nop
 3511              	.L229:
 3512              	.LBE193:
 3513              	.LBE192:
 3514              		.loc 1 1968 2
 3515 0026 00BF     		nop
 3516 0028 FDE7     		b	.L229
 3517              	.L228:
1969:./freertos/src/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 3518              		.loc 1 1969 11
 3519 002a 7B69     		ldr	r3, [r7, #20]
 3520 002c 9B6B     		ldr	r3, [r3, #56]
 3521 002e 3B61     		str	r3, [r7, #16]
1970:./freertos/src/queue.c **** 
1971:./freertos/src/queue.c **** 	return uxReturn;
 3522              		.loc 1 1971 9
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 102


 3523 0030 3B69     		ldr	r3, [r7, #16]
1972:./freertos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3524              		.loc 1 1972 1
 3525 0032 1846     		mov	r0, r3
 3526 0034 1C37     		adds	r7, r7, #28
 3527              	.LCFI93:
 3528              		.cfi_def_cfa_offset 4
 3529 0036 BD46     		mov	sp, r7
 3530              	.LCFI94:
 3531              		.cfi_def_cfa_register 13
 3532              		@ sp needed
 3533 0038 80BC     		pop	{r7}
 3534              	.LCFI95:
 3535              		.cfi_restore 7
 3536              		.cfi_def_cfa_offset 0
 3537 003a 7047     		bx	lr
 3538              		.cfi_endproc
 3539              	.LFE79:
 3541              		.section	.text.vQueueDelete,"ax",%progbits
 3542              		.align	1
 3543              		.global	vQueueDelete
 3544              		.syntax unified
 3545              		.thumb
 3546              		.thumb_func
 3548              	vQueueDelete:
 3549              	.LFB80:
1973:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
1974:./freertos/src/queue.c **** 
1975:./freertos/src/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1976:./freertos/src/queue.c **** {
 3550              		.loc 1 1976 1
 3551              		.cfi_startproc
 3552              		@ args = 0, pretend = 0, frame = 16
 3553              		@ frame_needed = 1, uses_anonymous_args = 0
 3554 0000 80B5     		push	{r7, lr}
 3555              	.LCFI96:
 3556              		.cfi_def_cfa_offset 8
 3557              		.cfi_offset 7, -8
 3558              		.cfi_offset 14, -4
 3559 0002 84B0     		sub	sp, sp, #16
 3560              	.LCFI97:
 3561              		.cfi_def_cfa_offset 24
 3562 0004 00AF     		add	r7, sp, #0
 3563              	.LCFI98:
 3564              		.cfi_def_cfa_register 7
 3565 0006 7860     		str	r0, [r7, #4]
1977:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3566              		.loc 1 1977 17
 3567 0008 7B68     		ldr	r3, [r7, #4]
 3568 000a FB60     		str	r3, [r7, #12]
1978:./freertos/src/queue.c **** 
1979:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 3569              		.loc 1 1979 2
 3570 000c FB68     		ldr	r3, [r7, #12]
 3571 000e 002B     		cmp	r3, #0
 3572 0010 0BD1     		bne	.L232
 3573              	.LBB194:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 103


 3574              	.LBB195:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3575              		.loc 2 197 2
 3576              		.syntax unified
 3577              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 3578 0012 4FF05003 			mov r3, #80												
 3579 0016 83F31188 		msr basepri, r3											
 3580 001a BFF36F8F 		isb														
 3581 001e BFF34F8F 		dsb														
 3582              	
 3583              	@ 0 "" 2
 3584              		.thumb
 3585              		.syntax unified
 3586 0022 BB60     		str	r3, [r7, #8]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 3587              		.loc 2 205 1
 3588 0024 00BF     		nop
 3589              	.L233:
 3590              	.LBE195:
 3591              	.LBE194:
 3592              		.loc 1 1979 2
 3593 0026 00BF     		nop
 3594 0028 FDE7     		b	.L233
 3595              	.L232:
1980:./freertos/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1981:./freertos/src/queue.c **** 
1982:./freertos/src/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1983:./freertos/src/queue.c **** 	{
1984:./freertos/src/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 3596              		.loc 1 1984 3
 3597 002a F868     		ldr	r0, [r7, #12]
 3598 002c FFF7FEFF 		bl	vQueueUnregisterQueue
1985:./freertos/src/queue.c **** 	}
1986:./freertos/src/queue.c **** 	#endif
1987:./freertos/src/queue.c **** 
1988:./freertos/src/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1989:./freertos/src/queue.c **** 	{
1990:./freertos/src/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1991:./freertos/src/queue.c **** 		again. */
1992:./freertos/src/queue.c **** 		vPortFree( pxQueue );
 3599              		.loc 1 1992 3
 3600 0030 F868     		ldr	r0, [r7, #12]
 3601 0032 FFF7FEFF 		bl	vPortFree
1993:./freertos/src/queue.c **** 	}
1994:./freertos/src/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1995:./freertos/src/queue.c **** 	{
1996:./freertos/src/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1997:./freertos/src/queue.c **** 		check before attempting to free the memory. */
1998:./freertos/src/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1999:./freertos/src/queue.c **** 		{
2000:./freertos/src/queue.c **** 			vPortFree( pxQueue );
2001:./freertos/src/queue.c **** 		}
2002:./freertos/src/queue.c **** 		else
2003:./freertos/src/queue.c **** 		{
2004:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2005:./freertos/src/queue.c **** 		}
2006:./freertos/src/queue.c **** 	}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 104


2007:./freertos/src/queue.c **** 	#else
2008:./freertos/src/queue.c **** 	{
2009:./freertos/src/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2010:./freertos/src/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2011:./freertos/src/queue.c **** 		( void ) pxQueue;
2012:./freertos/src/queue.c **** 	}
2013:./freertos/src/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2014:./freertos/src/queue.c **** }
 3602              		.loc 1 2014 1
 3603 0036 00BF     		nop
 3604 0038 1037     		adds	r7, r7, #16
 3605              	.LCFI99:
 3606              		.cfi_def_cfa_offset 8
 3607 003a BD46     		mov	sp, r7
 3608              	.LCFI100:
 3609              		.cfi_def_cfa_register 13
 3610              		@ sp needed
 3611 003c 80BD     		pop	{r7, pc}
 3612              		.cfi_endproc
 3613              	.LFE80:
 3615              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3616              		.align	1
 3617              		.global	uxQueueGetQueueNumber
 3618              		.syntax unified
 3619              		.thumb
 3620              		.thumb_func
 3622              	uxQueueGetQueueNumber:
 3623              	.LFB81:
2015:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2016:./freertos/src/queue.c **** 
2017:./freertos/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:./freertos/src/queue.c **** 
2019:./freertos/src/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2020:./freertos/src/queue.c **** 	{
 3624              		.loc 1 2020 2
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 8
 3627              		@ frame_needed = 1, uses_anonymous_args = 0
 3628              		@ link register save eliminated.
 3629 0000 80B4     		push	{r7}
 3630              	.LCFI101:
 3631              		.cfi_def_cfa_offset 4
 3632              		.cfi_offset 7, -4
 3633 0002 83B0     		sub	sp, sp, #12
 3634              	.LCFI102:
 3635              		.cfi_def_cfa_offset 16
 3636 0004 00AF     		add	r7, sp, #0
 3637              	.LCFI103:
 3638              		.cfi_def_cfa_register 7
 3639 0006 7860     		str	r0, [r7, #4]
2021:./freertos/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3640              		.loc 1 2021 34
 3641 0008 7B68     		ldr	r3, [r7, #4]
 3642 000a 9B6C     		ldr	r3, [r3, #72]
2022:./freertos/src/queue.c **** 	}
 3643              		.loc 1 2022 2
 3644 000c 1846     		mov	r0, r3
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 105


 3645 000e 0C37     		adds	r7, r7, #12
 3646              	.LCFI104:
 3647              		.cfi_def_cfa_offset 4
 3648 0010 BD46     		mov	sp, r7
 3649              	.LCFI105:
 3650              		.cfi_def_cfa_register 13
 3651              		@ sp needed
 3652 0012 80BC     		pop	{r7}
 3653              	.LCFI106:
 3654              		.cfi_restore 7
 3655              		.cfi_def_cfa_offset 0
 3656 0014 7047     		bx	lr
 3657              		.cfi_endproc
 3658              	.LFE81:
 3660              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3661              		.align	1
 3662              		.global	vQueueSetQueueNumber
 3663              		.syntax unified
 3664              		.thumb
 3665              		.thumb_func
 3667              	vQueueSetQueueNumber:
 3668              	.LFB82:
2023:./freertos/src/queue.c **** 
2024:./freertos/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2026:./freertos/src/queue.c **** 
2027:./freertos/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2028:./freertos/src/queue.c **** 
2029:./freertos/src/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2030:./freertos/src/queue.c **** 	{
 3669              		.loc 1 2030 2
 3670              		.cfi_startproc
 3671              		@ args = 0, pretend = 0, frame = 8
 3672              		@ frame_needed = 1, uses_anonymous_args = 0
 3673              		@ link register save eliminated.
 3674 0000 80B4     		push	{r7}
 3675              	.LCFI107:
 3676              		.cfi_def_cfa_offset 4
 3677              		.cfi_offset 7, -4
 3678 0002 83B0     		sub	sp, sp, #12
 3679              	.LCFI108:
 3680              		.cfi_def_cfa_offset 16
 3681 0004 00AF     		add	r7, sp, #0
 3682              	.LCFI109:
 3683              		.cfi_def_cfa_register 7
 3684 0006 7860     		str	r0, [r7, #4]
 3685 0008 3960     		str	r1, [r7]
2031:./freertos/src/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3686              		.loc 1 2031 43
 3687 000a 7B68     		ldr	r3, [r7, #4]
 3688 000c 3A68     		ldr	r2, [r7]
 3689 000e 9A64     		str	r2, [r3, #72]
2032:./freertos/src/queue.c **** 	}
 3690              		.loc 1 2032 2
 3691 0010 00BF     		nop
 3692 0012 0C37     		adds	r7, r7, #12
 3693              	.LCFI110:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 106


 3694              		.cfi_def_cfa_offset 4
 3695 0014 BD46     		mov	sp, r7
 3696              	.LCFI111:
 3697              		.cfi_def_cfa_register 13
 3698              		@ sp needed
 3699 0016 80BC     		pop	{r7}
 3700              	.LCFI112:
 3701              		.cfi_restore 7
 3702              		.cfi_def_cfa_offset 0
 3703 0018 7047     		bx	lr
 3704              		.cfi_endproc
 3705              	.LFE82:
 3707              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3708              		.align	1
 3709              		.global	ucQueueGetQueueType
 3710              		.syntax unified
 3711              		.thumb
 3712              		.thumb_func
 3714              	ucQueueGetQueueType:
 3715              	.LFB83:
2033:./freertos/src/queue.c **** 
2034:./freertos/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2035:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2036:./freertos/src/queue.c **** 
2037:./freertos/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2038:./freertos/src/queue.c **** 
2039:./freertos/src/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2040:./freertos/src/queue.c **** 	{
 3716              		.loc 1 2040 2
 3717              		.cfi_startproc
 3718              		@ args = 0, pretend = 0, frame = 8
 3719              		@ frame_needed = 1, uses_anonymous_args = 0
 3720              		@ link register save eliminated.
 3721 0000 80B4     		push	{r7}
 3722              	.LCFI113:
 3723              		.cfi_def_cfa_offset 4
 3724              		.cfi_offset 7, -4
 3725 0002 83B0     		sub	sp, sp, #12
 3726              	.LCFI114:
 3727              		.cfi_def_cfa_offset 16
 3728 0004 00AF     		add	r7, sp, #0
 3729              	.LCFI115:
 3730              		.cfi_def_cfa_register 7
 3731 0006 7860     		str	r0, [r7, #4]
2041:./freertos/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3732              		.loc 1 2041 34
 3733 0008 7B68     		ldr	r3, [r7, #4]
 3734 000a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
2042:./freertos/src/queue.c **** 	}
 3735              		.loc 1 2042 2
 3736 000e 1846     		mov	r0, r3
 3737 0010 0C37     		adds	r7, r7, #12
 3738              	.LCFI116:
 3739              		.cfi_def_cfa_offset 4
 3740 0012 BD46     		mov	sp, r7
 3741              	.LCFI117:
 3742              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 107


 3743              		@ sp needed
 3744 0014 80BC     		pop	{r7}
 3745              	.LCFI118:
 3746              		.cfi_restore 7
 3747              		.cfi_def_cfa_offset 0
 3748 0016 7047     		bx	lr
 3749              		.cfi_endproc
 3750              	.LFE83:
 3752              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 3753              		.align	1
 3754              		.syntax unified
 3755              		.thumb
 3756              		.thumb_func
 3758              	prvGetDisinheritPriorityAfterTimeout:
 3759              	.LFB84:
2043:./freertos/src/queue.c **** 
2044:./freertos/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2045:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2046:./freertos/src/queue.c **** 
2047:./freertos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
2048:./freertos/src/queue.c **** 
2049:./freertos/src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2050:./freertos/src/queue.c **** 	{
 3760              		.loc 1 2050 2
 3761              		.cfi_startproc
 3762              		@ args = 0, pretend = 0, frame = 16
 3763              		@ frame_needed = 1, uses_anonymous_args = 0
 3764              		@ link register save eliminated.
 3765 0000 80B4     		push	{r7}
 3766              	.LCFI119:
 3767              		.cfi_def_cfa_offset 4
 3768              		.cfi_offset 7, -4
 3769 0002 85B0     		sub	sp, sp, #20
 3770              	.LCFI120:
 3771              		.cfi_def_cfa_offset 24
 3772 0004 00AF     		add	r7, sp, #0
 3773              	.LCFI121:
 3774              		.cfi_def_cfa_register 7
 3775 0006 7860     		str	r0, [r7, #4]
2051:./freertos/src/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2052:./freertos/src/queue.c **** 
2053:./freertos/src/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2054:./freertos/src/queue.c **** 		priority, but the waiting task times out, then the holder should
2055:./freertos/src/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2056:./freertos/src/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2057:./freertos/src/queue.c **** 		return the priority of the highest priority task that is waiting for the
2058:./freertos/src/queue.c **** 		mutex. */
2059:./freertos/src/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 3776              		.loc 1 2059 7
 3777 0008 7B68     		ldr	r3, [r7, #4]
 3778 000a 5B6A     		ldr	r3, [r3, #36]
 3779              		.loc 1 2059 5
 3780 000c 002B     		cmp	r3, #0
 3781 000e 06D0     		beq	.L240
2060:./freertos/src/queue.c **** 		{
2061:./freertos/src/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
 3782              		.loc 1 2061 93
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 108


 3783 0010 7B68     		ldr	r3, [r7, #4]
 3784 0012 1B6B     		ldr	r3, [r3, #48]
 3785 0014 1B68     		ldr	r3, [r3]
 3786              		.loc 1 2061 36
 3787 0016 C3F10503 		rsb	r3, r3, #5
 3788 001a FB60     		str	r3, [r7, #12]
 3789 001c 01E0     		b	.L241
 3790              	.L240:
2062:./freertos/src/queue.c **** 		}
2063:./freertos/src/queue.c **** 		else
2064:./freertos/src/queue.c **** 		{
2065:./freertos/src/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 3791              		.loc 1 2065 36
 3792 001e 0023     		movs	r3, #0
 3793 0020 FB60     		str	r3, [r7, #12]
 3794              	.L241:
2066:./freertos/src/queue.c **** 		}
2067:./freertos/src/queue.c **** 
2068:./freertos/src/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
 3795              		.loc 1 2068 10
 3796 0022 FB68     		ldr	r3, [r7, #12]
2069:./freertos/src/queue.c **** 	}
 3797              		.loc 1 2069 2
 3798 0024 1846     		mov	r0, r3
 3799 0026 1437     		adds	r7, r7, #20
 3800              	.LCFI122:
 3801              		.cfi_def_cfa_offset 4
 3802 0028 BD46     		mov	sp, r7
 3803              	.LCFI123:
 3804              		.cfi_def_cfa_register 13
 3805              		@ sp needed
 3806 002a 80BC     		pop	{r7}
 3807              	.LCFI124:
 3808              		.cfi_restore 7
 3809              		.cfi_def_cfa_offset 0
 3810 002c 7047     		bx	lr
 3811              		.cfi_endproc
 3812              	.LFE84:
 3814              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 3815              		.align	1
 3816              		.syntax unified
 3817              		.thumb
 3818              		.thumb_func
 3820              	prvCopyDataToQueue:
 3821              	.LFB85:
2070:./freertos/src/queue.c **** 
2071:./freertos/src/queue.c **** #endif /* configUSE_MUTEXES */
2072:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2073:./freertos/src/queue.c **** 
2074:./freertos/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2075:./freertos/src/queue.c **** {
 3822              		.loc 1 2075 1
 3823              		.cfi_startproc
 3824              		@ args = 0, pretend = 0, frame = 24
 3825              		@ frame_needed = 1, uses_anonymous_args = 0
 3826 0000 80B5     		push	{r7, lr}
 3827              	.LCFI125:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 109


 3828              		.cfi_def_cfa_offset 8
 3829              		.cfi_offset 7, -8
 3830              		.cfi_offset 14, -4
 3831 0002 86B0     		sub	sp, sp, #24
 3832              	.LCFI126:
 3833              		.cfi_def_cfa_offset 32
 3834 0004 00AF     		add	r7, sp, #0
 3835              	.LCFI127:
 3836              		.cfi_def_cfa_register 7
 3837 0006 F860     		str	r0, [r7, #12]
 3838 0008 B960     		str	r1, [r7, #8]
 3839 000a 7A60     		str	r2, [r7, #4]
2076:./freertos/src/queue.c **** BaseType_t xReturn = pdFALSE;
 3840              		.loc 1 2076 12
 3841 000c 0023     		movs	r3, #0
 3842 000e 7B61     		str	r3, [r7, #20]
2077:./freertos/src/queue.c **** UBaseType_t uxMessagesWaiting;
2078:./freertos/src/queue.c **** 
2079:./freertos/src/queue.c **** 	/* This function is called from a critical section. */
2080:./freertos/src/queue.c **** 
2081:./freertos/src/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3843              		.loc 1 2081 20
 3844 0010 FB68     		ldr	r3, [r7, #12]
 3845 0012 9B6B     		ldr	r3, [r3, #56]
 3846 0014 3B61     		str	r3, [r7, #16]
2082:./freertos/src/queue.c **** 
2083:./freertos/src/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 3847              		.loc 1 2083 13
 3848 0016 FB68     		ldr	r3, [r7, #12]
 3849 0018 1B6C     		ldr	r3, [r3, #64]
 3850              		.loc 1 2083 4
 3851 001a 002B     		cmp	r3, #0
 3852 001c 0DD1     		bne	.L244
2084:./freertos/src/queue.c **** 	{
2085:./freertos/src/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2086:./freertos/src/queue.c **** 		{
2087:./freertos/src/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 3853              		.loc 1 2087 15
 3854 001e FB68     		ldr	r3, [r7, #12]
 3855 0020 1B68     		ldr	r3, [r3]
 3856              		.loc 1 2087 6
 3857 0022 002B     		cmp	r3, #0
 3858 0024 4DD1     		bne	.L245
2088:./freertos/src/queue.c **** 			{
2089:./freertos/src/queue.c **** 				/* The mutex is no longer being held. */
2090:./freertos/src/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 3859              		.loc 1 2090 15
 3860 0026 FB68     		ldr	r3, [r7, #12]
 3861 0028 9B68     		ldr	r3, [r3, #8]
 3862 002a 1846     		mov	r0, r3
 3863 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 3864 0030 7861     		str	r0, [r7, #20]
2091:./freertos/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 3865              		.loc 1 2091 40
 3866 0032 FB68     		ldr	r3, [r7, #12]
 3867 0034 0022     		movs	r2, #0
 3868 0036 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 110


 3869 0038 43E0     		b	.L245
 3870              	.L244:
2092:./freertos/src/queue.c **** 			}
2093:./freertos/src/queue.c **** 			else
2094:./freertos/src/queue.c **** 			{
2095:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2096:./freertos/src/queue.c **** 			}
2097:./freertos/src/queue.c **** 		}
2098:./freertos/src/queue.c **** 		#endif /* configUSE_MUTEXES */
2099:./freertos/src/queue.c **** 	}
2100:./freertos/src/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 3871              		.loc 1 2100 9
 3872 003a 7B68     		ldr	r3, [r7, #4]
 3873 003c 002B     		cmp	r3, #0
 3874 003e 19D1     		bne	.L246
2101:./freertos/src/queue.c **** 	{
2102:./freertos/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 3875              		.loc 1 2102 38
 3876 0040 FB68     		ldr	r3, [r7, #12]
 3877 0042 5868     		ldr	r0, [r3, #4]
 3878              		.loc 1 2102 84
 3879 0044 FB68     		ldr	r3, [r7, #12]
 3880 0046 1B6C     		ldr	r3, [r3, #64]
 3881              		.loc 1 2102 12
 3882 0048 1A46     		mov	r2, r3
 3883 004a B968     		ldr	r1, [r7, #8]
 3884 004c FFF7FEFF 		bl	memcpy
2103:./freertos/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 3885              		.loc 1 2103 10
 3886 0050 FB68     		ldr	r3, [r7, #12]
 3887 0052 5A68     		ldr	r2, [r3, #4]
 3888              		.loc 1 2103 32
 3889 0054 FB68     		ldr	r3, [r7, #12]
 3890 0056 1B6C     		ldr	r3, [r3, #64]
 3891              		.loc 1 2103 22
 3892 0058 1A44     		add	r2, r2, r3
 3893 005a FB68     		ldr	r3, [r7, #12]
 3894 005c 5A60     		str	r2, [r3, #4]
2104:./freertos/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 3895              		.loc 1 2104 14
 3896 005e FB68     		ldr	r3, [r7, #12]
 3897 0060 5A68     		ldr	r2, [r3, #4]
 3898              		.loc 1 2104 46
 3899 0062 FB68     		ldr	r3, [r7, #12]
 3900 0064 9B68     		ldr	r3, [r3, #8]
 3901              		.loc 1 2104 5
 3902 0066 9A42     		cmp	r2, r3
 3903 0068 2BD3     		bcc	.L245
2105:./freertos/src/queue.c **** 		{
2106:./freertos/src/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 3904              		.loc 1 2106 32
 3905 006a FB68     		ldr	r3, [r7, #12]
 3906 006c 1A68     		ldr	r2, [r3]
 3907              		.loc 1 2106 23
 3908 006e FB68     		ldr	r3, [r7, #12]
 3909 0070 5A60     		str	r2, [r3, #4]
 3910 0072 26E0     		b	.L245
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 111


 3911              	.L246:
2107:./freertos/src/queue.c **** 		}
2108:./freertos/src/queue.c **** 		else
2109:./freertos/src/queue.c **** 		{
2110:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2111:./freertos/src/queue.c **** 		}
2112:./freertos/src/queue.c **** 	}
2113:./freertos/src/queue.c **** 	else
2114:./freertos/src/queue.c **** 	{
2115:./freertos/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
 3912              		.loc 1 2115 48
 3913 0074 FB68     		ldr	r3, [r7, #12]
 3914 0076 D868     		ldr	r0, [r3, #12]
 3915              		.loc 1 2115 94
 3916 0078 FB68     		ldr	r3, [r7, #12]
 3917 007a 1B6C     		ldr	r3, [r3, #64]
 3918              		.loc 1 2115 12
 3919 007c 1A46     		mov	r2, r3
 3920 007e B968     		ldr	r1, [r7, #8]
 3921 0080 FFF7FEFF 		bl	memcpy
2116:./freertos/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 3922              		.loc 1 2116 20
 3923 0084 FB68     		ldr	r3, [r7, #12]
 3924 0086 DA68     		ldr	r2, [r3, #12]
 3925              		.loc 1 2116 42
 3926 0088 FB68     		ldr	r3, [r7, #12]
 3927 008a 1B6C     		ldr	r3, [r3, #64]
 3928              		.loc 1 2116 32
 3929 008c 5B42     		rsbs	r3, r3, #0
 3930 008e 1A44     		add	r2, r2, r3
 3931 0090 FB68     		ldr	r3, [r7, #12]
 3932 0092 DA60     		str	r2, [r3, #12]
2117:./freertos/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 3933              		.loc 1 2117 24
 3934 0094 FB68     		ldr	r3, [r7, #12]
 3935 0096 DA68     		ldr	r2, [r3, #12]
 3936              		.loc 1 2117 45
 3937 0098 FB68     		ldr	r3, [r7, #12]
 3938 009a 1B68     		ldr	r3, [r3]
 3939              		.loc 1 2117 5
 3940 009c 9A42     		cmp	r2, r3
 3941 009e 07D2     		bcs	.L247
2118:./freertos/src/queue.c **** 		{
2119:./freertos/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 3942              		.loc 1 2119 54
 3943 00a0 FB68     		ldr	r3, [r7, #12]
 3944 00a2 9A68     		ldr	r2, [r3, #8]
 3945              		.loc 1 2119 71
 3946 00a4 FB68     		ldr	r3, [r7, #12]
 3947 00a6 1B6C     		ldr	r3, [r3, #64]
 3948              		.loc 1 2119 62
 3949 00a8 5B42     		rsbs	r3, r3, #0
 3950 00aa 1A44     		add	r2, r2, r3
 3951              		.loc 1 2119 33
 3952 00ac FB68     		ldr	r3, [r7, #12]
 3953 00ae DA60     		str	r2, [r3, #12]
 3954              	.L247:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 112


2120:./freertos/src/queue.c **** 		}
2121:./freertos/src/queue.c **** 		else
2122:./freertos/src/queue.c **** 		{
2123:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:./freertos/src/queue.c **** 		}
2125:./freertos/src/queue.c **** 
2126:./freertos/src/queue.c **** 		if( xPosition == queueOVERWRITE )
 3955              		.loc 1 2126 5
 3956 00b0 7B68     		ldr	r3, [r7, #4]
 3957 00b2 022B     		cmp	r3, #2
 3958 00b4 05D1     		bne	.L245
2127:./freertos/src/queue.c **** 		{
2128:./freertos/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3959              		.loc 1 2128 6
 3960 00b6 3B69     		ldr	r3, [r7, #16]
 3961 00b8 002B     		cmp	r3, #0
 3962 00ba 02D0     		beq	.L245
2129:./freertos/src/queue.c **** 			{
2130:./freertos/src/queue.c **** 				/* An item is not being added but overwritten, so subtract
2131:./freertos/src/queue.c **** 				one from the recorded number of items in the queue so when
2132:./freertos/src/queue.c **** 				one is added again below the number of recorded items remains
2133:./freertos/src/queue.c **** 				correct. */
2134:./freertos/src/queue.c **** 				--uxMessagesWaiting;
 3963              		.loc 1 2134 5
 3964 00bc 3B69     		ldr	r3, [r7, #16]
 3965 00be 013B     		subs	r3, r3, #1
 3966 00c0 3B61     		str	r3, [r7, #16]
 3967              	.L245:
2135:./freertos/src/queue.c **** 			}
2136:./freertos/src/queue.c **** 			else
2137:./freertos/src/queue.c **** 			{
2138:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2139:./freertos/src/queue.c **** 			}
2140:./freertos/src/queue.c **** 		}
2141:./freertos/src/queue.c **** 		else
2142:./freertos/src/queue.c **** 		{
2143:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2144:./freertos/src/queue.c **** 		}
2145:./freertos/src/queue.c **** 	}
2146:./freertos/src/queue.c **** 
2147:./freertos/src/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 3968              		.loc 1 2147 49
 3969 00c2 3B69     		ldr	r3, [r7, #16]
 3970 00c4 5A1C     		adds	r2, r3, #1
 3971              		.loc 1 2147 29
 3972 00c6 FB68     		ldr	r3, [r7, #12]
 3973 00c8 9A63     		str	r2, [r3, #56]
2148:./freertos/src/queue.c **** 
2149:./freertos/src/queue.c **** 	return xReturn;
 3974              		.loc 1 2149 9
 3975 00ca 7B69     		ldr	r3, [r7, #20]
2150:./freertos/src/queue.c **** }
 3976              		.loc 1 2150 1
 3977 00cc 1846     		mov	r0, r3
 3978 00ce 1837     		adds	r7, r7, #24
 3979              	.LCFI128:
 3980              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 113


 3981 00d0 BD46     		mov	sp, r7
 3982              	.LCFI129:
 3983              		.cfi_def_cfa_register 13
 3984              		@ sp needed
 3985 00d2 80BD     		pop	{r7, pc}
 3986              		.cfi_endproc
 3987              	.LFE85:
 3989              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 3990              		.align	1
 3991              		.syntax unified
 3992              		.thumb
 3993              		.thumb_func
 3995              	prvCopyDataFromQueue:
 3996              	.LFB86:
2151:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2152:./freertos/src/queue.c **** 
2153:./freertos/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2154:./freertos/src/queue.c **** {
 3997              		.loc 1 2154 1
 3998              		.cfi_startproc
 3999              		@ args = 0, pretend = 0, frame = 8
 4000              		@ frame_needed = 1, uses_anonymous_args = 0
 4001 0000 80B5     		push	{r7, lr}
 4002              	.LCFI130:
 4003              		.cfi_def_cfa_offset 8
 4004              		.cfi_offset 7, -8
 4005              		.cfi_offset 14, -4
 4006 0002 82B0     		sub	sp, sp, #8
 4007              	.LCFI131:
 4008              		.cfi_def_cfa_offset 16
 4009 0004 00AF     		add	r7, sp, #0
 4010              	.LCFI132:
 4011              		.cfi_def_cfa_register 7
 4012 0006 7860     		str	r0, [r7, #4]
 4013 0008 3960     		str	r1, [r7]
2155:./freertos/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 4014              		.loc 1 2155 13
 4015 000a 7B68     		ldr	r3, [r7, #4]
 4016 000c 1B6C     		ldr	r3, [r3, #64]
 4017              		.loc 1 2155 4
 4018 000e 002B     		cmp	r3, #0
 4019 0010 18D0     		beq	.L252
2156:./freertos/src/queue.c **** 	{
2157:./freertos/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
 4020              		.loc 1 2157 20
 4021 0012 7B68     		ldr	r3, [r7, #4]
 4022 0014 DA68     		ldr	r2, [r3, #12]
 4023              		.loc 1 2157 42
 4024 0016 7B68     		ldr	r3, [r7, #4]
 4025 0018 1B6C     		ldr	r3, [r3, #64]
 4026              		.loc 1 2157 32
 4027 001a 1A44     		add	r2, r2, r3
 4028 001c 7B68     		ldr	r3, [r7, #4]
 4029 001e DA60     		str	r2, [r3, #12]
2158:./freertos/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 4030              		.loc 1 2158 24
 4031 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 114


 4032 0022 DA68     		ldr	r2, [r3, #12]
 4033              		.loc 1 2158 56
 4034 0024 7B68     		ldr	r3, [r7, #4]
 4035 0026 9B68     		ldr	r3, [r3, #8]
 4036              		.loc 1 2158 5
 4037 0028 9A42     		cmp	r2, r3
 4038 002a 03D3     		bcc	.L251
2159:./freertos/src/queue.c **** 		{
2160:./freertos/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 4039              		.loc 1 2160 42
 4040 002c 7B68     		ldr	r3, [r7, #4]
 4041 002e 1A68     		ldr	r2, [r3]
 4042              		.loc 1 2160 33
 4043 0030 7B68     		ldr	r3, [r7, #4]
 4044 0032 DA60     		str	r2, [r3, #12]
 4045              	.L251:
2161:./freertos/src/queue.c **** 		}
2162:./freertos/src/queue.c **** 		else
2163:./freertos/src/queue.c **** 		{
2164:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2165:./freertos/src/queue.c **** 		}
2166:./freertos/src/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
 4046              		.loc 1 2166 69
 4047 0034 7B68     		ldr	r3, [r7, #4]
 4048 0036 D968     		ldr	r1, [r3, #12]
 4049              		.loc 1 2166 100
 4050 0038 7B68     		ldr	r3, [r7, #4]
 4051 003a 1B6C     		ldr	r3, [r3, #64]
 4052              		.loc 1 2166 12
 4053 003c 1A46     		mov	r2, r3
 4054 003e 3868     		ldr	r0, [r7]
 4055 0040 FFF7FEFF 		bl	memcpy
 4056              	.L252:
2167:./freertos/src/queue.c **** 	}
2168:./freertos/src/queue.c **** }
 4057              		.loc 1 2168 1
 4058 0044 00BF     		nop
 4059 0046 0837     		adds	r7, r7, #8
 4060              	.LCFI133:
 4061              		.cfi_def_cfa_offset 8
 4062 0048 BD46     		mov	sp, r7
 4063              	.LCFI134:
 4064              		.cfi_def_cfa_register 13
 4065              		@ sp needed
 4066 004a 80BD     		pop	{r7, pc}
 4067              		.cfi_endproc
 4068              	.LFE86:
 4070              		.section	.text.prvUnlockQueue,"ax",%progbits
 4071              		.align	1
 4072              		.syntax unified
 4073              		.thumb
 4074              		.thumb_func
 4076              	prvUnlockQueue:
 4077              	.LFB87:
2169:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2170:./freertos/src/queue.c **** 
2171:./freertos/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 115


2172:./freertos/src/queue.c **** {
 4078              		.loc 1 2172 1
 4079              		.cfi_startproc
 4080              		@ args = 0, pretend = 0, frame = 16
 4081              		@ frame_needed = 1, uses_anonymous_args = 0
 4082 0000 80B5     		push	{r7, lr}
 4083              	.LCFI135:
 4084              		.cfi_def_cfa_offset 8
 4085              		.cfi_offset 7, -8
 4086              		.cfi_offset 14, -4
 4087 0002 84B0     		sub	sp, sp, #16
 4088              	.LCFI136:
 4089              		.cfi_def_cfa_offset 24
 4090 0004 00AF     		add	r7, sp, #0
 4091              	.LCFI137:
 4092              		.cfi_def_cfa_register 7
 4093 0006 7860     		str	r0, [r7, #4]
2173:./freertos/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2174:./freertos/src/queue.c **** 
2175:./freertos/src/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2176:./freertos/src/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2177:./freertos/src/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2178:./freertos/src/queue.c **** 	updated. */
2179:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
 4094              		.loc 1 2179 2
 4095 0008 FFF7FEFF 		bl	vPortEnterCritical
 4096              	.LBB196:
2180:./freertos/src/queue.c **** 	{
2181:./freertos/src/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 4097              		.loc 1 2181 10
 4098 000c 7B68     		ldr	r3, [r7, #4]
 4099 000e 93F84530 		ldrb	r3, [r3, #69]
 4100 0012 FB73     		strb	r3, [r7, #15]
2182:./freertos/src/queue.c **** 
2183:./freertos/src/queue.c **** 		/* See if data was added to the queue while it was locked. */
2184:./freertos/src/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 4101              		.loc 1 2184 8
 4102 0014 11E0     		b	.L254
 4103              	.L258:
2185:./freertos/src/queue.c **** 		{
2186:./freertos/src/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2187:./freertos/src/queue.c **** 			blocked waiting for data to become available? */
2188:./freertos/src/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2189:./freertos/src/queue.c **** 			{
2190:./freertos/src/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2191:./freertos/src/queue.c **** 				{
2192:./freertos/src/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2193:./freertos/src/queue.c **** 					{
2194:./freertos/src/queue.c **** 						/* The queue is a member of a queue set, and posting to
2195:./freertos/src/queue.c **** 						the queue set caused a higher priority task to unblock.
2196:./freertos/src/queue.c **** 						A context switch is required. */
2197:./freertos/src/queue.c **** 						vTaskMissedYield();
2198:./freertos/src/queue.c **** 					}
2199:./freertos/src/queue.c **** 					else
2200:./freertos/src/queue.c **** 					{
2201:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2202:./freertos/src/queue.c **** 					}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 116


2203:./freertos/src/queue.c **** 				}
2204:./freertos/src/queue.c **** 				else
2205:./freertos/src/queue.c **** 				{
2206:./freertos/src/queue.c **** 					/* Tasks that are removed from the event list will get
2207:./freertos/src/queue.c **** 					added to the pending ready list as the scheduler is still
2208:./freertos/src/queue.c **** 					suspended. */
2209:./freertos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2210:./freertos/src/queue.c **** 					{
2211:./freertos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2212:./freertos/src/queue.c **** 						{
2213:./freertos/src/queue.c **** 							/* The task waiting has a higher priority so record that a
2214:./freertos/src/queue.c **** 							context	switch is required. */
2215:./freertos/src/queue.c **** 							vTaskMissedYield();
2216:./freertos/src/queue.c **** 						}
2217:./freertos/src/queue.c **** 						else
2218:./freertos/src/queue.c **** 						{
2219:./freertos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2220:./freertos/src/queue.c **** 						}
2221:./freertos/src/queue.c **** 					}
2222:./freertos/src/queue.c **** 					else
2223:./freertos/src/queue.c **** 					{
2224:./freertos/src/queue.c **** 						break;
2225:./freertos/src/queue.c **** 					}
2226:./freertos/src/queue.c **** 				}
2227:./freertos/src/queue.c **** 			}
2228:./freertos/src/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2229:./freertos/src/queue.c **** 			{
2230:./freertos/src/queue.c **** 				/* Tasks that are removed from the event list will get added to
2231:./freertos/src/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2232:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 4104              		.loc 1 2232 9
 4105 0016 7B68     		ldr	r3, [r7, #4]
 4106 0018 5B6A     		ldr	r3, [r3, #36]
 4107              		.loc 1 2232 7
 4108 001a 002B     		cmp	r3, #0
 4109 001c 12D0     		beq	.L264
2233:./freertos/src/queue.c **** 				{
2234:./freertos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 4110              		.loc 1 2234 36
 4111 001e 7B68     		ldr	r3, [r7, #4]
 4112 0020 2433     		adds	r3, r3, #36
 4113              		.loc 1 2234 10
 4114 0022 1846     		mov	r0, r3
 4115 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 4116 0028 0346     		mov	r3, r0
 4117              		.loc 1 2234 8 discriminator 1
 4118 002a 002B     		cmp	r3, #0
 4119 002c 01D0     		beq	.L256
2235:./freertos/src/queue.c **** 					{
2236:./freertos/src/queue.c **** 						/* The task waiting has a higher priority so record that
2237:./freertos/src/queue.c **** 						a context switch is required. */
2238:./freertos/src/queue.c **** 						vTaskMissedYield();
 4120              		.loc 1 2238 7
 4121 002e FFF7FEFF 		bl	vTaskMissedYield
 4122              	.L256:
2239:./freertos/src/queue.c **** 					}
2240:./freertos/src/queue.c **** 					else
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 117


2241:./freertos/src/queue.c **** 					{
2242:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2243:./freertos/src/queue.c **** 					}
2244:./freertos/src/queue.c **** 				}
2245:./freertos/src/queue.c **** 				else
2246:./freertos/src/queue.c **** 				{
2247:./freertos/src/queue.c **** 					break;
2248:./freertos/src/queue.c **** 				}
2249:./freertos/src/queue.c **** 			}
2250:./freertos/src/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2251:./freertos/src/queue.c **** 
2252:./freertos/src/queue.c **** 			--cTxLock;
 4123              		.loc 1 2252 4
 4124 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4125 0034 013B     		subs	r3, r3, #1
 4126 0036 DBB2     		uxtb	r3, r3
 4127 0038 FB73     		strb	r3, [r7, #15]
 4128              	.L254:
2184:./freertos/src/queue.c **** 		{
 4129              		.loc 1 2184 18
 4130 003a 97F90F30 		ldrsb	r3, [r7, #15]
 4131 003e 002B     		cmp	r3, #0
 4132 0040 E9DC     		bgt	.L258
 4133 0042 00E0     		b	.L257
 4134              	.L264:
2247:./freertos/src/queue.c **** 				}
 4135              		.loc 1 2247 6
 4136 0044 00BF     		nop
 4137              	.L257:
2253:./freertos/src/queue.c **** 		}
2254:./freertos/src/queue.c **** 
2255:./freertos/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 4138              		.loc 1 2255 20
 4139 0046 7B68     		ldr	r3, [r7, #4]
 4140 0048 FF22     		movs	r2, #255
 4141 004a 83F84520 		strb	r2, [r3, #69]
 4142              	.LBE196:
2256:./freertos/src/queue.c **** 	}
2257:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 4143              		.loc 1 2257 2
 4144 004e FFF7FEFF 		bl	vPortExitCritical
2258:./freertos/src/queue.c **** 
2259:./freertos/src/queue.c **** 	/* Do the same for the Rx lock. */
2260:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
 4145              		.loc 1 2260 2
 4146 0052 FFF7FEFF 		bl	vPortEnterCritical
 4147              	.LBB197:
2261:./freertos/src/queue.c **** 	{
2262:./freertos/src/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 4148              		.loc 1 2262 10
 4149 0056 7B68     		ldr	r3, [r7, #4]
 4150 0058 93F84430 		ldrb	r3, [r3, #68]
 4151 005c BB73     		strb	r3, [r7, #14]
2263:./freertos/src/queue.c **** 
2264:./freertos/src/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 4152              		.loc 1 2264 8
 4153 005e 11E0     		b	.L259
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 118


 4154              	.L263:
2265:./freertos/src/queue.c **** 		{
2266:./freertos/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 4155              		.loc 1 2266 8
 4156 0060 7B68     		ldr	r3, [r7, #4]
 4157 0062 1B69     		ldr	r3, [r3, #16]
 4158              		.loc 1 2266 6
 4159 0064 002B     		cmp	r3, #0
 4160 0066 12D0     		beq	.L265
2267:./freertos/src/queue.c **** 			{
2268:./freertos/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4161              		.loc 1 2268 35
 4162 0068 7B68     		ldr	r3, [r7, #4]
 4163 006a 1033     		adds	r3, r3, #16
 4164              		.loc 1 2268 9
 4165 006c 1846     		mov	r0, r3
 4166 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 4167 0072 0346     		mov	r3, r0
 4168              		.loc 1 2268 7 discriminator 1
 4169 0074 002B     		cmp	r3, #0
 4170 0076 01D0     		beq	.L261
2269:./freertos/src/queue.c **** 				{
2270:./freertos/src/queue.c **** 					vTaskMissedYield();
 4171              		.loc 1 2270 6
 4172 0078 FFF7FEFF 		bl	vTaskMissedYield
 4173              	.L261:
2271:./freertos/src/queue.c **** 				}
2272:./freertos/src/queue.c **** 				else
2273:./freertos/src/queue.c **** 				{
2274:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2275:./freertos/src/queue.c **** 				}
2276:./freertos/src/queue.c **** 
2277:./freertos/src/queue.c **** 				--cRxLock;
 4174              		.loc 1 2277 5
 4175 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4176 007e 013B     		subs	r3, r3, #1
 4177 0080 DBB2     		uxtb	r3, r3
 4178 0082 BB73     		strb	r3, [r7, #14]
 4179              	.L259:
2264:./freertos/src/queue.c **** 		{
 4180              		.loc 1 2264 18
 4181 0084 97F90E30 		ldrsb	r3, [r7, #14]
 4182 0088 002B     		cmp	r3, #0
 4183 008a E9DC     		bgt	.L263
 4184 008c 00E0     		b	.L262
 4185              	.L265:
2278:./freertos/src/queue.c **** 			}
2279:./freertos/src/queue.c **** 			else
2280:./freertos/src/queue.c **** 			{
2281:./freertos/src/queue.c **** 				break;
 4186              		.loc 1 2281 5
 4187 008e 00BF     		nop
 4188              	.L262:
2282:./freertos/src/queue.c **** 			}
2283:./freertos/src/queue.c **** 		}
2284:./freertos/src/queue.c **** 
2285:./freertos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 119


 4189              		.loc 1 2285 20
 4190 0090 7B68     		ldr	r3, [r7, #4]
 4191 0092 FF22     		movs	r2, #255
 4192 0094 83F84420 		strb	r2, [r3, #68]
 4193              	.LBE197:
2286:./freertos/src/queue.c **** 	}
2287:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 4194              		.loc 1 2287 2
 4195 0098 FFF7FEFF 		bl	vPortExitCritical
2288:./freertos/src/queue.c **** }
 4196              		.loc 1 2288 1
 4197 009c 00BF     		nop
 4198 009e 1037     		adds	r7, r7, #16
 4199              	.LCFI138:
 4200              		.cfi_def_cfa_offset 8
 4201 00a0 BD46     		mov	sp, r7
 4202              	.LCFI139:
 4203              		.cfi_def_cfa_register 13
 4204              		@ sp needed
 4205 00a2 80BD     		pop	{r7, pc}
 4206              		.cfi_endproc
 4207              	.LFE87:
 4209              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 4210              		.align	1
 4211              		.syntax unified
 4212              		.thumb
 4213              		.thumb_func
 4215              	prvIsQueueEmpty:
 4216              	.LFB88:
2289:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2290:./freertos/src/queue.c **** 
2291:./freertos/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2292:./freertos/src/queue.c **** {
 4217              		.loc 1 2292 1
 4218              		.cfi_startproc
 4219              		@ args = 0, pretend = 0, frame = 16
 4220              		@ frame_needed = 1, uses_anonymous_args = 0
 4221 0000 80B5     		push	{r7, lr}
 4222              	.LCFI140:
 4223              		.cfi_def_cfa_offset 8
 4224              		.cfi_offset 7, -8
 4225              		.cfi_offset 14, -4
 4226 0002 84B0     		sub	sp, sp, #16
 4227              	.LCFI141:
 4228              		.cfi_def_cfa_offset 24
 4229 0004 00AF     		add	r7, sp, #0
 4230              	.LCFI142:
 4231              		.cfi_def_cfa_register 7
 4232 0006 7860     		str	r0, [r7, #4]
2293:./freertos/src/queue.c **** BaseType_t xReturn;
2294:./freertos/src/queue.c **** 
2295:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
 4233              		.loc 1 2295 2
 4234 0008 FFF7FEFF 		bl	vPortEnterCritical
2296:./freertos/src/queue.c **** 	{
2297:./freertos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 4235              		.loc 1 2297 14
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 120


 4236 000c 7B68     		ldr	r3, [r7, #4]
 4237 000e 9B6B     		ldr	r3, [r3, #56]
 4238              		.loc 1 2297 5
 4239 0010 002B     		cmp	r3, #0
 4240 0012 02D1     		bne	.L267
2298:./freertos/src/queue.c **** 		{
2299:./freertos/src/queue.c **** 			xReturn = pdTRUE;
 4241              		.loc 1 2299 12
 4242 0014 0123     		movs	r3, #1
 4243 0016 FB60     		str	r3, [r7, #12]
 4244 0018 01E0     		b	.L268
 4245              	.L267:
2300:./freertos/src/queue.c **** 		}
2301:./freertos/src/queue.c **** 		else
2302:./freertos/src/queue.c **** 		{
2303:./freertos/src/queue.c **** 			xReturn = pdFALSE;
 4246              		.loc 1 2303 12
 4247 001a 0023     		movs	r3, #0
 4248 001c FB60     		str	r3, [r7, #12]
 4249              	.L268:
2304:./freertos/src/queue.c **** 		}
2305:./freertos/src/queue.c **** 	}
2306:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 4250              		.loc 1 2306 2
 4251 001e FFF7FEFF 		bl	vPortExitCritical
2307:./freertos/src/queue.c **** 
2308:./freertos/src/queue.c **** 	return xReturn;
 4252              		.loc 1 2308 9
 4253 0022 FB68     		ldr	r3, [r7, #12]
2309:./freertos/src/queue.c **** }
 4254              		.loc 1 2309 1
 4255 0024 1846     		mov	r0, r3
 4256 0026 1037     		adds	r7, r7, #16
 4257              	.LCFI143:
 4258              		.cfi_def_cfa_offset 8
 4259 0028 BD46     		mov	sp, r7
 4260              	.LCFI144:
 4261              		.cfi_def_cfa_register 13
 4262              		@ sp needed
 4263 002a 80BD     		pop	{r7, pc}
 4264              		.cfi_endproc
 4265              	.LFE88:
 4267              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4268              		.align	1
 4269              		.global	xQueueIsQueueEmptyFromISR
 4270              		.syntax unified
 4271              		.thumb
 4272              		.thumb_func
 4274              	xQueueIsQueueEmptyFromISR:
 4275              	.LFB89:
2310:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2311:./freertos/src/queue.c **** 
2312:./freertos/src/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2313:./freertos/src/queue.c **** {
 4276              		.loc 1 2313 1
 4277              		.cfi_startproc
 4278              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 121


 4279              		@ frame_needed = 1, uses_anonymous_args = 0
 4280              		@ link register save eliminated.
 4281 0000 80B4     		push	{r7}
 4282              	.LCFI145:
 4283              		.cfi_def_cfa_offset 4
 4284              		.cfi_offset 7, -4
 4285 0002 87B0     		sub	sp, sp, #28
 4286              	.LCFI146:
 4287              		.cfi_def_cfa_offset 32
 4288 0004 00AF     		add	r7, sp, #0
 4289              	.LCFI147:
 4290              		.cfi_def_cfa_register 7
 4291 0006 7860     		str	r0, [r7, #4]
2314:./freertos/src/queue.c **** BaseType_t xReturn;
2315:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 4292              		.loc 1 2315 17
 4293 0008 7B68     		ldr	r3, [r7, #4]
 4294 000a 3B61     		str	r3, [r7, #16]
2316:./freertos/src/queue.c **** 
2317:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 4295              		.loc 1 2317 2
 4296 000c 3B69     		ldr	r3, [r7, #16]
 4297 000e 002B     		cmp	r3, #0
 4298 0010 0BD1     		bne	.L271
 4299              	.LBB198:
 4300              	.LBB199:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4301              		.loc 2 197 2
 4302              		.syntax unified
 4303              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4304 0012 4FF05003 			mov r3, #80												
 4305 0016 83F31188 		msr basepri, r3											
 4306 001a BFF36F8F 		isb														
 4307 001e BFF34F8F 		dsb														
 4308              	
 4309              	@ 0 "" 2
 4310              		.thumb
 4311              		.syntax unified
 4312 0022 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
 4313              		.loc 2 205 1
 4314 0024 00BF     		nop
 4315              	.L272:
 4316              	.LBE199:
 4317              	.LBE198:
 4318              		.loc 1 2317 2
 4319 0026 00BF     		nop
 4320 0028 FDE7     		b	.L272
 4321              	.L271:
2318:./freertos/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4322              		.loc 1 2318 13
 4323 002a 3B69     		ldr	r3, [r7, #16]
 4324 002c 9B6B     		ldr	r3, [r3, #56]
 4325              		.loc 1 2318 4
 4326 002e 002B     		cmp	r3, #0
 4327 0030 02D1     		bne	.L273
2319:./freertos/src/queue.c **** 	{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 122


2320:./freertos/src/queue.c **** 		xReturn = pdTRUE;
 4328              		.loc 1 2320 11
 4329 0032 0123     		movs	r3, #1
 4330 0034 7B61     		str	r3, [r7, #20]
 4331 0036 01E0     		b	.L274
 4332              	.L273:
2321:./freertos/src/queue.c **** 	}
2322:./freertos/src/queue.c **** 	else
2323:./freertos/src/queue.c **** 	{
2324:./freertos/src/queue.c **** 		xReturn = pdFALSE;
 4333              		.loc 1 2324 11
 4334 0038 0023     		movs	r3, #0
 4335 003a 7B61     		str	r3, [r7, #20]
 4336              	.L274:
2325:./freertos/src/queue.c **** 	}
2326:./freertos/src/queue.c **** 
2327:./freertos/src/queue.c **** 	return xReturn;
 4337              		.loc 1 2327 9
 4338 003c 7B69     		ldr	r3, [r7, #20]
2328:./freertos/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4339              		.loc 1 2328 1
 4340 003e 1846     		mov	r0, r3
 4341 0040 1C37     		adds	r7, r7, #28
 4342              	.LCFI148:
 4343              		.cfi_def_cfa_offset 4
 4344 0042 BD46     		mov	sp, r7
 4345              	.LCFI149:
 4346              		.cfi_def_cfa_register 13
 4347              		@ sp needed
 4348 0044 80BC     		pop	{r7}
 4349              	.LCFI150:
 4350              		.cfi_restore 7
 4351              		.cfi_def_cfa_offset 0
 4352 0046 7047     		bx	lr
 4353              		.cfi_endproc
 4354              	.LFE89:
 4356              		.section	.text.prvIsQueueFull,"ax",%progbits
 4357              		.align	1
 4358              		.syntax unified
 4359              		.thumb
 4360              		.thumb_func
 4362              	prvIsQueueFull:
 4363              	.LFB90:
2329:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2330:./freertos/src/queue.c **** 
2331:./freertos/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2332:./freertos/src/queue.c **** {
 4364              		.loc 1 2332 1
 4365              		.cfi_startproc
 4366              		@ args = 0, pretend = 0, frame = 16
 4367              		@ frame_needed = 1, uses_anonymous_args = 0
 4368 0000 80B5     		push	{r7, lr}
 4369              	.LCFI151:
 4370              		.cfi_def_cfa_offset 8
 4371              		.cfi_offset 7, -8
 4372              		.cfi_offset 14, -4
 4373 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 123


 4374              	.LCFI152:
 4375              		.cfi_def_cfa_offset 24
 4376 0004 00AF     		add	r7, sp, #0
 4377              	.LCFI153:
 4378              		.cfi_def_cfa_register 7
 4379 0006 7860     		str	r0, [r7, #4]
2333:./freertos/src/queue.c **** BaseType_t xReturn;
2334:./freertos/src/queue.c **** 
2335:./freertos/src/queue.c **** 	taskENTER_CRITICAL();
 4380              		.loc 1 2335 2
 4381 0008 FFF7FEFF 		bl	vPortEnterCritical
2336:./freertos/src/queue.c **** 	{
2337:./freertos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4382              		.loc 1 2337 14
 4383 000c 7B68     		ldr	r3, [r7, #4]
 4384 000e 9A6B     		ldr	r2, [r3, #56]
 4385              		.loc 1 2337 44
 4386 0010 7B68     		ldr	r3, [r7, #4]
 4387 0012 DB6B     		ldr	r3, [r3, #60]
 4388              		.loc 1 2337 5
 4389 0014 9A42     		cmp	r2, r3
 4390 0016 02D1     		bne	.L277
2338:./freertos/src/queue.c **** 		{
2339:./freertos/src/queue.c **** 			xReturn = pdTRUE;
 4391              		.loc 1 2339 12
 4392 0018 0123     		movs	r3, #1
 4393 001a FB60     		str	r3, [r7, #12]
 4394 001c 01E0     		b	.L278
 4395              	.L277:
2340:./freertos/src/queue.c **** 		}
2341:./freertos/src/queue.c **** 		else
2342:./freertos/src/queue.c **** 		{
2343:./freertos/src/queue.c **** 			xReturn = pdFALSE;
 4396              		.loc 1 2343 12
 4397 001e 0023     		movs	r3, #0
 4398 0020 FB60     		str	r3, [r7, #12]
 4399              	.L278:
2344:./freertos/src/queue.c **** 		}
2345:./freertos/src/queue.c **** 	}
2346:./freertos/src/queue.c **** 	taskEXIT_CRITICAL();
 4400              		.loc 1 2346 2
 4401 0022 FFF7FEFF 		bl	vPortExitCritical
2347:./freertos/src/queue.c **** 
2348:./freertos/src/queue.c **** 	return xReturn;
 4402              		.loc 1 2348 9
 4403 0026 FB68     		ldr	r3, [r7, #12]
2349:./freertos/src/queue.c **** }
 4404              		.loc 1 2349 1
 4405 0028 1846     		mov	r0, r3
 4406 002a 1037     		adds	r7, r7, #16
 4407              	.LCFI154:
 4408              		.cfi_def_cfa_offset 8
 4409 002c BD46     		mov	sp, r7
 4410              	.LCFI155:
 4411              		.cfi_def_cfa_register 13
 4412              		@ sp needed
 4413 002e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 124


 4414              		.cfi_endproc
 4415              	.LFE90:
 4417              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 4418              		.align	1
 4419              		.global	xQueueIsQueueFullFromISR
 4420              		.syntax unified
 4421              		.thumb
 4422              		.thumb_func
 4424              	xQueueIsQueueFullFromISR:
 4425              	.LFB91:
2350:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2351:./freertos/src/queue.c **** 
2352:./freertos/src/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2353:./freertos/src/queue.c **** {
 4426              		.loc 1 2353 1
 4427              		.cfi_startproc
 4428              		@ args = 0, pretend = 0, frame = 24
 4429              		@ frame_needed = 1, uses_anonymous_args = 0
 4430              		@ link register save eliminated.
 4431 0000 80B4     		push	{r7}
 4432              	.LCFI156:
 4433              		.cfi_def_cfa_offset 4
 4434              		.cfi_offset 7, -4
 4435 0002 87B0     		sub	sp, sp, #28
 4436              	.LCFI157:
 4437              		.cfi_def_cfa_offset 32
 4438 0004 00AF     		add	r7, sp, #0
 4439              	.LCFI158:
 4440              		.cfi_def_cfa_register 7
 4441 0006 7860     		str	r0, [r7, #4]
2354:./freertos/src/queue.c **** BaseType_t xReturn;
2355:./freertos/src/queue.c **** Queue_t * const pxQueue = xQueue;
 4442              		.loc 1 2355 17
 4443 0008 7B68     		ldr	r3, [r7, #4]
 4444 000a 3B61     		str	r3, [r7, #16]
2356:./freertos/src/queue.c **** 
2357:./freertos/src/queue.c **** 	configASSERT( pxQueue );
 4445              		.loc 1 2357 2
 4446 000c 3B69     		ldr	r3, [r7, #16]
 4447 000e 002B     		cmp	r3, #0
 4448 0010 0BD1     		bne	.L281
 4449              	.LBB200:
 4450              	.LBB201:
 197:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4451              		.loc 2 197 2
 4452              		.syntax unified
 4453              	@ 197 "./freertos/src/portable/GCC/ARM_CM3/portmacro.h" 1
 4454 0012 4FF05003 			mov r3, #80												
 4455 0016 83F31188 		msr basepri, r3											
 4456 001a BFF36F8F 		isb														
 4457 001e BFF34F8F 		dsb														
 4458              	
 4459              	@ 0 "" 2
 4460              		.thumb
 4461              		.syntax unified
 4462 0022 FB60     		str	r3, [r7, #12]
 205:./freertos/src/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 125


 4463              		.loc 2 205 1
 4464 0024 00BF     		nop
 4465              	.L282:
 4466              	.LBE201:
 4467              	.LBE200:
 4468              		.loc 1 2357 2
 4469 0026 00BF     		nop
 4470 0028 FDE7     		b	.L282
 4471              	.L281:
2358:./freertos/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4472              		.loc 1 2358 13
 4473 002a 3B69     		ldr	r3, [r7, #16]
 4474 002c 9A6B     		ldr	r2, [r3, #56]
 4475              		.loc 1 2358 43
 4476 002e 3B69     		ldr	r3, [r7, #16]
 4477 0030 DB6B     		ldr	r3, [r3, #60]
 4478              		.loc 1 2358 4
 4479 0032 9A42     		cmp	r2, r3
 4480 0034 02D1     		bne	.L283
2359:./freertos/src/queue.c **** 	{
2360:./freertos/src/queue.c **** 		xReturn = pdTRUE;
 4481              		.loc 1 2360 11
 4482 0036 0123     		movs	r3, #1
 4483 0038 7B61     		str	r3, [r7, #20]
 4484 003a 01E0     		b	.L284
 4485              	.L283:
2361:./freertos/src/queue.c **** 	}
2362:./freertos/src/queue.c **** 	else
2363:./freertos/src/queue.c **** 	{
2364:./freertos/src/queue.c **** 		xReturn = pdFALSE;
 4486              		.loc 1 2364 11
 4487 003c 0023     		movs	r3, #0
 4488 003e 7B61     		str	r3, [r7, #20]
 4489              	.L284:
2365:./freertos/src/queue.c **** 	}
2366:./freertos/src/queue.c **** 
2367:./freertos/src/queue.c **** 	return xReturn;
 4490              		.loc 1 2367 9
 4491 0040 7B69     		ldr	r3, [r7, #20]
2368:./freertos/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4492              		.loc 1 2368 1
 4493 0042 1846     		mov	r0, r3
 4494 0044 1C37     		adds	r7, r7, #28
 4495              	.LCFI159:
 4496              		.cfi_def_cfa_offset 4
 4497 0046 BD46     		mov	sp, r7
 4498              	.LCFI160:
 4499              		.cfi_def_cfa_register 13
 4500              		@ sp needed
 4501 0048 80BC     		pop	{r7}
 4502              	.LCFI161:
 4503              		.cfi_restore 7
 4504              		.cfi_def_cfa_offset 0
 4505 004a 7047     		bx	lr
 4506              		.cfi_endproc
 4507              	.LFE91:
 4509              		.section	.text.vQueueAddToRegistry,"ax",%progbits
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 126


 4510              		.align	1
 4511              		.global	vQueueAddToRegistry
 4512              		.syntax unified
 4513              		.thumb
 4514              		.thumb_func
 4516              	vQueueAddToRegistry:
 4517              	.LFB92:
2369:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2370:./freertos/src/queue.c **** 
2371:./freertos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2372:./freertos/src/queue.c **** 
2373:./freertos/src/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2374:./freertos/src/queue.c **** 	{
2375:./freertos/src/queue.c **** 	BaseType_t xReturn;
2376:./freertos/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2377:./freertos/src/queue.c **** 
2378:./freertos/src/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2379:./freertos/src/queue.c **** 		is required to prevent an interrupt removing something from the queue
2380:./freertos/src/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2381:./freertos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2382:./freertos/src/queue.c **** 		{
2383:./freertos/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2384:./freertos/src/queue.c **** 			{
2385:./freertos/src/queue.c **** 				/* The queue is full - do we want to block or just leave without
2386:./freertos/src/queue.c **** 				posting? */
2387:./freertos/src/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2388:./freertos/src/queue.c **** 				{
2389:./freertos/src/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2390:./freertos/src/queue.c **** 					return indicating that we need to block. */
2391:./freertos/src/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2392:./freertos/src/queue.c **** 					portENABLE_INTERRUPTS();
2393:./freertos/src/queue.c **** 					return errQUEUE_BLOCKED;
2394:./freertos/src/queue.c **** 				}
2395:./freertos/src/queue.c **** 				else
2396:./freertos/src/queue.c **** 				{
2397:./freertos/src/queue.c **** 					portENABLE_INTERRUPTS();
2398:./freertos/src/queue.c **** 					return errQUEUE_FULL;
2399:./freertos/src/queue.c **** 				}
2400:./freertos/src/queue.c **** 			}
2401:./freertos/src/queue.c **** 		}
2402:./freertos/src/queue.c **** 		portENABLE_INTERRUPTS();
2403:./freertos/src/queue.c **** 
2404:./freertos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2405:./freertos/src/queue.c **** 		{
2406:./freertos/src/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2407:./freertos/src/queue.c **** 			{
2408:./freertos/src/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2409:./freertos/src/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2410:./freertos/src/queue.c **** 				xReturn = pdPASS;
2411:./freertos/src/queue.c **** 
2412:./freertos/src/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2413:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2414:./freertos/src/queue.c **** 				{
2415:./freertos/src/queue.c **** 					/* In this instance the co-routine could be placed directly
2416:./freertos/src/queue.c **** 					into the ready list as we are within a critical section.
2417:./freertos/src/queue.c **** 					Instead the same pending ready list mechanism is used as if
2418:./freertos/src/queue.c **** 					the event were caused from within an interrupt. */
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 127


2419:./freertos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2420:./freertos/src/queue.c **** 					{
2421:./freertos/src/queue.c **** 						/* The co-routine waiting has a higher priority so record
2422:./freertos/src/queue.c **** 						that a yield might be appropriate. */
2423:./freertos/src/queue.c **** 						xReturn = errQUEUE_YIELD;
2424:./freertos/src/queue.c **** 					}
2425:./freertos/src/queue.c **** 					else
2426:./freertos/src/queue.c **** 					{
2427:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2428:./freertos/src/queue.c **** 					}
2429:./freertos/src/queue.c **** 				}
2430:./freertos/src/queue.c **** 				else
2431:./freertos/src/queue.c **** 				{
2432:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2433:./freertos/src/queue.c **** 				}
2434:./freertos/src/queue.c **** 			}
2435:./freertos/src/queue.c **** 			else
2436:./freertos/src/queue.c **** 			{
2437:./freertos/src/queue.c **** 				xReturn = errQUEUE_FULL;
2438:./freertos/src/queue.c **** 			}
2439:./freertos/src/queue.c **** 		}
2440:./freertos/src/queue.c **** 		portENABLE_INTERRUPTS();
2441:./freertos/src/queue.c **** 
2442:./freertos/src/queue.c **** 		return xReturn;
2443:./freertos/src/queue.c **** 	}
2444:./freertos/src/queue.c **** 
2445:./freertos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2446:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2447:./freertos/src/queue.c **** 
2448:./freertos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2449:./freertos/src/queue.c **** 
2450:./freertos/src/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2451:./freertos/src/queue.c **** 	{
2452:./freertos/src/queue.c **** 	BaseType_t xReturn;
2453:./freertos/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2454:./freertos/src/queue.c **** 
2455:./freertos/src/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2456:./freertos/src/queue.c **** 		is required to prevent an interrupt adding something to the queue
2457:./freertos/src/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2458:./freertos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2459:./freertos/src/queue.c **** 		{
2460:./freertos/src/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2461:./freertos/src/queue.c **** 			{
2462:./freertos/src/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2463:./freertos/src/queue.c **** 				leave with nothing? */
2464:./freertos/src/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2465:./freertos/src/queue.c **** 				{
2466:./freertos/src/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2467:./freertos/src/queue.c **** 					indicating that we need to block. */
2468:./freertos/src/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2469:./freertos/src/queue.c **** 					portENABLE_INTERRUPTS();
2470:./freertos/src/queue.c **** 					return errQUEUE_BLOCKED;
2471:./freertos/src/queue.c **** 				}
2472:./freertos/src/queue.c **** 				else
2473:./freertos/src/queue.c **** 				{
2474:./freertos/src/queue.c **** 					portENABLE_INTERRUPTS();
2475:./freertos/src/queue.c **** 					return errQUEUE_FULL;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 128


2476:./freertos/src/queue.c **** 				}
2477:./freertos/src/queue.c **** 			}
2478:./freertos/src/queue.c **** 			else
2479:./freertos/src/queue.c **** 			{
2480:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2481:./freertos/src/queue.c **** 			}
2482:./freertos/src/queue.c **** 		}
2483:./freertos/src/queue.c **** 		portENABLE_INTERRUPTS();
2484:./freertos/src/queue.c **** 
2485:./freertos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2486:./freertos/src/queue.c **** 		{
2487:./freertos/src/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2488:./freertos/src/queue.c **** 			{
2489:./freertos/src/queue.c **** 				/* Data is available from the queue. */
2490:./freertos/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2491:./freertos/src/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2492:./freertos/src/queue.c **** 				{
2493:./freertos/src/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2494:./freertos/src/queue.c **** 				}
2495:./freertos/src/queue.c **** 				else
2496:./freertos/src/queue.c **** 				{
2497:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2498:./freertos/src/queue.c **** 				}
2499:./freertos/src/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2500:./freertos/src/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2501:./freertos/src/queue.c **** 
2502:./freertos/src/queue.c **** 				xReturn = pdPASS;
2503:./freertos/src/queue.c **** 
2504:./freertos/src/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2505:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2506:./freertos/src/queue.c **** 				{
2507:./freertos/src/queue.c **** 					/* In this instance the co-routine could be placed directly
2508:./freertos/src/queue.c **** 					into the ready list as we are within a critical section.
2509:./freertos/src/queue.c **** 					Instead the same pending ready list mechanism is used as if
2510:./freertos/src/queue.c **** 					the event were caused from within an interrupt. */
2511:./freertos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2512:./freertos/src/queue.c **** 					{
2513:./freertos/src/queue.c **** 						xReturn = errQUEUE_YIELD;
2514:./freertos/src/queue.c **** 					}
2515:./freertos/src/queue.c **** 					else
2516:./freertos/src/queue.c **** 					{
2517:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2518:./freertos/src/queue.c **** 					}
2519:./freertos/src/queue.c **** 				}
2520:./freertos/src/queue.c **** 				else
2521:./freertos/src/queue.c **** 				{
2522:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2523:./freertos/src/queue.c **** 				}
2524:./freertos/src/queue.c **** 			}
2525:./freertos/src/queue.c **** 			else
2526:./freertos/src/queue.c **** 			{
2527:./freertos/src/queue.c **** 				xReturn = pdFAIL;
2528:./freertos/src/queue.c **** 			}
2529:./freertos/src/queue.c **** 		}
2530:./freertos/src/queue.c **** 		portENABLE_INTERRUPTS();
2531:./freertos/src/queue.c **** 
2532:./freertos/src/queue.c **** 		return xReturn;
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 129


2533:./freertos/src/queue.c **** 	}
2534:./freertos/src/queue.c **** 
2535:./freertos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2536:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2537:./freertos/src/queue.c **** 
2538:./freertos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2539:./freertos/src/queue.c **** 
2540:./freertos/src/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2541:./freertos/src/queue.c **** 	{
2542:./freertos/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2543:./freertos/src/queue.c **** 
2544:./freertos/src/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2545:./freertos/src/queue.c **** 		exit without doing anything. */
2546:./freertos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2547:./freertos/src/queue.c **** 		{
2548:./freertos/src/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2549:./freertos/src/queue.c **** 
2550:./freertos/src/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2551:./freertos/src/queue.c **** 			co-routine has not already been woken. */
2552:./freertos/src/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2553:./freertos/src/queue.c **** 			{
2554:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2555:./freertos/src/queue.c **** 				{
2556:./freertos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2557:./freertos/src/queue.c **** 					{
2558:./freertos/src/queue.c **** 						return pdTRUE;
2559:./freertos/src/queue.c **** 					}
2560:./freertos/src/queue.c **** 					else
2561:./freertos/src/queue.c **** 					{
2562:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2563:./freertos/src/queue.c **** 					}
2564:./freertos/src/queue.c **** 				}
2565:./freertos/src/queue.c **** 				else
2566:./freertos/src/queue.c **** 				{
2567:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2568:./freertos/src/queue.c **** 				}
2569:./freertos/src/queue.c **** 			}
2570:./freertos/src/queue.c **** 			else
2571:./freertos/src/queue.c **** 			{
2572:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2573:./freertos/src/queue.c **** 			}
2574:./freertos/src/queue.c **** 		}
2575:./freertos/src/queue.c **** 		else
2576:./freertos/src/queue.c **** 		{
2577:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2578:./freertos/src/queue.c **** 		}
2579:./freertos/src/queue.c **** 
2580:./freertos/src/queue.c **** 		return xCoRoutinePreviouslyWoken;
2581:./freertos/src/queue.c **** 	}
2582:./freertos/src/queue.c **** 
2583:./freertos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2584:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2585:./freertos/src/queue.c **** 
2586:./freertos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2587:./freertos/src/queue.c **** 
2588:./freertos/src/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2589:./freertos/src/queue.c **** 	{
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 130


2590:./freertos/src/queue.c **** 	BaseType_t xReturn;
2591:./freertos/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2592:./freertos/src/queue.c **** 
2593:./freertos/src/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2594:./freertos/src/queue.c **** 		not then just leave without doing anything. */
2595:./freertos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2596:./freertos/src/queue.c **** 		{
2597:./freertos/src/queue.c **** 			/* Copy the data from the queue. */
2598:./freertos/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2599:./freertos/src/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2600:./freertos/src/queue.c **** 			{
2601:./freertos/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2602:./freertos/src/queue.c **** 			}
2603:./freertos/src/queue.c **** 			else
2604:./freertos/src/queue.c **** 			{
2605:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2606:./freertos/src/queue.c **** 			}
2607:./freertos/src/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2608:./freertos/src/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2609:./freertos/src/queue.c **** 
2610:./freertos/src/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2611:./freertos/src/queue.c **** 			{
2612:./freertos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2613:./freertos/src/queue.c **** 				{
2614:./freertos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2615:./freertos/src/queue.c **** 					{
2616:./freertos/src/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2617:./freertos/src/queue.c **** 					}
2618:./freertos/src/queue.c **** 					else
2619:./freertos/src/queue.c **** 					{
2620:./freertos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2621:./freertos/src/queue.c **** 					}
2622:./freertos/src/queue.c **** 				}
2623:./freertos/src/queue.c **** 				else
2624:./freertos/src/queue.c **** 				{
2625:./freertos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2626:./freertos/src/queue.c **** 				}
2627:./freertos/src/queue.c **** 			}
2628:./freertos/src/queue.c **** 			else
2629:./freertos/src/queue.c **** 			{
2630:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:./freertos/src/queue.c **** 			}
2632:./freertos/src/queue.c **** 
2633:./freertos/src/queue.c **** 			xReturn = pdPASS;
2634:./freertos/src/queue.c **** 		}
2635:./freertos/src/queue.c **** 		else
2636:./freertos/src/queue.c **** 		{
2637:./freertos/src/queue.c **** 			xReturn = pdFAIL;
2638:./freertos/src/queue.c **** 		}
2639:./freertos/src/queue.c **** 
2640:./freertos/src/queue.c **** 		return xReturn;
2641:./freertos/src/queue.c **** 	}
2642:./freertos/src/queue.c **** 
2643:./freertos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2644:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2645:./freertos/src/queue.c **** 
2646:./freertos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 131


2647:./freertos/src/queue.c **** 
2648:./freertos/src/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2649:./freertos/src/queue.c **** 	{
 4518              		.loc 1 2649 2
 4519              		.cfi_startproc
 4520              		@ args = 0, pretend = 0, frame = 16
 4521              		@ frame_needed = 1, uses_anonymous_args = 0
 4522              		@ link register save eliminated.
 4523 0000 80B4     		push	{r7}
 4524              	.LCFI162:
 4525              		.cfi_def_cfa_offset 4
 4526              		.cfi_offset 7, -4
 4527 0002 85B0     		sub	sp, sp, #20
 4528              	.LCFI163:
 4529              		.cfi_def_cfa_offset 24
 4530 0004 00AF     		add	r7, sp, #0
 4531              	.LCFI164:
 4532              		.cfi_def_cfa_register 7
 4533 0006 7860     		str	r0, [r7, #4]
 4534 0008 3960     		str	r1, [r7]
2650:./freertos/src/queue.c **** 	UBaseType_t ux;
2651:./freertos/src/queue.c **** 
2652:./freertos/src/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2653:./freertos/src/queue.c **** 		a free slot. */
2654:./freertos/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4535              		.loc 1 2654 11
 4536 000a 0023     		movs	r3, #0
 4537 000c FB60     		str	r3, [r7, #12]
 4538              		.loc 1 2654 3
 4539 000e 14E0     		b	.L287
 4540              	.L290:
2655:./freertos/src/queue.c **** 		{
2656:./freertos/src/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 4541              		.loc 1 2656 28
 4542 0010 0E4A     		ldr	r2, .L291
 4543 0012 FB68     		ldr	r3, [r7, #12]
 4544 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4545              		.loc 1 2656 6
 4546 0018 002B     		cmp	r3, #0
 4547 001a 0BD1     		bne	.L288
2657:./freertos/src/queue.c **** 			{
2658:./freertos/src/queue.c **** 				/* Store the information on this queue. */
2659:./freertos/src/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 4548              		.loc 1 2659 38
 4549 001c 0B49     		ldr	r1, .L291
 4550 001e FB68     		ldr	r3, [r7, #12]
 4551 0020 3A68     		ldr	r2, [r7]
 4552 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2660:./freertos/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 4553              		.loc 1 2660 34
 4554 0026 094A     		ldr	r2, .L291
 4555 0028 FB68     		ldr	r3, [r7, #12]
 4556 002a DB00     		lsls	r3, r3, #3
 4557 002c 1344     		add	r3, r3, r2
 4558 002e 7A68     		ldr	r2, [r7, #4]
 4559 0030 5A60     		str	r2, [r3, #4]
2661:./freertos/src/queue.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 132


2662:./freertos/src/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2663:./freertos/src/queue.c **** 				break;
 4560              		.loc 1 2663 5
 4561 0032 06E0     		b	.L289
 4562              	.L288:
2654:./freertos/src/queue.c **** 		{
 4563              		.loc 1 2654 83 discriminator 2
 4564 0034 FB68     		ldr	r3, [r7, #12]
 4565 0036 0133     		adds	r3, r3, #1
 4566 0038 FB60     		str	r3, [r7, #12]
 4567              	.L287:
2654:./freertos/src/queue.c **** 		{
 4568              		.loc 1 2654 36 discriminator 1
 4569 003a FB68     		ldr	r3, [r7, #12]
 4570 003c 072B     		cmp	r3, #7
 4571 003e E7D9     		bls	.L290
2664:./freertos/src/queue.c **** 			}
2665:./freertos/src/queue.c **** 			else
2666:./freertos/src/queue.c **** 			{
2667:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2668:./freertos/src/queue.c **** 			}
2669:./freertos/src/queue.c **** 		}
2670:./freertos/src/queue.c **** 	}
 4572              		.loc 1 2670 2
 4573 0040 00BF     		nop
 4574              	.L289:
 4575 0042 00BF     		nop
 4576 0044 1437     		adds	r7, r7, #20
 4577              	.LCFI165:
 4578              		.cfi_def_cfa_offset 4
 4579 0046 BD46     		mov	sp, r7
 4580              	.LCFI166:
 4581              		.cfi_def_cfa_register 13
 4582              		@ sp needed
 4583 0048 80BC     		pop	{r7}
 4584              	.LCFI167:
 4585              		.cfi_restore 7
 4586              		.cfi_def_cfa_offset 0
 4587 004a 7047     		bx	lr
 4588              	.L292:
 4589              		.align	2
 4590              	.L291:
 4591 004c 00000000 		.word	xQueueRegistry
 4592              		.cfi_endproc
 4593              	.LFE92:
 4595              		.section	.text.pcQueueGetName,"ax",%progbits
 4596              		.align	1
 4597              		.global	pcQueueGetName
 4598              		.syntax unified
 4599              		.thumb
 4600              		.thumb_func
 4602              	pcQueueGetName:
 4603              	.LFB93:
2671:./freertos/src/queue.c **** 
2672:./freertos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2673:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2674:./freertos/src/queue.c **** 
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 133


2675:./freertos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2676:./freertos/src/queue.c **** 
2677:./freertos/src/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2678:./freertos/src/queue.c **** 	{
 4604              		.loc 1 2678 2
 4605              		.cfi_startproc
 4606              		@ args = 0, pretend = 0, frame = 16
 4607              		@ frame_needed = 1, uses_anonymous_args = 0
 4608              		@ link register save eliminated.
 4609 0000 80B4     		push	{r7}
 4610              	.LCFI168:
 4611              		.cfi_def_cfa_offset 4
 4612              		.cfi_offset 7, -4
 4613 0002 85B0     		sub	sp, sp, #20
 4614              	.LCFI169:
 4615              		.cfi_def_cfa_offset 24
 4616 0004 00AF     		add	r7, sp, #0
 4617              	.LCFI170:
 4618              		.cfi_def_cfa_register 7
 4619 0006 7860     		str	r0, [r7, #4]
2679:./freertos/src/queue.c **** 	UBaseType_t ux;
2680:./freertos/src/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 4620              		.loc 1 2680 14
 4621 0008 0023     		movs	r3, #0
 4622 000a BB60     		str	r3, [r7, #8]
2681:./freertos/src/queue.c **** 
2682:./freertos/src/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2683:./freertos/src/queue.c **** 		removing entries from the registry while it is being searched. */
2684:./freertos/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4623              		.loc 1 2684 11
 4624 000c 0023     		movs	r3, #0
 4625 000e FB60     		str	r3, [r7, #12]
 4626              		.loc 1 2684 3
 4627 0010 10E0     		b	.L294
 4628              	.L297:
2685:./freertos/src/queue.c **** 		{
2686:./freertos/src/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 4629              		.loc 1 2686 28
 4630 0012 0D4A     		ldr	r2, .L299
 4631 0014 FB68     		ldr	r3, [r7, #12]
 4632 0016 DB00     		lsls	r3, r3, #3
 4633 0018 1344     		add	r3, r3, r2
 4634 001a 5B68     		ldr	r3, [r3, #4]
 4635              		.loc 1 2686 6
 4636 001c 7A68     		ldr	r2, [r7, #4]
 4637 001e 9A42     		cmp	r2, r3
 4638 0020 05D1     		bne	.L295
2687:./freertos/src/queue.c **** 			{
2688:./freertos/src/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 4639              		.loc 1 2688 14
 4640 0022 094A     		ldr	r2, .L299
 4641 0024 FB68     		ldr	r3, [r7, #12]
 4642 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4643 002a BB60     		str	r3, [r7, #8]
2689:./freertos/src/queue.c **** 				break;
 4644              		.loc 1 2689 5
 4645 002c 05E0     		b	.L296
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 134


 4646              	.L295:
2684:./freertos/src/queue.c **** 		{
 4647              		.loc 1 2684 83 discriminator 2
 4648 002e FB68     		ldr	r3, [r7, #12]
 4649 0030 0133     		adds	r3, r3, #1
 4650 0032 FB60     		str	r3, [r7, #12]
 4651              	.L294:
2684:./freertos/src/queue.c **** 		{
 4652              		.loc 1 2684 36 discriminator 1
 4653 0034 FB68     		ldr	r3, [r7, #12]
 4654 0036 072B     		cmp	r3, #7
 4655 0038 EBD9     		bls	.L297
 4656              	.L296:
2690:./freertos/src/queue.c **** 			}
2691:./freertos/src/queue.c **** 			else
2692:./freertos/src/queue.c **** 			{
2693:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2694:./freertos/src/queue.c **** 			}
2695:./freertos/src/queue.c **** 		}
2696:./freertos/src/queue.c **** 
2697:./freertos/src/queue.c **** 		return pcReturn;
 4657              		.loc 1 2697 10
 4658 003a BB68     		ldr	r3, [r7, #8]
2698:./freertos/src/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 4659              		.loc 1 2698 2
 4660 003c 1846     		mov	r0, r3
 4661 003e 1437     		adds	r7, r7, #20
 4662              	.LCFI171:
 4663              		.cfi_def_cfa_offset 4
 4664 0040 BD46     		mov	sp, r7
 4665              	.LCFI172:
 4666              		.cfi_def_cfa_register 13
 4667              		@ sp needed
 4668 0042 80BC     		pop	{r7}
 4669              	.LCFI173:
 4670              		.cfi_restore 7
 4671              		.cfi_def_cfa_offset 0
 4672 0044 7047     		bx	lr
 4673              	.L300:
 4674 0046 00BF     		.align	2
 4675              	.L299:
 4676 0048 00000000 		.word	xQueueRegistry
 4677              		.cfi_endproc
 4678              	.LFE93:
 4680              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 4681              		.align	1
 4682              		.global	vQueueUnregisterQueue
 4683              		.syntax unified
 4684              		.thumb
 4685              		.thumb_func
 4687              	vQueueUnregisterQueue:
 4688              	.LFB94:
2699:./freertos/src/queue.c **** 
2700:./freertos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2701:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2702:./freertos/src/queue.c **** 
2703:./freertos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 135


2704:./freertos/src/queue.c **** 
2705:./freertos/src/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2706:./freertos/src/queue.c **** 	{
 4689              		.loc 1 2706 2
 4690              		.cfi_startproc
 4691              		@ args = 0, pretend = 0, frame = 16
 4692              		@ frame_needed = 1, uses_anonymous_args = 0
 4693              		@ link register save eliminated.
 4694 0000 80B4     		push	{r7}
 4695              	.LCFI174:
 4696              		.cfi_def_cfa_offset 4
 4697              		.cfi_offset 7, -4
 4698 0002 85B0     		sub	sp, sp, #20
 4699              	.LCFI175:
 4700              		.cfi_def_cfa_offset 24
 4701 0004 00AF     		add	r7, sp, #0
 4702              	.LCFI176:
 4703              		.cfi_def_cfa_register 7
 4704 0006 7860     		str	r0, [r7, #4]
2707:./freertos/src/queue.c **** 	UBaseType_t ux;
2708:./freertos/src/queue.c **** 
2709:./freertos/src/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2710:./freertos/src/queue.c **** 		registry. */
2711:./freertos/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4705              		.loc 1 2711 11
 4706 0008 0023     		movs	r3, #0
 4707 000a FB60     		str	r3, [r7, #12]
 4708              		.loc 1 2711 3
 4709 000c 16E0     		b	.L302
 4710              	.L305:
2712:./freertos/src/queue.c **** 		{
2713:./freertos/src/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 4711              		.loc 1 2713 28
 4712 000e 104A     		ldr	r2, .L306
 4713 0010 FB68     		ldr	r3, [r7, #12]
 4714 0012 DB00     		lsls	r3, r3, #3
 4715 0014 1344     		add	r3, r3, r2
 4716 0016 5B68     		ldr	r3, [r3, #4]
 4717              		.loc 1 2713 6
 4718 0018 7A68     		ldr	r2, [r7, #4]
 4719 001a 9A42     		cmp	r2, r3
 4720 001c 0BD1     		bne	.L303
2714:./freertos/src/queue.c **** 			{
2715:./freertos/src/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2716:./freertos/src/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 4721              		.loc 1 2716 38
 4722 001e 0C4A     		ldr	r2, .L306
 4723 0020 FB68     		ldr	r3, [r7, #12]
 4724 0022 0021     		movs	r1, #0
 4725 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2717:./freertos/src/queue.c **** 
2718:./freertos/src/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2719:./freertos/src/queue.c **** 				appear in the registry twice if it is added, removed, then
2720:./freertos/src/queue.c **** 				added again. */
2721:./freertos/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 4726              		.loc 1 2721 34
 4727 0028 094A     		ldr	r2, .L306
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 136


 4728 002a FB68     		ldr	r3, [r7, #12]
 4729 002c DB00     		lsls	r3, r3, #3
 4730 002e 1344     		add	r3, r3, r2
 4731 0030 0022     		movs	r2, #0
 4732 0032 5A60     		str	r2, [r3, #4]
2722:./freertos/src/queue.c **** 				break;
 4733              		.loc 1 2722 5
 4734 0034 06E0     		b	.L304
 4735              	.L303:
2711:./freertos/src/queue.c **** 		{
 4736              		.loc 1 2711 83 discriminator 2
 4737 0036 FB68     		ldr	r3, [r7, #12]
 4738 0038 0133     		adds	r3, r3, #1
 4739 003a FB60     		str	r3, [r7, #12]
 4740              	.L302:
2711:./freertos/src/queue.c **** 		{
 4741              		.loc 1 2711 36 discriminator 1
 4742 003c FB68     		ldr	r3, [r7, #12]
 4743 003e 072B     		cmp	r3, #7
 4744 0040 E5D9     		bls	.L305
2723:./freertos/src/queue.c **** 			}
2724:./freertos/src/queue.c **** 			else
2725:./freertos/src/queue.c **** 			{
2726:./freertos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2727:./freertos/src/queue.c **** 			}
2728:./freertos/src/queue.c **** 		}
2729:./freertos/src/queue.c **** 
2730:./freertos/src/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4745              		.loc 1 2730 2
 4746 0042 00BF     		nop
 4747              	.L304:
 4748 0044 00BF     		nop
 4749 0046 1437     		adds	r7, r7, #20
 4750              	.LCFI177:
 4751              		.cfi_def_cfa_offset 4
 4752 0048 BD46     		mov	sp, r7
 4753              	.LCFI178:
 4754              		.cfi_def_cfa_register 13
 4755              		@ sp needed
 4756 004a 80BC     		pop	{r7}
 4757              	.LCFI179:
 4758              		.cfi_restore 7
 4759              		.cfi_def_cfa_offset 0
 4760 004c 7047     		bx	lr
 4761              	.L307:
 4762 004e 00BF     		.align	2
 4763              	.L306:
 4764 0050 00000000 		.word	xQueueRegistry
 4765              		.cfi_endproc
 4766              	.LFE94:
 4768              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 4769              		.align	1
 4770              		.global	vQueueWaitForMessageRestricted
 4771              		.syntax unified
 4772              		.thumb
 4773              		.thumb_func
 4775              	vQueueWaitForMessageRestricted:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 137


 4776              	.LFB95:
2731:./freertos/src/queue.c **** 
2732:./freertos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2733:./freertos/src/queue.c **** /*-----------------------------------------------------------*/
2734:./freertos/src/queue.c **** 
2735:./freertos/src/queue.c **** #if ( configUSE_TIMERS == 1 )
2736:./freertos/src/queue.c **** 
2737:./freertos/src/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2738:./freertos/src/queue.c **** 	{
 4777              		.loc 1 2738 2
 4778              		.cfi_startproc
 4779              		@ args = 0, pretend = 0, frame = 24
 4780              		@ frame_needed = 1, uses_anonymous_args = 0
 4781 0000 80B5     		push	{r7, lr}
 4782              	.LCFI180:
 4783              		.cfi_def_cfa_offset 8
 4784              		.cfi_offset 7, -8
 4785              		.cfi_offset 14, -4
 4786 0002 86B0     		sub	sp, sp, #24
 4787              	.LCFI181:
 4788              		.cfi_def_cfa_offset 32
 4789 0004 00AF     		add	r7, sp, #0
 4790              	.LCFI182:
 4791              		.cfi_def_cfa_register 7
 4792 0006 F860     		str	r0, [r7, #12]
 4793 0008 B960     		str	r1, [r7, #8]
 4794 000a 7A60     		str	r2, [r7, #4]
2739:./freertos/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
 4795              		.loc 1 2739 18
 4796 000c FB68     		ldr	r3, [r7, #12]
 4797 000e 7B61     		str	r3, [r7, #20]
2740:./freertos/src/queue.c **** 
2741:./freertos/src/queue.c **** 		/* This function should not be called by application code hence the
2742:./freertos/src/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2743:./freertos/src/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2744:./freertos/src/queue.c **** 		It can result in vListInsert() being called on a list that can only
2745:./freertos/src/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2746:./freertos/src/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2747:./freertos/src/queue.c **** 		section. */
2748:./freertos/src/queue.c **** 
2749:./freertos/src/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2750:./freertos/src/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2751:./freertos/src/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2752:./freertos/src/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2753:./freertos/src/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2754:./freertos/src/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2755:./freertos/src/queue.c **** 		prvLockQueue( pxQueue );
 4798              		.loc 1 2755 3
 4799 0010 FFF7FEFF 		bl	vPortEnterCritical
 4800              		.loc 1 2755 3 is_stmt 0 discriminator 1
 4801 0014 7B69     		ldr	r3, [r7, #20]
 4802 0016 93F84430 		ldrb	r3, [r3, #68]
 4803 001a 5BB2     		sxtb	r3, r3
 4804 001c B3F1FF3F 		cmp	r3, #-1
 4805 0020 03D1     		bne	.L309
 4806 0022 7B69     		ldr	r3, [r7, #20]
 4807 0024 0022     		movs	r2, #0
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 138


 4808 0026 83F84420 		strb	r2, [r3, #68]
 4809              	.L309:
 4810              		.loc 1 2755 3 discriminator 3
 4811 002a 7B69     		ldr	r3, [r7, #20]
 4812 002c 93F84530 		ldrb	r3, [r3, #69]
 4813 0030 5BB2     		sxtb	r3, r3
 4814 0032 B3F1FF3F 		cmp	r3, #-1
 4815 0036 03D1     		bne	.L310
 4816              		.loc 1 2755 3 discriminator 4
 4817 0038 7B69     		ldr	r3, [r7, #20]
 4818 003a 0022     		movs	r2, #0
 4819 003c 83F84520 		strb	r2, [r3, #69]
 4820              	.L310:
 4821              		.loc 1 2755 3 discriminator 6
 4822 0040 FFF7FEFF 		bl	vPortExitCritical
2756:./freertos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 4823              		.loc 1 2756 14 is_stmt 1
 4824 0044 7B69     		ldr	r3, [r7, #20]
 4825 0046 9B6B     		ldr	r3, [r3, #56]
 4826              		.loc 1 2756 5
 4827 0048 002B     		cmp	r3, #0
 4828 004a 06D1     		bne	.L311
2757:./freertos/src/queue.c **** 		{
2758:./freertos/src/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2759:./freertos/src/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 4829              		.loc 1 2759 4
 4830 004c 7B69     		ldr	r3, [r7, #20]
 4831 004e 2433     		adds	r3, r3, #36
 4832 0050 7A68     		ldr	r2, [r7, #4]
 4833 0052 B968     		ldr	r1, [r7, #8]
 4834 0054 1846     		mov	r0, r3
 4835 0056 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 4836              	.L311:
2760:./freertos/src/queue.c **** 		}
2761:./freertos/src/queue.c **** 		else
2762:./freertos/src/queue.c **** 		{
2763:./freertos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2764:./freertos/src/queue.c **** 		}
2765:./freertos/src/queue.c **** 		prvUnlockQueue( pxQueue );
 4837              		.loc 1 2765 3
 4838 005a 7869     		ldr	r0, [r7, #20]
 4839 005c FFF7FEFF 		bl	prvUnlockQueue
2766:./freertos/src/queue.c **** 	}
 4840              		.loc 1 2766 2
 4841 0060 00BF     		nop
 4842 0062 1837     		adds	r7, r7, #24
 4843              	.LCFI183:
 4844              		.cfi_def_cfa_offset 8
 4845 0064 BD46     		mov	sp, r7
 4846              	.LCFI184:
 4847              		.cfi_def_cfa_register 13
 4848              		@ sp needed
 4849 0066 80BD     		pop	{r7, pc}
 4850              		.cfi_endproc
 4851              	.LFE95:
 4853              		.text
 4854              	.Letext0:
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 139


 4855              		.file 3 "C:/arm-toolchain/14.3/lib/gcc/arm-none-eabi/14.3.1/include/stddef.h"
 4856              		.file 4 "C:/arm-toolchain/14.3/arm-none-eabi/include/machine/_default_types.h"
 4857              		.file 5 "C:/arm-toolchain/14.3/arm-none-eabi/include/sys/_stdint.h"
 4858              		.file 6 "./freertos/inc/list.h"
 4859              		.file 7 "./freertos/inc/task.h"
 4860              		.file 8 "./freertos/inc/queue.h"
 4861              		.file 9 "C:/arm-toolchain/14.3/arm-none-eabi/include/string.h"
 4862              		.file 10 "./freertos/inc/portable.h"
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 140


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:23     .bss.xQueueRegistry:00000000 xQueueRegistry
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:20     .bss.xQueueRegistry:00000000 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:26     .text.xQueueGenericReset:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:32     .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:199    .text.xQueueGenericReset:000000d0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:204    .text.xQueueGenericCreate:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:210    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:311    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:306    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:377    .text.prvInitialiseMutex:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:382    .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:830    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:437    .text.xQueueCreateMutex:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:443    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:494    .text.xQueueGiveMutexRecursive:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:500    .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:603    .text.xQueueTakeMutexRecursive:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:609    .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2117   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:713    .text.xQueueCreateCountingSemaphore:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:719    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:824    .text.xQueueGenericSend:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3820   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4362   .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4076   .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1222   .text.xQueueGenericSend:00000200 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1227   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1233   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1507   .text.xQueueGiveFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1513   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1765   .text.xQueueReceive:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:1771   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3995   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4215   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2106   .text.xQueueReceive:000001c0 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2111   .text.xQueueSemaphoreTake:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3758   .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2512   .text.xQueueSemaphoreTake:0000021c $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2517   .text.xQueuePeek:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2523   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2860   .text.xQueuePeek:000001c4 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2865   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:2871   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3096   .text.xQueuePeekFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3102   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3306   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3312   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3381   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3387   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3464   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3470   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3542   .text.vQueueDelete:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3548   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4687   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3616   .text.uxQueueGetQueueNumber:00000000 $t
ARM GAS  C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s 			page 141


C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3622   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3661   .text.vQueueSetQueueNumber:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3667   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3708   .text.ucQueueGetQueueType:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3714   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3753   .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3815   .text.prvCopyDataToQueue:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:3990   .text.prvCopyDataFromQueue:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4071   .text.prvUnlockQueue:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4210   .text.prvIsQueueEmpty:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4268   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4274   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4357   .text.prvIsQueueFull:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4418   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4424   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4510   .text.vQueueAddToRegistry:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4516   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4591   .text.vQueueAddToRegistry:0000004c $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4596   .text.pcQueueGetName:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4602   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4676   .text.pcQueueGetName:00000048 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4681   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4764   .text.vQueueUnregisterQueue:00000050 $d
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4769   .text.vQueueWaitForMessageRestricted:00000000 $t
C:\Users\PRAETE~1\AppData\Local\Temp\ccgrNlcl.s:4775   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
